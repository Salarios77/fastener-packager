

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 13 14:44:48 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           ; Version 1.45
    59                           ; Generated 16/11/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F4620 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	idataCOMRAM
    94  00178A                     __pidataCOMRAM:
    95                           	opt stack 0
    96                           
    97                           ;initializer for showLogs@F3187
    98  00178A  30                 	db	48
    99  00178B  30                 	db	48
   100  00178C  30                 	db	48
   101  00178D  30                 	db	48
   102  00178E  30                 	db	48
   103  00178F  30                 	db	48
   104                           
   105                           	psect	idataBANK1
   106  001326                     __pidataBANK1:
   107                           	opt stack 0
   108                           
   109                           ;initializer for checkValid@F3153
   110  001326  42                 	db	66
   111  001327  30                 	db	48
   112  001328  30                 	db	48
   113  001329  30                 	db	48
   114  00132A  00                 	db	0
   115  00132B  4E                 	db	78
   116  00132C  30                 	db	48
   117  00132D  30                 	db	48
   118  00132E  30                 	db	48
   119  00132F  00                 	db	0
   120  001330  53                 	db	83
   121  001331  30                 	db	48
   122  001332  30                 	db	48
   123  001333  30                 	db	48
   124  001334  00                 	db	0
   125  001335  57                 	db	87
   126  001336  30                 	db	48
   127  001337  30                 	db	48
   128  001338  30                 	db	48
   129  001339  00                 	db	0
   130  00133A  42                 	db	66
   131  00133B  4E                 	db	78
   132  00133C  30                 	db	48
   133  00133D  30                 	db	48
   134  00133E  00                 	db	0
   135  00133F  42                 	db	66
   136  001340  53                 	db	83
   137  001341  30                 	db	48
   138  001342  30                 	db	48
   139  001343  00                 	db	0
   140  001344  42                 	db	66
   141  001345  57                 	db	87
   142  001346  30                 	db	48
   143  001347  30                 	db	48
   144  001348  00                 	db	0
   145  001349  42                 	db	66
   146  00134A  42                 	db	66
   147  00134B  4E                 	db	78
   148  00134C  30                 	db	48
   149  00134D  00                 	db	0
   150  00134E  42                 	db	66
   151  00134F  42                 	db	66
   152  001350  53                 	db	83
   153  001351  30                 	db	48
   154  001352  00                 	db	0
   155  001353  42                 	db	66
   156  001354  42                 	db	66
   157  001355  57                 	db	87
   158  001356  30                 	db	48
   159  001357  00                 	db	0
   160  001358  42                 	db	66
   161  001359  4E                 	db	78
   162  00135A  57                 	db	87
   163  00135B  30                 	db	48
   164  00135C  00                 	db	0
   165  00135D  42                 	db	66
   166  00135E  53                 	db	83
   167  00135F  57                 	db	87
   168  001360  30                 	db	48
   169  001361  00                 	db	0
   170  001362  42                 	db	66
   171  001363  57                 	db	87
   172  001364  57                 	db	87
   173  001365  30                 	db	48
   174  001366  00                 	db	0
   175  001367  42                 	db	66
   176  001368  4E                 	db	78
   177  001369  57                 	db	87
   178  00136A  57                 	db	87
   179  00136B  00                 	db	0
   180  00136C  42                 	db	66
   181  00136D  53                 	db	83
   182  00136E  57                 	db	87
   183  00136F  57                 	db	87
   184  001370  00                 	db	0
   185  001371  42                 	db	66
   186  001372  42                 	db	66
   187  001373  53                 	db	83
   188  001374  57                 	db	87
   189  001375  00                 	db	0
   190  001376  42                 	db	66
   191  001377  42                 	db	66
   192  001378  4E                 	db	78
   193  001379  57                 	db	87
   194  00137A  00                 	db	0
   195  00137B  42                 	db	66
   196  00137C  4E                 	db	78
   197  00137D  4E                 	db	78
   198  00137E  57                 	db	87
   199  00137F  00                 	db	0
   200  001380  42                 	db	66
   201  001381  4E                 	db	78
   202  001382  4E                 	db	78
   203  001383  4E                 	db	78
   204  001384  00                 	db	0
   205  001385  42                 	db	66
   206  001386  57                 	db	87
   207  001387  57                 	db	87
   208  001388  57                 	db	87
   209  001389  00                 	db	0
   210                           
   211                           ;initializer for main@F3120
   212  00138A  30                 	db	48
   213  00138B  30                 	db	48
   214  00138C  30                 	db	48
   215  00138D  30                 	db	48
   216  00138E  30                 	db	48
   217  00138F  30                 	db	48
   218                           
   219                           	psect	mediumconst
   220  00FEBA                     __pmediumconst:
   221                           	opt stack 0
   222  00FEBA  00                 	db	0
   223  00FEBB                     _keys:
   224                           	opt stack 0
   225  00FEBB  31                 	db	49
   226  00FEBC  32                 	db	50
   227  00FEBD  33                 	db	51
   228  00FEBE  41                 	db	65
   229  00FEBF  34                 	db	52
   230  00FEC0  35                 	db	53
   231  00FEC1  36                 	db	54
   232  00FEC2  42                 	db	66
   233  00FEC3  37                 	db	55
   234  00FEC4  38                 	db	56
   235  00FEC5  39                 	db	57
   236  00FEC6  43                 	db	67
   237  00FEC7  2A                 	db	42
   238  00FEC8  30                 	db	48
   239  00FEC9  23                 	db	35
   240  00FECA  44                 	db	68
   241  00FECB  00                 	db	0
   242  00FECC                     __end_of_keys:
   243                           	opt stack 0
   244  00FECC                     _dpowers:
   245                           	opt stack 0
   246  00FECC  0001               	dw	1
   247  00FECE  000A               	dw	10
   248  00FED0  0064               	dw	100
   249  00FED2  03E8               	dw	1000
   250  00FED4  2710               	dw	10000
   251  00FED6                     __end_of_dpowers:
   252                           	opt stack 0
   253  00FED6                     _hexpowers:
   254                           	opt stack 0
   255  00FED6  0001               	dw	1
   256  00FED8  0010               	dw	16
   257  00FEDA  0100               	dw	256
   258  00FEDC  1000               	dw	4096
   259  00FEDE                     __end_of_hexpowers:
   260                           	opt stack 0
   261  00FEDE                     checkValid@F3160:
   262                           	opt stack 0
   263  00FEDE  0002               	dw	2
   264  00FEE0  0003               	dw	3
   265  00FEE2  0002               	dw	2
   266  00FEE4  0004               	dw	4
   267  00FEE6                     __end_ofcheckValid@F3160:
   268                           	opt stack 0
   269  00FEE6                     _firstTimeSet:
   270                           	opt stack 0
   271  00FEE6  00                 	db	0
   272  00FEE7  53                 	db	83
   273  00FEE8  15                 	db	21
   274  00FEE9  01                 	db	1
   275  00FEEA  05                 	db	5
   276  00FEEB  02                 	db	2
   277  00FEEC  18                 	db	24
   278  00FEED                     __end_of_firstTimeSet:
   279                           	opt stack 0
   280  00FEED                     _setKeys:
   281                           	opt stack 0
   282  00FEED  42                 	db	66
   283  00FEEE  4E                 	db	78
   284  00FEEF  53                 	db	83
   285  00FEF0  57                 	db	87
   286  00FEF1  00                 	db	0
   287  00FEF2                     __end_of_setKeys:
   288                           	opt stack 0
   289  00FEF2                     _LCD_LEFT:
   290                           	opt stack 0
   291  00FEF2  00                 	db	0
   292  00FEF3                     __end_of_LCD_LEFT:
   293                           	opt stack 0
   294  00FEF3                     _LCD_RIGHT:
   295                           	opt stack 0
   296  00FEF3  01                 	db	1
   297  00FEF4                     __end_of_LCD_RIGHT:
   298                           	opt stack 0
   299  00FEF4                     _LCD_SIZE_VERT:
   300                           	opt stack 0
   301  00FEF4  02                 	db	2
   302  00FEF5                     __end_of_LCD_SIZE_VERT:
   303                           	opt stack 0
   304  00FEF5                     _LCD_SIZE_HORZ:
   305                           	opt stack 0
   306  00FEF5  10                 	db	16
   307  00FEF6                     __end_of_LCD_SIZE_HORZ:
   308                           	opt stack 0
   309  00FEF6                     _LCD_VERT_LIMIT:
   310                           	opt stack 0
   311  00FEF6  02                 	db	2
   312  00FEF7                     __end_of_LCD_VERT_LIMIT:
   313                           	opt stack 0
   314  00FEF7                     _LCD_HORZ_LIMIT:
   315                           	opt stack 0
   316  00FEF7  28                 	db	40
   317  00FEF8                     __end_of_LCD_HORZ_LIMIT:
   318                           	opt stack 0
   319  0000                     _SSPBUF	set	4041
   320  0000                     _SSPCON2bits	set	4037
   321  0000                     _SSPADD	set	4040
   322  0000                     _SSPCON2	set	4037
   323  0000                     _SSPCON1	set	4038
   324  0000                     _SSPSTAT	set	4039
   325  0000                     _TRISCbits	set	3988
   326  0000                     _SSPCON1bits	set	4038
   327  0000                     _PORTB	set	3969
   328  0000                     _PORTBbits	set	3969
   329  0000                     _INTCONbits	set	4082
   330  0000                     _LATDbits	set	3980
   331  0000                     _LATAbits	set	3977
   332  0000                     _ADCON1	set	4033
   333  0000                     _ADCON0	set	4034
   334  0000                     _TRISE	set	3990
   335  0000                     _TRISD	set	3989
   336  0000                     _TRISC	set	3988
   337  0000                     _TRISB	set	3987
   338  0000                     _TRISA	set	3986
   339  0000                     _LATE	set	3981
   340  0000                     _LATD	set	3980
   341  0000                     _LATC	set	3979
   342  0000                     _LATB	set	3978
   343  0000                     _LATA	set	3977
   344  0000                     _INT1IF	set	32640
   345  0000                     _INT1IE	set	32643
   346  00FEF8                     STR_1:
   347  00FEF8  25                 	db	37
   348  00FEF9  30                 	db	48	;'0'
   349  00FEFA  32                 	db	50	;'2'
   350  00FEFB  78                 	db	120	;'x'
   351  00FEFC  2F                 	db	47
   352  00FEFD  25                 	db	37
   353  00FEFE  30                 	db	48	;'0'
   354  00FEFF  32                 	db	50	;'2'
   355  00FF00  78                 	db	120	;'x'
   356  00FF01  2F                 	db	47
   357  00FF02  32                 	db	50	;'2'
   358  00FF03  30                 	db	48	;'0'
   359  00FF04  25                 	db	37
   360  00FF05  30                 	db	48	;'0'
   361  00FF06  32                 	db	50	;'2'
   362  00FF07  78                 	db	120	;'x'
   363  00FF08  20                 	db	32
   364  00FF09  25                 	db	37
   365  00FF0A  30                 	db	48	;'0'
   366  00FF0B  32                 	db	50	;'2'
   367  00FF0C  78                 	db	120	;'x'
   368  00FF0D  3A                 	db	58	;':'
   369  00FF0E  25                 	db	37
   370  00FF0F  30                 	db	48	;'0'
   371  00FF10  32                 	db	50	;'2'
   372  00FF11  78                 	db	120	;'x'
   373  00FF12  00                 	db	0
   374  00FF13                     STR_19:
   375  00FF13  30                 	db	48	;'0'
   376  00FF14  31                 	db	49	;'1'
   377  00FF15  32                 	db	50	;'2'
   378  00FF16  33                 	db	51	;'3'
   379  00FF17  34                 	db	52	;'4'
   380  00FF18  35                 	db	53	;'5'
   381  00FF19  36                 	db	54	;'6'
   382  00FF1A  37                 	db	55	;'7'
   383  00FF1B  38                 	db	56	;'8'
   384  00FF1C  39                 	db	57	;'9'
   385  00FF1D  61                 	db	97	;'a'
   386  00FF1E  62                 	db	98	;'b'
   387  00FF1F  63                 	db	99	;'c'
   388  00FF20  64                 	db	100	;'d'
   389  00FF21  65                 	db	101	;'e'
   390  00FF22  66                 	db	102	;'f'
   391  00FF23  00                 	db	0
   392  00FF24                     STR_4:
   393  00FF24  53                 	db	83	;'S'
   394  00FF25  45                 	db	69	;'E'
   395  00FF26  54                 	db	84	;'T'
   396  00FF27  3F                 	db	63	;'?'
   397  00FF28  20                 	db	32
   398  00FF29  31                 	db	49	;'1'
   399  00FF2A  32                 	db	50	;'2'
   400  00FF2B  33                 	db	51	;'3'
   401  00FF2C  34                 	db	52	;'4'
   402  00FF2D  3D                 	db	61	;'='
   403  00FF2E  7B                 	db	123
   404  00FF2F  42                 	db	66	;'B'
   405  00FF30  4E                 	db	78	;'N'
   406  00FF31  53                 	db	83	;'S'
   407  00FF32  57                 	db	87	;'W'
   408  00FF33  7D                 	db	125
   409  00FF34  00                 	db	0
   410  00FF35                     STR_14:
   411  00FF35  54                 	db	84	;'T'
   412  00FF36  49                 	db	73	;'I'
   413  00FF37  4D                 	db	77	;'M'
   414  00FF38  45                 	db	69	;'E'
   415  00FF39  3A                 	db	58	;':'
   416  00FF3A  25                 	db	37
   417  00FF3B  64                 	db	100	;'d'
   418  00FF3C  53                 	db	83	;'S'
   419  00FF3D  2E                 	db	46
   420  00FF3E  20                 	db	32
   421  00FF3F  48                 	db	72	;'H'
   422  00FF40  49                 	db	73	;'I'
   423  00FF41  54                 	db	84	;'T'
   424  00FF42  20                 	db	32
   425  00FF43  41                 	db	65	;'A'
   426  00FF44  00                 	db	0
   427  00FF45                     STR_8:
   428  00FF45  43                 	db	67	;'C'
   429  00FF46  4F                 	db	79	;'O'
   430  00FF47  4E                 	db	78	;'N'
   431  00FF48  54                 	db	84	;'T'
   432  00FF49  49                 	db	73	;'I'
   433  00FF4A  4E                 	db	78	;'N'
   434  00FF4B  55                 	db	85	;'U'
   435  00FF4C  45                 	db	69	;'E'
   436  00FF4D  3F                 	db	63	;'?'
   437  00FF4E  20                 	db	32
   438  00FF4F  48                 	db	72	;'H'
   439  00FF50  49                 	db	73	;'I'
   440  00FF51  54                 	db	84	;'T'
   441  00FF52  20                 	db	32
   442  00FF53  41                 	db	65	;'A'
   443  00FF54  00                 	db	0
   444  00FF55                     STR_18:
   445  00FF55  4F                 	db	79	;'O'
   446  00FF56  4C                 	db	76	;'L'
   447  00FF57  44                 	db	68	;'D'
   448  00FF58  45                 	db	69	;'E'
   449  00FF59  53                 	db	83	;'S'
   450  00FF5A  54                 	db	84	;'T'
   451  00FF5B  3A                 	db	58	;':'
   452  00FF5C  20                 	db	32
   453  00FF5D  41                 	db	65	;'A'
   454  00FF5E  2C                 	db	44
   455  00FF5F  42                 	db	66	;'B'
   456  00FF60  2C                 	db	44
   457  00FF61  43                 	db	67	;'C'
   458  00FF62  2C                 	db	44
   459  00FF63  44                 	db	68	;'D'
   460  00FF64  00                 	db	0
   461  00FF65                     STR_10:
   462  00FF65  42                 	db	66	;'B'
   463  00FF66  2D                 	db	45
   464  00FF67  4C                 	db	76	;'L'
   465  00FF68  4F                 	db	79	;'O'
   466  00FF69  47                 	db	71	;'G'
   467  00FF6A  2C                 	db	44
   468  00FF6B  4F                 	db	79	;'O'
   469  00FF6C  52                 	db	82	;'R'
   470  00FF6D  20                 	db	32
   471  00FF6E  43                 	db	67	;'C'
   472  00FF6F  2D                 	db	45
   473  00FF70  42                 	db	66	;'B'
   474  00FF71  41                 	db	65	;'A'
   475  00FF72  43                 	db	67	;'C'
   476  00FF73  4B                 	db	75	;'K'
   477  00FF74  00                 	db	0
   478  00FF75                     STR_2:
   479  00FF75  49                 	db	73	;'I'
   480  00FF76  4E                 	db	78	;'N'
   481  00FF77  56                 	db	86	;'V'
   482  00FF78  41                 	db	65	;'A'
   483  00FF79  4C                 	db	76	;'L'
   484  00FF7A  49                 	db	73	;'I'
   485  00FF7B  44                 	db	68	;'D'
   486  00FF7C  20                 	db	32
   487  00FF7D  49                 	db	73	;'I'
   488  00FF7E  4E                 	db	78	;'N'
   489  00FF7F  50                 	db	80	;'P'
   490  00FF80  55                 	db	85	;'U'
   491  00FF81  54                 	db	84	;'T'
   492  00FF82  21                 	db	33
   493  00FF83  00                 	db	0
   494  00FF84                     STR_15:
   495  00FF84  4C                 	db	76	;'L'
   496  00FF85  45                 	db	69	;'E'
   497  00FF86  46                 	db	70	;'F'
   498  00FF87  54                 	db	84	;'T'
   499  00FF88  3A                 	db	58	;':'
   500  00FF89  20                 	db	32
   501  00FF8A  25                 	db	37
   502  00FF8B  64                 	db	100	;'d'
   503  00FF8C  42                 	db	66	;'B'
   504  00FF8D  2C                 	db	44
   505  00FF8E  25                 	db	37
   506  00FF8F  64                 	db	100	;'d'
   507  00FF90  4E                 	db	78	;'N'
   508  00FF91  2C                 	db	44
   509  00FF92  00                 	db	0
   510  00FF93                     STR_5:
   511  00FF93  4E                 	db	78	;'N'
   512  00FF94  55                 	db	85	;'U'
   513  00FF95  4D                 	db	77	;'M'
   514  00FF96  20                 	db	32
   515  00FF97  53                 	db	83	;'S'
   516  00FF98  45                 	db	69	;'E'
   517  00FF99  54                 	db	84	;'T'
   518  00FF9A  53                 	db	83	;'S'
   519  00FF9B  2F                 	db	47
   520  00FF9C  53                 	db	83	;'S'
   521  00FF9D  54                 	db	84	;'T'
   522  00FF9E  45                 	db	69	;'E'
   523  00FF9F  50                 	db	80	;'P'
   524  00FFA0  3F                 	db	63	;'?'
   525  00FFA1  00                 	db	0
   526  00FFA2                     STR_16:
   527  00FFA2  25                 	db	37
   528  00FFA3  64                 	db	100	;'d'
   529  00FFA4  53                 	db	83	;'S'
   530  00FFA5  2C                 	db	44
   531  00FFA6  25                 	db	37
   532  00FFA7  64                 	db	100	;'d'
   533  00FFA8  57                 	db	87	;'W'
   534  00FFA9  2E                 	db	46
   535  00FFAA  20                 	db	32
   536  00FFAB  48                 	db	72	;'H'
   537  00FFAC  49                 	db	73	;'I'
   538  00FFAD  54                 	db	84	;'T'
   539  00FFAE  20                 	db	32
   540  00FFAF  41                 	db	65	;'A'
   541  00FFB0  00                 	db	0
   542  00FFB1                     STR_17:
   543  00FFB1  4C                 	db	76	;'L'
   544  00FFB2  4F                 	db	79	;'O'
   545  00FFB3  47                 	db	71	;'G'
   546  00FFB4  53                 	db	83	;'S'
   547  00FFB5  20                 	db	32
   548  00FFB6  4E                 	db	78	;'N'
   549  00FFB7  45                 	db	69	;'E'
   550  00FFB8  57                 	db	87	;'W'
   551  00FFB9  45                 	db	69	;'E'
   552  00FFBA  53                 	db	83	;'S'
   553  00FFBB  54                 	db	84	;'T'
   554  00FFBC  20                 	db	32
   555  00FFBD  54                 	db	84	;'T'
   556  00FFBE  4F                 	db	79	;'O'
   557  00FFBF  00                 	db	0
   558  00FFC0                     STR_9:
   559  00FFC0  48                 	db	72	;'H'
   560  00FFC1  49                 	db	73	;'I'
   561  00FFC2  54                 	db	84	;'T'
   562  00FFC3  20                 	db	32
   563  00FFC4  41                 	db	65	;'A'
   564  00FFC5  2D                 	db	45
   565  00FFC6  53                 	db	83	;'S'
   566  00FFC7  54                 	db	84	;'T'
   567  00FFC8  41                 	db	65	;'A'
   568  00FFC9  52                 	db	82	;'R'
   569  00FFCA  54                 	db	84	;'T'
   570  00FFCB  2C                 	db	44
   571  00FFCC  00                 	db	0
   572  00FFCD                     STR_11:
   573  00FFCD  4F                 	db	79	;'O'
   574  00FFCE  50                 	db	80	;'P'
   575  00FFCF  45                 	db	69	;'E'
   576  00FFD0  52                 	db	82	;'R'
   577  00FFD1  41                 	db	65	;'A'
   578  00FFD2  54                 	db	84	;'T'
   579  00FFD3  49                 	db	73	;'I'
   580  00FFD4  4E                 	db	78	;'N'
   581  00FFD5  47                 	db	71	;'G'
   582  00FFD6  2E                 	db	46
   583  00FFD7  2E                 	db	46
   584  00FFD8  2E                 	db	46
   585  00FFD9  00                 	db	0
   586  00FFDA                     STR_7:
   587  00FFDA  23                 	db	35
   588  00FFDB  2D                 	db	45
   589  00FFDC  43                 	db	67	;'C'
   590  00FFDD  4F                 	db	79	;'O'
   591  00FFDE  4E                 	db	78	;'N'
   592  00FFDF  46                 	db	70	;'F'
   593  00FFE0  49                 	db	73	;'I'
   594  00FFE1  52                 	db	82	;'R'
   595  00FFE2  4D                 	db	77	;'M'
   596  00FFE3  20                 	db	32
   597  00FFE4  00                 	db	0
   598  00FFE5                     STR_6:
   599  00FFE5  4E                 	db	78	;'N'
   600  00FFE6  55                 	db	85	;'U'
   601  00FFE7  4D                 	db	77	;'M'
   602  00FFE8  20                 	db	32
   603  00FFE9  53                 	db	83	;'S'
   604  00FFEA  54                 	db	84	;'T'
   605  00FFEB  45                 	db	69	;'E'
   606  00FFEC  50                 	db	80	;'P'
   607  00FFED  53                 	db	83	;'S'
   608  00FFEE  3F                 	db	63	;'?'
   609  00FFEF  00                 	db	0
   610  00FFF0                     STR_12:
   611  00FFF0  44                 	db	68	;'D'
   612  00FFF1  4F                 	db	79	;'O'
   613  00FFF2  4E                 	db	78	;'N'
   614  00FFF3  45                 	db	69	;'E'
   615  00FFF4  3A                 	db	58	;':'
   616  00FFF5  25                 	db	37
   617  00FFF6  63                 	db	99	;'c'
   618  00FFF7  5B                 	db	91	;'['
   619  00FFF8  00                 	db	0
   620  00FFF9                     STR_13:
   621  00FFF9  78                 	db	120	;'x'
   622  00FFFA  25                 	db	37
   623  00FFFB  63                 	db	99	;'c'
   624  00FFFC  5D                 	db	93	;']'
   625  00FFFD  00                 	db	0
   626  0000                     
   627                           ; #config settings
   628  00FFFE  00                 	db	0	; dummy byte at the end
   629  0000                     
   630                           	psect	cinit
   631  001390                     __pcinit:
   632                           	opt stack 0
   633  001390                     start_initialization:
   634                           	opt stack 0
   635  001390                     __initialization:
   636                           	opt stack 0
   637                           
   638                           ; Initialize objects allocated to BANK1 (106 bytes)
   639                           ; load TBLPTR registers with __pidataBANK1
   640  001390  0E26               	movlw	low __pidataBANK1
   641  001392  6EF6               	movwf	tblptrl,c
   642  001394  0E13               	movlw	high __pidataBANK1
   643  001396  6EF7               	movwf	tblptrh,c
   644  001398  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   645  00139A  6EF8               	movwf	tblptru,c
   646  00139C  EE01  F000         	lfsr	0,__pdataBANK1
   647  0013A0  EE10 F06A          	lfsr	1,106
   648  0013A4                     copy_data0:
   649  0013A4  0009               	tblrd		*+
   650  0013A6  CFF5 FFEE          	movff	tablat,postinc0
   651  0013AA  50E5               	movf	postdec1,w,c
   652  0013AC  50E1               	movf	fsr1l,w,c
   653  0013AE  E1FA               	bnz	copy_data0
   654                           
   655                           ; Initialize objects allocated to COMRAM (6 bytes)
   656                           ; load TBLPTR registers with __pidataCOMRAM
   657  0013B0  0E8A               	movlw	low __pidataCOMRAM
   658  0013B2  6EF6               	movwf	tblptrl,c
   659  0013B4  0E17               	movlw	high __pidataCOMRAM
   660  0013B6  6EF7               	movwf	tblptrh,c
   661  0013B8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   662  0013BA  6EF8               	movwf	tblptru,c
   663  0013BC  EE00  F065         	lfsr	0,__pdataCOMRAM
   664  0013C0  EE10 F006          	lfsr	1,6
   665  0013C4                     copy_data1:
   666  0013C4  0009               	tblrd		*+
   667  0013C6  CFF5 FFEE          	movff	tablat,postinc0
   668  0013CA  50E5               	movf	postdec1,w,c
   669  0013CC  50E1               	movf	fsr1l,w,c
   670  0013CE  E1FA               	bnz	copy_data1
   671                           
   672                           ; Clear objects allocated to BANK1 (16 bytes)
   673  0013D0  EE01  F097         	lfsr	0,__pbssBANK1
   674  0013D4  0E10               	movlw	16
   675  0013D6                     clear_0:
   676  0013D6  6AEE               	clrf	postinc0,c
   677  0013D8  06E8               	decf	wreg,f,c
   678  0013DA  E1FD               	bnz	clear_0
   679                           
   680                           ; Clear objects allocated to COMRAM (9 bytes)
   681  0013DC  EE00  F05C         	lfsr	0,__pbssCOMRAM
   682  0013E0  0E09               	movlw	9
   683  0013E2                     clear_1:
   684  0013E2  6AEE               	clrf	postinc0,c
   685  0013E4  06E8               	decf	wreg,f,c
   686  0013E6  E1FD               	bnz	clear_1
   687  0013E8                     end_of_initialization:
   688                           	opt stack 0
   689  0013E8                     __end_of__initialization:
   690                           	opt stack 0
   691  0013E8  906B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   692  0013EA  926B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   693  0013EC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   694  0013EE  6EF8               	movwf	tblptru,c
   695  0013F0  0100               	movlb	0
   696  0013F2  EFDB  F007         	goto	_main	;jump to C main() function
   697                           tblptru	equ	0xFF8
   698                           tblptrh	equ	0xFF7
   699                           tblptrl	equ	0xFF6
   700                           tablat	equ	0xFF5
   701                           postinc0	equ	0xFEE
   702                           wreg	equ	0xFE8
   703                           postdec1	equ	0xFE5
   704                           fsr1l	equ	0xFE1
   705                           
   706                           	psect	bssCOMRAM
   707  00005C                     __pbssCOMRAM:
   708                           	opt stack 0
   709  00005C                     checkValid@F3158:
   710                           	opt stack 0
   711  00005C                     	ds	8
   712  000064                     _LCDinterruptState:
   713                           	opt stack 0
   714  000064                     	ds	1
   715                           tblptru	equ	0xFF8
   716                           tblptrh	equ	0xFF7
   717                           tblptrl	equ	0xFF6
   718                           tablat	equ	0xFF5
   719                           postinc0	equ	0xFEE
   720                           wreg	equ	0xFE8
   721                           postdec1	equ	0xFE5
   722                           fsr1l	equ	0xFE1
   723                           
   724                           	psect	dataCOMRAM
   725  000065                     __pdataCOMRAM:
   726                           	opt stack 0
   727  000065                     showLogs@F3187:
   728                           	opt stack 0
   729  000065                     	ds	6
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           
   739                           	psect	bssBANK1
   740  000197                     __pbssBANK1:
   741                           	opt stack 0
   742  000197                     showLogs@F3189:
   743                           	opt stack 0
   744  000197                     	ds	8
   745  00019F                     main@F3122:
   746                           	opt stack 0
   747  00019F                     	ds	8
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           postinc0	equ	0xFEE
   753                           wreg	equ	0xFE8
   754                           postdec1	equ	0xFE5
   755                           fsr1l	equ	0xFE1
   756                           
   757                           	psect	dataBANK1
   758  000100                     __pdataBANK1:
   759                           	opt stack 0
   760  000100                     checkValid@F3153:
   761                           	opt stack 0
   762  000100                     	ds	100
   763  000164                     main@F3120:
   764                           	opt stack 0
   765  000164                     	ds	6
   766                           tblptru	equ	0xFF8
   767                           tblptrh	equ	0xFF7
   768                           tblptrl	equ	0xFF6
   769                           tablat	equ	0xFF5
   770                           postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           postdec1	equ	0xFE5
   773                           fsr1l	equ	0xFE1
   774                           
   775                           	psect	cstackBANK1
   776  00016A                     __pcstackBANK1:
   777                           	opt stack 0
   778  00016A                     ??_getInputs:
   779                           
   780                           ; 1 bytes @ 0x0
   781  00016A                     	ds	4
   782  00016E                     getInputs@userTyping:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x4
   786  00016E                     	ds	1
   787  00016F                     getInputs@keyCount:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x5
   791  00016F                     	ds	2
   792  000171                     getInputs@screenPos:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x7
   796  000171                     	ds	2
   797  000173                     getInputs@keyPressed:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x9
   801  000173                     	ds	1
   802  000174                     initStandby@inputs:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0xA
   806  000174                     	ds	2
   807  000176                     initStandby@keyPressed:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0xC
   811  000176                     	ds	1
   812  000177                     initStandby@onOptionScreen:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0xD
   816  000177                     	ds	1
   817  000178                     initStandby@opNotStarted:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0xE
   821  000178                     	ds	1
   822  000179                     main@numRemaining:
   823                           	opt stack 0
   824                           
   825                           ; 8 bytes @ 0xF
   826  000179                     	ds	8
   827  000181                     main@timeStart:
   828                           	opt stack 0
   829                           
   830                           ; 7 bytes @ 0x17
   831  000181                     	ds	7
   832  000188                     main@timeEnd:
   833                           	opt stack 0
   834                           
   835                           ; 7 bytes @ 0x1E
   836  000188                     	ds	7
   837  00018F                     main@operationTime:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x25
   841  00018F                     	ds	2
   842  000191                     main@inputs:
   843                           	opt stack 0
   844                           
   845                           ; 6 bytes @ 0x27
   846  000191                     	ds	6
   847                           tblptru	equ	0xFF8
   848                           tblptrh	equ	0xFF7
   849                           tblptrl	equ	0xFF6
   850                           tablat	equ	0xFF5
   851                           postinc0	equ	0xFEE
   852                           wreg	equ	0xFE8
   853                           postdec1	equ	0xFE5
   854                           fsr1l	equ	0xFE1
   855                           
   856                           	psect	cstackBANK0
   857  000080                     __pcstackBANK0:
   858                           	opt stack 0
   859  000080                     showResults@inputs:
   860                           	opt stack 0
   861  000080                     checkValid@validFastenerSets:
   862                           	opt stack 0
   863                           
   864                           ; 100 bytes @ 0x0
   865  000080                     	ds	2
   866  000082                     showResults@numRemaining:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x2
   870  000082                     	ds	2
   871  000084                     showResults@operationTime:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x4
   875  000084                     	ds	2
   876  000086                     showResults@i:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x6
   880  000086                     	ds	2
   881  000088                     showLogs@timeEnd:
   882                           	opt stack 0
   883                           
   884                           ; 7 bytes @ 0x8
   885  000088                     	ds	7
   886  00008F                     showLogs@inputs:
   887                           	opt stack 0
   888                           
   889                           ; 6 bytes @ 0xF
   890  00008F                     	ds	6
   891  000095                     showLogs@numRemaining:
   892                           	opt stack 0
   893                           
   894                           ; 8 bytes @ 0x15
   895  000095                     	ds	8
   896  00009D                     showLogs@onOptionScreen:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x1D
   900  00009D                     	ds	1
   901  00009E                     showLogs@operationTime:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x1E
   905  00009E                     	ds	2
   906  0000A0                     showLogs@keyPressed:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x20
   910  0000A0                     	ds	68
   911  0000E4                     checkValid@fastenerSet:
   912                           	opt stack 0
   913                           
   914                           ; 5 bytes @ 0x64
   915  0000E4                     	ds	5
   916  0000E9                     checkValid@MAX_FASTENERS:
   917                           	opt stack 0
   918                           
   919                           ; 8 bytes @ 0x69
   920  0000E9                     	ds	8
   921  0000F1                     checkValid@numFasteners:
   922                           	opt stack 0
   923                           
   924                           ; 8 bytes @ 0x71
   925  0000F1                     	ds	8
   926  0000F9                     checkValid@numSetsPerStep:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x79
   930  0000F9                     	ds	2
   931  0000FB                     checkValid@i:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x7B
   935  0000FB                     	ds	2
   936  0000FD                     getInputs@inputs:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x7D
   940  0000FD                     	ds	2
   941  0000FF                     ??_initStandby:
   942                           
   943                           ; 1 bytes @ 0x7F
   944  0000FF                     	ds	1
   945                           tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           postinc0	equ	0xFEE
   950                           wreg	equ	0xFE8
   951                           postdec1	equ	0xFE5
   952                           fsr1l	equ	0xFE1
   953                           
   954                           	psect	cstackCOMRAM
   955  000001                     __pcstackCOMRAM:
   956                           	opt stack 0
   957  000001                     ??_interruptHandler:
   958  000001                     
   959                           ; 1 bytes @ 0x0
   960  000001                     	ds	20
   961  000015                     ??_isdigit:
   962  000015                     ??_I2C_Master_Wait:
   963  000015                     ?___wmul:
   964                           	opt stack 0
   965  000015                     ?___lwdiv:
   966                           	opt stack 0
   967  000015                     ?___ftpack:
   968                           	opt stack 0
   969  000015                     ?___lldiv:
   970                           	opt stack 0
   971  000015                     lcdNibble@temp:
   972                           	opt stack 0
   973  000015                     initOperation@inputs:
   974                           	opt stack 0
   975  000015                     retrieveResults@inputs:
   976                           	opt stack 0
   977  000015                     ___wmul@multiplier:
   978                           	opt stack 0
   979  000015                     ___lwdiv@dividend:
   980                           	opt stack 0
   981  000015                     ___ftpack@arg:
   982                           	opt stack 0
   983  000015                     ___lldiv@dividend:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x14
   987  000015                     	ds	1
   988  000016                     lcdNibble@data:
   989                           	opt stack 0
   990  000016                     I2C_Master_Read@ackBit:
   991                           	opt stack 0
   992  000016                     _isdigit$898:
   993                           	opt stack 0
   994  000016                     I2C_Master_Write@byteToWrite:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x15
   998  000016                     	ds	1
   999  000017                     ??_initOperation:
  1000  000017                     lcdInst@data:
  1001                           	opt stack 0
  1002  000017                     putch@data:
  1003                           	opt stack 0
  1004  000017                     I2C_Master_Read@receivedByte:
  1005                           	opt stack 0
  1006  000017                     isdigit@c:
  1007                           	opt stack 0
  1008  000017                     retrieveResults@numRemaining:
  1009                           	opt stack 0
  1010  000017                     ___wmul@multiplicand:
  1011                           	opt stack 0
  1012  000017                     ___lwdiv@divisor:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x16
  1016  000017                     	ds	1
  1017  000018                     ??_initLCD:
  1018  000018                     lcd_shift_cursor@direction:
  1019                           	opt stack 0
  1020  000018                     ___ftpack@exp:
  1021                           	opt stack 0
  1022  000018                     getDateTime@time:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x17
  1026  000018                     	ds	1
  1027  000019                     lcd_shift_cursor@numChars:
  1028                           	opt stack 0
  1029  000019                     ___ftpack@sign:
  1030                           	opt stack 0
  1031  000019                     ___lwdiv@counter:
  1032                           	opt stack 0
  1033  000019                     retrieveResults@operationTime:
  1034                           	opt stack 0
  1035  000019                     ___wmul@product:
  1036                           	opt stack 0
  1037  000019                     ___lldiv@divisor:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x18
  1041  000019                     	ds	1
  1042  00001A                     ??___ftpack:
  1043  00001A                     lcd_shift_cursor@n:
  1044                           	opt stack 0
  1045  00001A                     getDateTime@i:
  1046                           	opt stack 0
  1047  00001A                     ___lwdiv@quotient:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x19
  1051  00001A                     	ds	1
  1052  00001B                     ?_calcOperationTime:
  1053                           	opt stack 0
  1054  00001B                     ?_strcmp:
  1055                           	opt stack 0
  1056  00001B                     lcd_set_cursor@y:
  1057                           	opt stack 0
  1058  00001B                     calcOperationTime@timeStart:
  1059                           	opt stack 0
  1060  00001B                     retrieveResults@timeEnd:
  1061                           	opt stack 0
  1062  00001B                     strcmp@s1:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x1A
  1066  00001B                     	ds	1
  1067  00001C                     ??_lcd_set_cursor:
  1068  00001C                     ?___lwmod:
  1069                           	opt stack 0
  1070  00001C                     ___lwmod@dividend:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x1B
  1074  00001C                     	ds	1
  1075  00001D                     lcd_set_cursor@i:
  1076                           	opt stack 0
  1077  00001D                     retrieveResults@logOption:
  1078                           	opt stack 0
  1079  00001D                     calcOperationTime@timeEnd:
  1080                           	opt stack 0
  1081  00001D                     strcmp@s2:
  1082                           	opt stack 0
  1083  00001D                     ___lldiv@quotient:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x1C
  1087  00001D                     	ds	1
  1088  00001E                     lcd_set_cursor@x:
  1089                           	opt stack 0
  1090  00001E                     ___lwmod@divisor:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x1D
  1094  00001E                     	ds	1
  1095  00001F                     ??_calcOperationTime:
  1096  00001F                     ??_strcmp:
  1097                           
  1098                           ; 1 bytes @ 0x1E
  1099  00001F                     	ds	1
  1100  000020                     ___lwmod@counter:
  1101                           	opt stack 0
  1102  000020                     strcmp@r:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x1F
  1106  000020                     	ds	1
  1107  000021                     ?_printf:
  1108                           	opt stack 0
  1109  000021                     ___lldiv@counter:
  1110                           	opt stack 0
  1111  000021                     checkValid@inputScreenPos:
  1112                           	opt stack 0
  1113  000021                     printf@f:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x20
  1117  000021                     	ds	1
  1118  000022                     I2C_Master_Init@clockFreq:
  1119                           	opt stack 0
  1120                           
  1121                           ; 4 bytes @ 0x21
  1122  000022                     	ds	1
  1123  000023                     calcOperationTime@hourStart:
  1124                           	opt stack 0
  1125  000023                     checkValid@inputs:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x22
  1129  000023                     	ds	2
  1130  000025                     ??_checkValid:
  1131  000025                     calcOperationTime@minStart:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x24
  1135  000025                     	ds	1
  1136  000026                     ??_I2C_Master_Init:
  1137                           
  1138                           ; 1 bytes @ 0x25
  1139  000026                     	ds	1
  1140  000027                     calcOperationTime@secStart:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x26
  1144  000027                     	ds	2
  1145  000029                     calcOperationTime@hourEnd:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x28
  1149  000029                     	ds	1
  1150  00002A                     
  1151                           ; 1 bytes @ 0x29
  1152  00002A                     	ds	1
  1153  00002B                     calcOperationTime@minEnd:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x2A
  1157  00002B                     	ds	2
  1158  00002D                     ??_printf:
  1159  00002D                     calcOperationTime@secEnd:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x2C
  1163  00002D                     	ds	2
  1164  00002F                     ?___lwtoft:
  1165                           	opt stack 0
  1166  00002F                     ___lwtoft@c:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x2E
  1170  00002F                     	ds	2
  1171  000031                     printf@idx:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0x30
  1175  000031                     	ds	1
  1176  000032                     printf@cp:
  1177                           	opt stack 0
  1178  000032                     ___ftge@ff1:
  1179                           	opt stack 0
  1180                           
  1181                           ; 3 bytes @ 0x31
  1182  000032                     	ds	2
  1183  000034                     printf@len:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x33
  1187  000034                     	ds	1
  1188  000035                     ___ftge@ff2:
  1189                           	opt stack 0
  1190                           
  1191                           ; 3 bytes @ 0x34
  1192  000035                     	ds	1
  1193  000036                     printf@prec:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x35
  1197  000036                     	ds	1
  1198  000037                     printf@ap:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x36
  1202  000037                     	ds	1
  1203  000038                     ??___ftge:
  1204                           
  1205                           ; 1 bytes @ 0x37
  1206  000038                     	ds	1
  1207  000039                     printf@val:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x38
  1211  000039                     	ds	2
  1212  00003B                     printf@flag:
  1213                           	opt stack 0
  1214                           
  1215                           ; 1 bytes @ 0x3A
  1216  00003B                     	ds	1
  1217  00003C                     printf@width:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x3B
  1221  00003C                     	ds	2
  1222  00003E                     printf@c:
  1223                           	opt stack 0
  1224                           
  1225                           ; 1 bytes @ 0x3D
  1226  00003E                     	ds	1
  1227  00003F                     ??_dispRealTime:
  1228                           
  1229                           ; 1 bytes @ 0x3E
  1230  00003F                     	ds	2
  1231  000041                     dispRealTime@time:
  1232                           	opt stack 0
  1233                           
  1234                           ; 7 bytes @ 0x40
  1235  000041                     	ds	7
  1236  000048                     getKeyPressed@lastTimeRefresh:
  1237                           	opt stack 0
  1238                           
  1239                           ; 7 bytes @ 0x47
  1240  000048                     	ds	7
  1241  00004F                     getKeyPressed@currTimeTemp:
  1242                           	opt stack 0
  1243                           
  1244                           ; 7 bytes @ 0x4E
  1245  00004F                     	ds	7
  1246  000056                     getKeyPressed@keypress:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x55
  1250  000056                     	ds	1
  1251  000057                     getKeyPressed@shouldDispTime:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x56
  1255  000057                     	ds	1
  1256  000058                     getKeyPressed@i:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x57
  1260  000058                     	ds	2
  1261  00005A                     ??_showResults:
  1262  00005A                     ??_errScreen:
  1263                           
  1264                           ; 1 bytes @ 0x59
  1265  00005A                     	ds	1
  1266  00005B                     ??_showLogs:
  1267                           
  1268                           ; 1 bytes @ 0x5A
  1269  00005B                     	ds	1
  1270  00005C                     tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           postinc0	equ	0xFEE
  1275                           wreg	equ	0xFE8
  1276                           postdec1	equ	0xFE5
  1277                           fsr1l	equ	0xFE1
  1278                           
  1279                           ; 1 bytes @ 0x5B
  1280 ;;
  1281 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1282 ;;
  1283 ;; *************** function _main *****************
  1284 ;; Defined at:
  1285 ;;		line 27 in file "main.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;  numRemaining    8   15[BANK1 ] unsigned short [4]
  1290 ;;  timeEnd         7   30[BANK1 ] unsigned char [7]
  1291 ;;  timeStart       7   23[BANK1 ] unsigned char [7]
  1292 ;;  inputs          6   39[BANK1 ] unsigned char [6]
  1293 ;;  operationTim    2   37[BANK1 ] unsigned short 
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1306 ;;      Totals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1307 ;;Total ram usage:       30 bytes
  1308 ;; Hardware stack levels required when called:    9
  1309 ;; This function calls:
  1310 ;;		_calcOperationTime
  1311 ;;		_getDateTime
  1312 ;;		_initOperation
  1313 ;;		_initStandby
  1314 ;;		_showResults
  1315 ;; This function is called by:
  1316 ;;		Startup code after reset
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           	psect	text0
  1321  000FB6                     __ptext0:
  1322                           	opt stack 0
  1323  000FB6                     _main:
  1324                           	opt stack 22
  1325                           
  1326                           ;main.c: 28: unsigned char timeStart [7], timeEnd [7];
  1327                           ;main.c: 29: unsigned char inputs [6] = {'0','0','0','0','0','0'};
  1328                           
  1329                           ;incstack = 0
  1330  000FB6  EE21  F064         	lfsr	2,main@F3120
  1331  000FBA  EE11  F091         	lfsr	1,main@inputs
  1332  000FBE  0E05               	movlw	5
  1333  000FC0                     u3591:
  1334  000FC0  CFDB FFE3          	movff	plusw2,plusw1
  1335  000FC4  06E8               	decf	wreg,f,c
  1336  000FC6  E2FC               	bc	u3591
  1337                           
  1338                           ;main.c: 30: unsigned short int numRemaining [4] = {0,0,0,0};
  1339  000FC8  EE21  F09F         	lfsr	2,main@F3122
  1340  000FCC  EE11  F079         	lfsr	1,main@numRemaining
  1341  000FD0  0E07               	movlw	7
  1342  000FD2                     u3601:
  1343  000FD2  CFDB FFE3          	movff	plusw2,plusw1
  1344  000FD6  06E8               	decf	wreg,f,c
  1345  000FD8  E2FC               	bc	u3601
  1346                           
  1347                           ;main.c: 31: unsigned short int operationTime;
  1348                           ;main.c: 36: LATA = 0x00;
  1349  000FDA  0E00               	movlw	0
  1350  000FDC  6E89               	movwf	3977,c	;volatile
  1351                           
  1352                           ;main.c: 37: LATB = 0x00;
  1353  000FDE  0E00               	movlw	0
  1354  000FE0  6E8A               	movwf	3978,c	;volatile
  1355                           
  1356                           ;main.c: 38: LATC = 0x00;
  1357  000FE2  0E00               	movlw	0
  1358  000FE4  6E8B               	movwf	3979,c	;volatile
  1359                           
  1360                           ;main.c: 39: LATD = 0x00;
  1361  000FE6  0E00               	movlw	0
  1362  000FE8  6E8C               	movwf	3980,c	;volatile
  1363                           
  1364                           ;main.c: 40: LATE = 0x00;
  1365  000FEA  0E00               	movlw	0
  1366  000FEC  6E8D               	movwf	3981,c	;volatile
  1367                           
  1368                           ;main.c: 44: TRISA = 0x00;
  1369  000FEE  0E00               	movlw	0
  1370  000FF0  6E92               	movwf	3986,c	;volatile
  1371                           
  1372                           ;main.c: 45: TRISB = 0xFF;
  1373  000FF2  6893               	setf	3987,c	;volatile
  1374                           
  1375                           ;main.c: 46: TRISC = 0xE0;
  1376  000FF4  0EE0               	movlw	224
  1377  000FF6  6E94               	movwf	3988,c	;volatile
  1378                           
  1379                           ;main.c: 47: TRISD = 0x00;
  1380  000FF8  0E00               	movlw	0
  1381  000FFA  6E95               	movwf	3989,c	;volatile
  1382                           
  1383                           ;main.c: 48: TRISE = 0x00;
  1384  000FFC  0E00               	movlw	0
  1385  000FFE  6E96               	movwf	3990,c	;volatile
  1386                           
  1387                           ;main.c: 51: ADCON0 = 0x00;
  1388  001000  0E00               	movlw	0
  1389  001002  6EC2               	movwf	4034,c	;volatile
  1390                           
  1391                           ;main.c: 52: ADCON1 = 0b00001111;
  1392  001004  0E0F               	movlw	15
  1393  001006  6EC1               	movwf	4033,c	;volatile
  1394  001008                     
  1395                           ;main.c: 57: initStandby(inputs);
  1396  001008  0E91               	movlw	low main@inputs
  1397  00100A  0101               	movlb	1	; () banked
  1398  00100C  6F74               	movwf	initStandby@inputs& (0+255),b
  1399  00100E  0E01               	movlw	high main@inputs
  1400  001010  6F75               	movwf	(initStandby@inputs+1)& (0+255),b
  1401  001012  EC76  F006         	call	_initStandby	;wreg free
  1402                           
  1403                           ;main.c: 58: getDateTime(timeStart);
  1404  001016  0E81               	movlw	low main@timeStart
  1405  001018  6E18               	movwf	getDateTime@time,c
  1406  00101A  0E01               	movlw	high main@timeStart
  1407  00101C  6E19               	movwf	getDateTime@time+1,c
  1408  00101E  EC5A  F009         	call	_getDateTime	;wreg free
  1409                           
  1410                           ;main.c: 59: initOperation(inputs);
  1411  001022  0E91               	movlw	low main@inputs
  1412  001024  6E15               	movwf	initOperation@inputs,c
  1413  001026  0E01               	movlw	high main@inputs
  1414  001028  6E16               	movwf	initOperation@inputs+1,c
  1415  00102A  EC83  F00B         	call	_initOperation	;wreg free
  1416                           
  1417                           ;main.c: 60: getDateTime(timeEnd);
  1418  00102E  0E88               	movlw	low main@timeEnd
  1419  001030  6E18               	movwf	getDateTime@time,c
  1420  001032  0E01               	movlw	high main@timeEnd
  1421  001034  6E19               	movwf	getDateTime@time+1,c
  1422  001036  EC5A  F009         	call	_getDateTime	;wreg free
  1423                           
  1424                           ;main.c: 61: operationTime = calcOperationTime (timeStart, timeEnd);
  1425  00103A  0E81               	movlw	low main@timeStart
  1426  00103C  6E1B               	movwf	calcOperationTime@timeStart,c
  1427  00103E  0E01               	movlw	high main@timeStart
  1428  001040  6E1C               	movwf	calcOperationTime@timeStart+1,c
  1429  001042  0E88               	movlw	low main@timeEnd
  1430  001044  6E1D               	movwf	calcOperationTime@timeEnd,c
  1431  001046  0E01               	movlw	high main@timeEnd
  1432  001048  6E1E               	movwf	calcOperationTime@timeEnd+1,c
  1433  00104A  EC0F  F004         	call	_calcOperationTime	;wreg free
  1434  00104E  C01B  F18F         	movff	?_calcOperationTime,main@operationTime
  1435  001052  C01C  F190         	movff	?_calcOperationTime+1,main@operationTime+1
  1436                           
  1437                           ;main.c: 62: showResults(inputs, numRemaining, operationTime);
  1438  001056  0E91               	movlw	low main@inputs
  1439  001058  0100               	movlb	0	; () banked
  1440  00105A  6F80               	movwf	showResults@inputs& (0+255),b
  1441  00105C  0E01               	movlw	high main@inputs
  1442  00105E  6F81               	movwf	(showResults@inputs+1)& (0+255),b
  1443  001060  0E79               	movlw	low main@numRemaining
  1444  001062  6F82               	movwf	showResults@numRemaining& (0+255),b
  1445  001064  0E01               	movlw	high main@numRemaining
  1446  001066  6F83               	movwf	(showResults@numRemaining+1)& (0+255),b
  1447  001068  C18F  F084         	movff	main@operationTime,showResults@operationTime
  1448  00106C  C190  F085         	movff	main@operationTime+1,showResults@operationTime+1
  1449  001070  ECC8  F005         	call	_showResults	;wreg free
  1450  001074  D7C9               	goto	l64
  1451  001076                     __end_of_main:
  1452                           	opt stack 0
  1453                           tblptru	equ	0xFF8
  1454                           tblptrh	equ	0xFF7
  1455                           tblptrl	equ	0xFF6
  1456                           tablat	equ	0xFF5
  1457                           postinc0	equ	0xFEE
  1458                           wreg	equ	0xFE8
  1459                           postdec1	equ	0xFE5
  1460                           plusw1	equ	0xFE3
  1461                           fsr1l	equ	0xFE1
  1462                           plusw2	equ	0xFDB
  1463                           
  1464 ;; *************** function _initStandby *****************
  1465 ;; Defined at:
  1466 ;;		line 244 in file "standbyInterface.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  inputs          2   10[BANK1 ] PTR unsigned char 
  1469 ;;		 -> main@inputs(6), 
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  opNotStarted    1   14[BANK1 ] enum E3086
  1472 ;;  onOptionScre    1   13[BANK1 ] enum E3086
  1473 ;;  keyPressed      1   12[BANK1 ] unsigned char 
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1483 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;Total ram usage:        6 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    8
  1490 ;; This function calls:
  1491 ;;		_getInputs
  1492 ;;		_getKeyPressed
  1493 ;;		_initLCD
  1494 ;;		_initRTC
  1495 ;;		_lcdInst
  1496 ;;		_printf
  1497 ;;		_showLogs
  1498 ;; This function is called by:
  1499 ;;		_main
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text1
  1504  000CEC                     __ptext1:
  1505                           	opt stack 0
  1506  000CEC                     _initStandby:
  1507                           	opt stack 22
  1508                           
  1509                           ;standbyInterface.c: 245: unsigned char keyPressed;
  1510                           ;standbyInterface.c: 246: boolean opNotStarted = true, onOptionScreen;
  1511                           
  1512                           ;incstack = 0
  1513  000CEC  0E01               	movlw	1
  1514  000CEE  0101               	movlb	1	; () banked
  1515  000CF0  6F78               	movwf	initStandby@opNotStarted& (0+255),b
  1516                           
  1517                           ; BSR set to: 1
  1518                           ;standbyInterface.c: 249: initLCD();
  1519  000CF2  EC84  F00A         	call	_initLCD	;wreg free
  1520                           
  1521                           ;standbyInterface.c: 252: initRTC();
  1522  000CF6  EC90  F00B         	call	_initRTC	;wreg free
  1523                           
  1524                           ;standbyInterface.c: 254: while(opNotStarted){
  1525  000CFA  D05A               	goto	u3570
  1526  000CFC                     
  1527                           ;standbyInterface.c: 256: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));
      +                          ;
  1528  000CFC  0E01               	movlw	1
  1529  000CFE  ECA5  F00B         	call	_lcdInst
  1530  000D02  0EC3               	movlw	195
  1531  000D04  0100               	movlb	0	; () banked
  1532  000D06  6FFF               	movwf	??_initStandby& (0+255),b
  1533  000D08  0ECD               	movlw	205
  1534  000D0A                     u3657:
  1535  000D0A  2EE8               	decfsz	wreg,f,c
  1536  000D0C  D7FE               	bra	u3657
  1537  000D0E  2FFF               	decfsz	??_initStandby& (0+255),f,b
  1538  000D10  D7FC               	bra	u3657
  1539                           
  1540                           ;standbyInterface.c: 257: lcdInst(0xC0);;
  1541  000D12  0EC0               	movlw	192
  1542  000D14  ECA5  F00B         	call	_lcdInst
  1543                           
  1544                           ;standbyInterface.c: 258: printf ("CONTINUE? HIT A");
  1545  000D18  0E45               	movlw	low STR_8
  1546  000D1A  6E21               	movwf	printf@f,c
  1547  000D1C  0EFF               	movlw	high STR_8
  1548  000D1E  6E22               	movwf	printf@f+1,c
  1549  000D20  EC09  F000         	call	_printf	;wreg free
  1550  000D24                     
  1551                           ;standbyInterface.c: 260: if (getKeyPressed(true) == 'A')
  1552  000D24  0E01               	movlw	1
  1553  000D26  EC0C  F005         	call	_getKeyPressed
  1554  000D2A  0A41               	xorlw	65
  1555  000D2C  A4D8               	btfss	status,2,c
  1556  000D2E  D7FA               	goto	l292
  1557                           
  1558                           ;standbyInterface.c: 262: }
  1559                           ;standbyInterface.c: 265: onOptionScreen = true;
  1560                           
  1561                           ;standbyInterface.c: 261: break;
  1562  000D30  0E01               	movlw	1
  1563  000D32  0101               	movlb	1	; () banked
  1564  000D34  6F77               	movwf	initStandby@onOptionScreen& (0+255),b
  1565                           
  1566                           ; BSR set to: 1
  1567                           ;standbyInterface.c: 266: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));
      +                          ;
  1568  000D36  0E01               	movlw	1
  1569  000D38  ECA5  F00B         	call	_lcdInst
  1570  000D3C  0EC3               	movlw	195
  1571  000D3E  0100               	movlb	0	; () banked
  1572  000D40  6FFF               	movwf	??_initStandby& (0+255),b
  1573  000D42  0ECD               	movlw	205
  1574  000D44                     u3667:
  1575  000D44  2EE8               	decfsz	wreg,f,c
  1576  000D46  D7FE               	bra	u3667
  1577  000D48  2FFF               	decfsz	??_initStandby& (0+255),f,b
  1578  000D4A  D7FC               	bra	u3667
  1579                           
  1580                           ;standbyInterface.c: 267: printf ("HIT A-START,");
  1581  000D4C  0EC0               	movlw	low STR_9
  1582  000D4E  6E21               	movwf	printf@f,c
  1583  000D50  0EFF               	movlw	high STR_9
  1584  000D52  6E22               	movwf	printf@f+1,c
  1585  000D54  EC09  F000         	call	_printf	;wreg free
  1586                           
  1587                           ;standbyInterface.c: 268: lcdInst(0xC0);;
  1588  000D58  0EC0               	movlw	192
  1589  000D5A  ECA5  F00B         	call	_lcdInst
  1590                           
  1591                           ;standbyInterface.c: 269: printf ("B-LOG,OR C-BACK");
  1592  000D5E  0E65               	movlw	low STR_10
  1593  000D60  6E21               	movwf	printf@f,c
  1594  000D62  0EFF               	movlw	high STR_10
  1595  000D64  6E22               	movwf	printf@f+1,c
  1596  000D66  EC09  F000         	call	_printf	;wreg free
  1597                           
  1598                           ;standbyInterface.c: 270: while(opNotStarted && onOptionScreen){
  1599  000D6A  D01B               	goto	l300
  1600  000D6C                     
  1601                           ;standbyInterface.c: 271: keyPressed = getKeyPressed(false);
  1602  000D6C  0E00               	movlw	0
  1603  000D6E  EC0C  F005         	call	_getKeyPressed
  1604  000D72  0101               	movlb	1	; () banked
  1605  000D74  6F76               	movwf	initStandby@keyPressed& (0+255),b
  1606                           
  1607                           ;standbyInterface.c: 272: switch(keyPressed){
  1608  000D76  D00B               	goto	l298
  1609  000D78                     
  1610                           ; BSR set to: 1
  1611                           ;standbyInterface.c: 274: opNotStarted = false;
  1612                           
  1613                           ; BSR set to: 1
  1614  000D78  0E00               	movlw	0
  1615  000D7A  6F78               	movwf	initStandby@opNotStarted& (0+255),b
  1616  000D7C  D005               	goto	l302
  1617  000D7E                     
  1618                           ; BSR set to: 1
  1619                           ;standbyInterface.c: 278: showLogs();
  1620                           
  1621                           ; BSR set to: 1
  1622  000D7E  ECF7  F006         	call	_showLogs	;wreg free
  1623                           
  1624                           ;standbyInterface.c: 279: onOptionScreen = false;
  1625  000D82  0E00               	movlw	0
  1626  000D84  0101               	movlb	1	; () banked
  1627  000D86  D001               	goto	L2
  1628  000D88                     l302:
  1629                           
  1630                           ; BSR set to: 1
  1631                           ;standbyInterface.c: 282: onOptionScreen = false;
  1632                           
  1633                           ; BSR set to: 1
  1634  000D88  0E00               	movlw	0
  1635  000D8A                     L2:
  1636  000D8A  6F77               	movwf	initStandby@onOptionScreen& (0+255),b
  1637                           
  1638                           ; BSR set to: 1
  1639                           ;standbyInterface.c: 286: }
  1640                           
  1641                           ; BSR set to: 1
  1642                           ;standbyInterface.c: 285: continue;
  1643                           
  1644                           ;standbyInterface.c: 284: default:
  1645                           
  1646                           ;standbyInterface.c: 283: continue;
  1647  000D8C  D00A               	goto	l300
  1648  000D8E                     l298:
  1649                           
  1650                           ; BSR set to: 1
  1651                           
  1652                           ; BSR set to: 1
  1653  000D8E  5176               	movf	initStandby@keyPressed& (0+255),w,b
  1654                           
  1655                           ; Switch size 1, requested type "space"
  1656                           ; Number of cases is 3, Range of values is 65 to 67
  1657                           ; switch strategies available:
  1658                           ; Name         Instructions Cycles
  1659                           ; simple_byte           10     6 (average)
  1660                           ;	Chosen strategy is simple_byte
  1661  000D90  0A41               	xorlw	65	; case 65
  1662  000D92  B4D8               	btfsc	status,2,c
  1663  000D94  D7F1               	goto	l299
  1664  000D96  0A03               	xorlw	3	; case 66
  1665  000D98  B4D8               	btfsc	status,2,c
  1666  000D9A  D7F1               	goto	l301
  1667  000D9C  0A01               	xorlw	1	; case 67
  1668  000D9E  B4D8               	btfsc	status,2,c
  1669  000DA0  D7F3               	goto	l302
  1670  000DA2                     l300:
  1671                           
  1672                           ; BSR set to: 1
  1673                           
  1674                           ; BSR set to: 1
  1675  000DA2  0101               	movlb	1	; () banked
  1676  000DA4  5178               	movf	initStandby@opNotStarted& (0+255),w,b
  1677  000DA6  B4D8               	btfsc	status,2,c
  1678  000DA8  D003               	goto	u3570
  1679                           
  1680                           ; BSR set to: 1
  1681  000DAA  5177               	movf	initStandby@onOptionScreen& (0+255),w,b
  1682  000DAC  A4D8               	btfss	status,2,c
  1683  000DAE  D7DE               	goto	l297
  1684  000DB0                     u3570:
  1685                           
  1686                           ; BSR set to: 1
  1687                           
  1688                           ; BSR set to: 1
  1689                           
  1690                           ; BSR set to: 1
  1691  000DB0  0101               	movlb	1	; () banked
  1692  000DB2  5178               	movf	initStandby@opNotStarted& (0+255),w,b
  1693  000DB4  A4D8               	btfss	status,2,c
  1694  000DB6  D7A2               	goto	l291
  1695                           
  1696                           ; BSR set to: 1
  1697                           ;standbyInterface.c: 287: }
  1698                           ;standbyInterface.c: 288: }
  1699                           ;standbyInterface.c: 291: getInputs(inputs);
  1700                           
  1701                           ; BSR set to: 1
  1702  000DB8  C174  F0FD         	movff	initStandby@inputs,getInputs@inputs
  1703  000DBC  C175  F0FE         	movff	initStandby@inputs+1,getInputs@inputs+1
  1704  000DC0  ECD3  F001         	call	_getInputs	;wreg free
  1705                           
  1706                           ;standbyInterface.c: 294: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));
      +                          ;
  1707  000DC4  0E01               	movlw	1
  1708  000DC6  ECA5  F00B         	call	_lcdInst
  1709  000DCA  0EC3               	movlw	195
  1710  000DCC  0100               	movlb	0	; () banked
  1711  000DCE  6FFF               	movwf	??_initStandby& (0+255),b
  1712  000DD0  0ECD               	movlw	205
  1713  000DD2                     u3677:
  1714  000DD2  2EE8               	decfsz	wreg,f,c
  1715  000DD4  D7FE               	bra	u3677
  1716  000DD6  2FFF               	decfsz	??_initStandby& (0+255),f,b
  1717  000DD8  D7FC               	bra	u3677
  1718                           
  1719                           ;standbyInterface.c: 295: printf ("OPERATING...");
  1720  000DDA  0ECD               	movlw	low STR_11
  1721  000DDC  6E21               	movwf	printf@f,c
  1722  000DDE  0EFF               	movlw	high STR_11
  1723  000DE0  6E22               	movwf	printf@f+1,c
  1724  000DE2  EC09  F000         	call	_printf	;wreg free
  1725                           
  1726                           ;standbyInterface.c: 296: lcdInst(0xC0);;
  1727  000DE6  0EC0               	movlw	192
  1728  000DE8  ECA5  F00B         	call	_lcdInst
  1729  000DEC  0012               	return		;funcret
  1730  000DEE                     __end_of_initStandby:
  1731                           	opt stack 0
  1732                           tblptru	equ	0xFF8
  1733                           tblptrh	equ	0xFF7
  1734                           tblptrl	equ	0xFF6
  1735                           tablat	equ	0xFF5
  1736                           postinc0	equ	0xFEE
  1737                           wreg	equ	0xFE8
  1738                           postdec1	equ	0xFE5
  1739                           plusw1	equ	0xFE3
  1740                           fsr1l	equ	0xFE1
  1741                           plusw2	equ	0xFDB
  1742                           status	equ	0xFD8
  1743                           
  1744 ;; *************** function _showLogs *****************
  1745 ;; Defined at:
  1746 ;;		line 339 in file "standbyInterface.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  numRemaining    8   21[BANK0 ] unsigned short [4]
  1751 ;;  timeEnd         7    8[BANK0 ] unsigned char [7]
  1752 ;;  inputs          6   15[BANK0 ] unsigned char [6]
  1753 ;;  operationTim    2   30[BANK0 ] unsigned short 
  1754 ;;  keyPressed      1   32[BANK0 ] unsigned char 
  1755 ;;  onOptionScre    1   29[BANK0 ] enum E3086
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      void 
  1758 ;; Registers used:
  1759 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1766 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1767 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1768 ;;      Totals:         1      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1769 ;;Total ram usage:       26 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    7
  1772 ;; This function calls:
  1773 ;;		_getKeyPressed
  1774 ;;		_lcdInst
  1775 ;;		_printf
  1776 ;;		_retrieveResults
  1777 ;;		_showResults
  1778 ;; This function is called by:
  1779 ;;		_initStandby
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text2
  1784  000DEE                     __ptext2:
  1785                           	opt stack 0
  1786  000DEE                     _showLogs:
  1787                           	opt stack 22
  1788                           
  1789                           ;standbyInterface.c: 340: boolean onOptionScreen;
  1790                           ;standbyInterface.c: 341: unsigned char keyPressed;
  1791                           ;standbyInterface.c: 343: unsigned char timeEnd [7];
  1792                           ;standbyInterface.c: 344: unsigned char inputs [6] = {'0','0','0','0','0','0'};;
  1793                           
  1794                           ;incstack = 0
  1795  000DEE  EE20  F065         	lfsr	2,showLogs@F3187
  1796  000DF2  EE10  F08F         	lfsr	1,showLogs@inputs
  1797  000DF6  0E05               	movlw	5
  1798  000DF8                     u3521:
  1799  000DF8  CFDB FFE3          	movff	plusw2,plusw1
  1800  000DFC  06E8               	decf	wreg,f,c
  1801  000DFE  E2FC               	bc	u3521
  1802                           
  1803                           ;standbyInterface.c: 345: unsigned short int numRemaining [4] = {0,0,0,0};
  1804  000E00  EE21  F097         	lfsr	2,showLogs@F3189
  1805  000E04  EE10  F095         	lfsr	1,showLogs@numRemaining
  1806  000E08  0E07               	movlw	7
  1807  000E0A                     u3531:
  1808  000E0A  CFDB FFE3          	movff	plusw2,plusw1
  1809  000E0E  06E8               	decf	wreg,f,c
  1810  000E10  E2FC               	bc	u3531
  1811                           
  1812                           ;standbyInterface.c: 346: unsigned short int operationTime = 0;
  1813  000E12  0E00               	movlw	0
  1814  000E14  0100               	movlb	0	; () banked
  1815  000E16  6F9F               	movwf	(showLogs@operationTime+1)& (0+255),b
  1816  000E18  0E00               	movlw	0
  1817  000E1A  6F9E               	movwf	showLogs@operationTime& (0+255),b
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;standbyInterface.c: 348: onOptionScreen = true;
  1821  000E1C  0E01               	movlw	1
  1822  000E1E  6F9D               	movwf	showLogs@onOptionScreen& (0+255),b
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;standbyInterface.c: 349: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));
      +                          ;
  1826  000E20  0E01               	movlw	1
  1827  000E22  ECA5  F00B         	call	_lcdInst
  1828  000E26  0EC3               	movlw	195
  1829  000E28  6E5B               	movwf	??_showLogs& (0+255),c
  1830  000E2A  0ECD               	movlw	205
  1831  000E2C                     u3687:
  1832  000E2C  2EE8               	decfsz	wreg,f,c
  1833  000E2E  D7FE               	bra	u3687
  1834  000E30  2E5B               	decfsz	??_showLogs& (0+255),f,c
  1835  000E32  D7FC               	bra	u3687
  1836  000E34  F000               	nop	
  1837                           
  1838                           ;standbyInterface.c: 350: printf ("LOGS NEWEST TO");
  1839  000E36  0EB1               	movlw	low STR_17
  1840  000E38  6E21               	movwf	printf@f,c
  1841  000E3A  0EFF               	movlw	high STR_17
  1842  000E3C  6E22               	movwf	printf@f+1,c
  1843  000E3E  EC09  F000         	call	_printf	;wreg free
  1844                           
  1845                           ;standbyInterface.c: 351: lcdInst(0xC0);;
  1846  000E42  0EC0               	movlw	192
  1847  000E44  ECA5  F00B         	call	_lcdInst
  1848                           
  1849                           ;standbyInterface.c: 352: printf ("OLDEST: A,B,C,D");
  1850  000E48  0E55               	movlw	low STR_18
  1851  000E4A  6E21               	movwf	printf@f,c
  1852  000E4C  0EFF               	movlw	high STR_18
  1853  000E4E  6E22               	movwf	printf@f+1,c
  1854  000E50  EC09  F000         	call	_printf	;wreg free
  1855                           
  1856                           ;standbyInterface.c: 353: while(onOptionScreen){
  1857  000E54  D016               	goto	l337
  1858  000E56                     
  1859                           ;standbyInterface.c: 354: keyPressed = getKeyPressed(false);
  1860  000E56  0E00               	movlw	0
  1861  000E58  EC0C  F005         	call	_getKeyPressed
  1862  000E5C  0100               	movlb	0	; () banked
  1863  000E5E  6FA0               	movwf	showLogs@keyPressed& (0+255),b
  1864                           
  1865                           ;standbyInterface.c: 355: switch (keyPressed){
  1866  000E60  D003               	goto	l331
  1867  000E62                     
  1868                           ; BSR set to: 0
  1869                           ;standbyInterface.c: 357: onOptionScreen = false;
  1870                           
  1871                           ; BSR set to: 0
  1872                           
  1873                           ; BSR set to: 0
  1874                           
  1875                           ; BSR set to: 0
  1876                           
  1877                           ; BSR set to: 0
  1878  000E62  0E00               	movlw	0
  1879  000E64  6F9D               	movwf	showLogs@onOptionScreen& (0+255),b
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;standbyInterface.c: 361: }
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;standbyInterface.c: 360: continue;
  1886                           
  1887                           ;standbyInterface.c: 359: default:
  1888                           
  1889                           ;standbyInterface.c: 358: continue;
  1890  000E66  D00D               	goto	l337
  1891  000E68                     l331:
  1892                           
  1893                           ; BSR set to: 0
  1894                           
  1895                           ; BSR set to: 0
  1896  000E68  51A0               	movf	showLogs@keyPressed& (0+255),w,b
  1897                           
  1898                           ; Switch size 1, requested type "space"
  1899                           ; Number of cases is 4, Range of values is 65 to 68
  1900                           ; switch strategies available:
  1901                           ; Name         Instructions Cycles
  1902                           ; simple_byte           13     7 (average)
  1903                           ;	Chosen strategy is simple_byte
  1904  000E6A  0A41               	xorlw	65	; case 65
  1905  000E6C  B4D8               	btfsc	status,2,c
  1906  000E6E  D7F9               	goto	l332
  1907  000E70  0A03               	xorlw	3	; case 66
  1908  000E72  B4D8               	btfsc	status,2,c
  1909  000E74  D7F6               	goto	l332
  1910  000E76  0A01               	xorlw	1	; case 67
  1911  000E78  B4D8               	btfsc	status,2,c
  1912  000E7A  D7F3               	goto	l332
  1913  000E7C  0A07               	xorlw	7	; case 68
  1914  000E7E  B4D8               	btfsc	status,2,c
  1915  000E80  D7F0               	goto	l332
  1916  000E82                     l337:
  1917                           
  1918                           ; BSR set to: 0
  1919                           
  1920                           ; BSR set to: 0
  1921  000E82  0100               	movlb	0	; () banked
  1922  000E84  519D               	movf	showLogs@onOptionScreen& (0+255),w,b
  1923  000E86  A4D8               	btfss	status,2,c
  1924  000E88  D7E6               	goto	l330
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;standbyInterface.c: 362: }
  1928                           ;standbyInterface.c: 364: retrieveResults (inputs, numRemaining, operationTime, timeEnd,
      +                           keyPressed);
  1929                           
  1930                           ; BSR set to: 0
  1931  000E8A  0E8F               	movlw	low showLogs@inputs
  1932  000E8C  6E15               	movwf	retrieveResults@inputs,c
  1933  000E8E  0E00               	movlw	high showLogs@inputs
  1934  000E90  6E16               	movwf	retrieveResults@inputs+1,c
  1935  000E92  0E95               	movlw	low showLogs@numRemaining
  1936  000E94  6E17               	movwf	retrieveResults@numRemaining,c
  1937  000E96  0E00               	movlw	high showLogs@numRemaining
  1938  000E98  6E18               	movwf	retrieveResults@numRemaining+1,c
  1939  000E9A  C09E  F019         	movff	showLogs@operationTime,retrieveResults@operationTime
  1940  000E9E  C09F  F01A         	movff	showLogs@operationTime+1,retrieveResults@operationTime+1
  1941  000EA2  0E88               	movlw	low showLogs@timeEnd
  1942  000EA4  6E1B               	movwf	retrieveResults@timeEnd,c
  1943  000EA6  0E00               	movlw	high showLogs@timeEnd
  1944  000EA8  6E1C               	movwf	retrieveResults@timeEnd+1,c
  1945  000EAA  C0A0  F01D         	movff	showLogs@keyPressed,retrieveResults@logOption
  1946  000EAE  ECC8  F00B         	call	_retrieveResults	;wreg free
  1947                           
  1948                           ;standbyInterface.c: 365: showResults (inputs, numRemaining, operationTime);
  1949  000EB2  0E8F               	movlw	low showLogs@inputs
  1950  000EB4  0100               	movlb	0	; () banked
  1951  000EB6  6F80               	movwf	showResults@inputs& (0+255),b
  1952  000EB8  0E00               	movlw	high showLogs@inputs
  1953  000EBA  6F81               	movwf	(showResults@inputs+1)& (0+255),b
  1954  000EBC  0E95               	movlw	low showLogs@numRemaining
  1955  000EBE  6F82               	movwf	showResults@numRemaining& (0+255),b
  1956  000EC0  0E00               	movlw	high showLogs@numRemaining
  1957  000EC2  6F83               	movwf	(showResults@numRemaining+1)& (0+255),b
  1958  000EC4  C09E  F084         	movff	showLogs@operationTime,showResults@operationTime
  1959  000EC8  C09F  F085         	movff	showLogs@operationTime+1,showResults@operationTime+1
  1960  000ECC  ECC8  F005         	call	_showResults	;wreg free
  1961  000ED0  0012               	return		;funcret
  1962  000ED2                     __end_of_showLogs:
  1963                           	opt stack 0
  1964                           tblptru	equ	0xFF8
  1965                           tblptrh	equ	0xFF7
  1966                           tblptrl	equ	0xFF6
  1967                           tablat	equ	0xFF5
  1968                           postinc0	equ	0xFEE
  1969                           wreg	equ	0xFE8
  1970                           postdec1	equ	0xFE5
  1971                           plusw1	equ	0xFE3
  1972                           fsr1l	equ	0xFE1
  1973                           plusw2	equ	0xFDB
  1974                           status	equ	0xFD8
  1975                           
  1976 ;; *************** function _showResults *****************
  1977 ;; Defined at:
  1978 ;;		line 309 in file "standbyInterface.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  inputs          2    0[BANK0 ] PTR unsigned char 
  1981 ;;		 -> showLogs@inputs(6), main@inputs(6), 
  1982 ;;  numRemaining    2    2[BANK0 ] PTR unsigned short 
  1983 ;;		 -> showLogs@numRemaining(8), main@numRemaining(8), 
  1984 ;;  operationTim    2    4[BANK0 ] unsigned short 
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;  i               2    6[BANK0 ] int 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      void 
  1989 ;; Registers used:
  1990 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1996 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2000 ;;Total ram usage:        9 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:    6
  2003 ;; This function calls:
  2004 ;;		_getKeyPressed
  2005 ;;		_lcdInst
  2006 ;;		_printf
  2007 ;;		_putch
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;;		_showLogs
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text3
  2015  000B90                     __ptext3:
  2016                           	opt stack 0
  2017  000B90                     _showResults:
  2018                           	opt stack 24
  2019                           
  2020                           ;standbyInterface.c: 310: int i;
  2021                           ;standbyInterface.c: 313: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));
      +                          ;
  2022                           
  2023                           ;incstack = 0
  2024  000B90  0E01               	movlw	1
  2025  000B92  ECA5  F00B         	call	_lcdInst
  2026  000B96  0EC3               	movlw	195
  2027  000B98  6E5A               	movwf	??_showResults& (0+255),c
  2028  000B9A  0ECD               	movlw	205
  2029  000B9C                     u3697:
  2030  000B9C  2EE8               	decfsz	wreg,f,c
  2031  000B9E  D7FE               	bra	u3697
  2032  000BA0  2E5A               	decfsz	??_showResults& (0+255),f,c
  2033  000BA2  D7FC               	bra	u3697
  2034  000BA4  F000               	nop	
  2035                           
  2036                           ;standbyInterface.c: 314: printf ("DONE:%c[", inputs[5]);
  2037  000BA6  0EF0               	movlw	low STR_12
  2038  000BA8  6E21               	movwf	printf@f,c
  2039  000BAA  0EFF               	movlw	high STR_12
  2040  000BAC  6E22               	movwf	printf@f+1,c
  2041  000BAE  0100               	movlb	0	; () banked
  2042  000BB0  EE20 F005          	lfsr	2,5
  2043  000BB4  5180               	movf	showResults@inputs& (0+255),w,b
  2044  000BB6  26D9               	addwf	fsr2l,f,c
  2045  000BB8  5181               	movf	(showResults@inputs+1)& (0+255),w,b
  2046  000BBA  22DA               	addwfc	fsr2h,f,c
  2047  000BBC  50DF               	movf	indf2,w,c
  2048  000BBE  6E5A               	movwf	??_showResults& (0+255),c
  2049  000BC0  505A               	movf	??_showResults,w,c
  2050  000BC2  6E23               	movwf	?_printf+2,c
  2051  000BC4  6A24               	clrf	?_printf+3,c
  2052  000BC6  EC09  F000         	call	_printf	;wreg free
  2053                           
  2054                           ;standbyInterface.c: 315: for (i = 0; i<4; i++){
  2055  000BCA  0E00               	movlw	0
  2056  000BCC  0100               	movlb	0	; () banked
  2057  000BCE  6F87               	movwf	(showResults@i+1)& (0+255),b
  2058  000BD0  0E00               	movlw	0
  2059  000BD2  6F86               	movwf	showResults@i& (0+255),b
  2060  000BD4                     l3648:
  2061                           
  2062                           ; BSR set to: 0
  2063  000BD4  BF87               	btfsc	(showResults@i+1)& (0+255),7,b
  2064  000BD6  D006               	goto	l311
  2065  000BD8  5187               	movf	(showResults@i+1)& (0+255),w,b
  2066  000BDA  E11B               	bnz	l3662
  2067  000BDC  0E04               	movlw	4
  2068  000BDE  5D86               	subwf	showResults@i& (0+255),w,b
  2069  000BE0  B0D8               	btfsc	status,0,c
  2070  000BE2  D017               	goto	u3190
  2071  000BE4                     l311:
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;standbyInterface.c: 316: if (inputs[i] == '0')
  2075                           
  2076                           ; BSR set to: 0
  2077  000BE4  5186               	movf	showResults@i& (0+255),w,b
  2078  000BE6  2580               	addwf	showResults@inputs& (0+255),w,b
  2079  000BE8  6ED9               	movwf	fsr2l,c
  2080  000BEA  5187               	movf	(showResults@i+1)& (0+255),w,b
  2081  000BEC  2181               	addwfc	(showResults@inputs+1)& (0+255),w,b
  2082  000BEE  6EDA               	movwf	fsr2h,c
  2083  000BF0  0E30               	movlw	48
  2084  000BF2  18DE               	xorwf	postinc2,w,c
  2085  000BF4  B4D8               	btfsc	status,2,c
  2086  000BF6  D00D               	goto	u3190
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;standbyInterface.c: 318: putch (inputs[i]);
  2090                           
  2091                           ; BSR set to: 0
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;standbyInterface.c: 317: break;
  2095  000BF8  5186               	movf	showResults@i& (0+255),w,b
  2096  000BFA  2580               	addwf	showResults@inputs& (0+255),w,b
  2097  000BFC  6ED9               	movwf	fsr2l,c
  2098  000BFE  5187               	movf	(showResults@i+1)& (0+255),w,b
  2099  000C00  2181               	addwfc	(showResults@inputs+1)& (0+255),w,b
  2100  000C02  6EDA               	movwf	fsr2h,c
  2101  000C04  50DF               	movf	indf2,w,c
  2102  000C06  EC9B  F00B         	call	_putch
  2103  000C0A  0100               	movlb	0	; () banked
  2104  000C0C  4B86               	infsnz	showResults@i& (0+255),f,b
  2105  000C0E  2B87               	incf	(showResults@i+1)& (0+255),f,b
  2106  000C10  D7E1               	goto	l3648
  2107  000C12                     u3190:
  2108  000C12                     l3662:
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;standbyInterface.c: 319: }
  2112                           ;standbyInterface.c: 320: printf ("x%c]", inputs[4]);
  2113  000C12  0EF9               	movlw	low STR_13
  2114  000C14  6E21               	movwf	printf@f,c
  2115  000C16  0EFF               	movlw	high STR_13
  2116  000C18  6E22               	movwf	printf@f+1,c
  2117  000C1A  EE20 F004          	lfsr	2,4
  2118  000C1E  5180               	movf	showResults@inputs& (0+255),w,b
  2119  000C20  26D9               	addwf	fsr2l,f,c
  2120  000C22  5181               	movf	(showResults@inputs+1)& (0+255),w,b
  2121  000C24  22DA               	addwfc	fsr2h,f,c
  2122  000C26  50DF               	movf	indf2,w,c
  2123  000C28  6E5A               	movwf	??_showResults& (0+255),c
  2124  000C2A  505A               	movf	??_showResults,w,c
  2125  000C2C  6E23               	movwf	?_printf+2,c
  2126  000C2E  6A24               	clrf	?_printf+3,c
  2127  000C30  EC09  F000         	call	_printf	;wreg free
  2128                           
  2129                           ;standbyInterface.c: 321: lcdInst(0xC0);;
  2130  000C34  0EC0               	movlw	192
  2131  000C36  ECA5  F00B         	call	_lcdInst
  2132                           
  2133                           ;standbyInterface.c: 322: printf("TIME:%dS. HIT A", operationTime);
  2134  000C3A  0E35               	movlw	low STR_14
  2135  000C3C  6E21               	movwf	printf@f,c
  2136  000C3E  0EFF               	movlw	high STR_14
  2137  000C40  6E22               	movwf	printf@f+1,c
  2138  000C42  C084  F023         	movff	showResults@operationTime,?_printf+2
  2139  000C46  C085  F024         	movff	showResults@operationTime+1,?_printf+3
  2140  000C4A  EC09  F000         	call	_printf	;wreg free
  2141  000C4E                     
  2142                           ;standbyInterface.c: 324: if (getKeyPressed(false) == 'A')
  2143  000C4E  0E00               	movlw	0
  2144  000C50  EC0C  F005         	call	_getKeyPressed
  2145  000C54  0A41               	xorlw	65
  2146  000C56  A4D8               	btfss	status,2,c
  2147  000C58  D7FA               	goto	l314
  2148                           
  2149                           ;standbyInterface.c: 326: }
  2150                           ;standbyInterface.c: 329: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));
      +                          ;
  2151                           
  2152                           ;standbyInterface.c: 325: break;
  2153  000C5A  0E01               	movlw	1
  2154  000C5C  ECA5  F00B         	call	_lcdInst
  2155  000C60  0EC3               	movlw	195
  2156  000C62  6E5A               	movwf	??_showResults& (0+255),c
  2157  000C64  0ECD               	movlw	205
  2158  000C66                     u3707:
  2159  000C66  2EE8               	decfsz	wreg,f,c
  2160  000C68  D7FE               	bra	u3707
  2161  000C6A  2E5A               	decfsz	??_showResults& (0+255),f,c
  2162  000C6C  D7FC               	bra	u3707
  2163  000C6E  F000               	nop	
  2164                           
  2165                           ;standbyInterface.c: 330: printf ("LEFT: %dB,%dN,", numRemaining[0], numRemaining[1]);
  2166  000C70  0E84               	movlw	low STR_15
  2167  000C72  6E21               	movwf	printf@f,c
  2168  000C74  0EFF               	movlw	high STR_15
  2169  000C76  6E22               	movwf	printf@f+1,c
  2170  000C78  C082  FFD9         	movff	showResults@numRemaining,fsr2l
  2171  000C7C  C083  FFDA         	movff	showResults@numRemaining+1,fsr2h
  2172  000C80  CFDE F023          	movff	postinc2,?_printf+2
  2173  000C84  CFDD F024          	movff	postdec2,?_printf+3
  2174  000C88  0100               	movlb	0	; () banked
  2175  000C8A  EE20 F002          	lfsr	2,2
  2176  000C8E  5182               	movf	showResults@numRemaining& (0+255),w,b
  2177  000C90  26D9               	addwf	fsr2l,f,c
  2178  000C92  5183               	movf	(showResults@numRemaining+1)& (0+255),w,b
  2179  000C94  22DA               	addwfc	fsr2h,f,c
  2180  000C96  CFDE F025          	movff	postinc2,?_printf+4
  2181  000C9A  CFDD F026          	movff	postdec2,?_printf+5
  2182  000C9E  EC09  F000         	call	_printf	;wreg free
  2183                           
  2184                           ;standbyInterface.c: 331: lcdInst(0xC0);;
  2185  000CA2  0EC0               	movlw	192
  2186  000CA4  ECA5  F00B         	call	_lcdInst
  2187                           
  2188                           ;standbyInterface.c: 332: printf ("%dS,%dW. HIT A", numRemaining[2], numRemaining[3]);
  2189  000CA8  0EA2               	movlw	low STR_16
  2190  000CAA  6E21               	movwf	printf@f,c
  2191  000CAC  0EFF               	movlw	high STR_16
  2192  000CAE  6E22               	movwf	printf@f+1,c
  2193  000CB0  0100               	movlb	0	; () banked
  2194  000CB2  EE20 F004          	lfsr	2,4
  2195  000CB6  5182               	movf	showResults@numRemaining& (0+255),w,b
  2196  000CB8  26D9               	addwf	fsr2l,f,c
  2197  000CBA  5183               	movf	(showResults@numRemaining+1)& (0+255),w,b
  2198  000CBC  22DA               	addwfc	fsr2h,f,c
  2199  000CBE  CFDE F023          	movff	postinc2,?_printf+2
  2200  000CC2  CFDD F024          	movff	postdec2,?_printf+3
  2201  000CC6  EE20 F006          	lfsr	2,6
  2202  000CCA  5182               	movf	showResults@numRemaining& (0+255),w,b
  2203  000CCC  26D9               	addwf	fsr2l,f,c
  2204  000CCE  5183               	movf	(showResults@numRemaining+1)& (0+255),w,b
  2205  000CD0  22DA               	addwfc	fsr2h,f,c
  2206  000CD2  CFDE F025          	movff	postinc2,?_printf+4
  2207  000CD6  CFDD F026          	movff	postdec2,?_printf+5
  2208  000CDA  EC09  F000         	call	_printf	;wreg free
  2209  000CDE                     
  2210                           ;standbyInterface.c: 334: if (getKeyPressed(false) == 'A')
  2211  000CDE  0E00               	movlw	0
  2212  000CE0  EC0C  F005         	call	_getKeyPressed
  2213  000CE4  0A41               	xorlw	65
  2214  000CE6  B4D8               	btfsc	status,2,c
  2215  000CE8  0012               	return	
  2216  000CEA  D7F9               	goto	l318
  2217  000CEC                     __end_of_showResults:
  2218                           	opt stack 0
  2219                           tblptru	equ	0xFF8
  2220                           tblptrh	equ	0xFF7
  2221                           tblptrl	equ	0xFF6
  2222                           tablat	equ	0xFF5
  2223                           postinc0	equ	0xFEE
  2224                           wreg	equ	0xFE8
  2225                           postdec1	equ	0xFE5
  2226                           plusw1	equ	0xFE3
  2227                           fsr1l	equ	0xFE1
  2228                           indf2	equ	0xFDF
  2229                           postinc2	equ	0xFDE
  2230                           postdec2	equ	0xFDD
  2231                           plusw2	equ	0xFDB
  2232                           fsr2h	equ	0xFDA
  2233                           fsr2l	equ	0xFD9
  2234                           status	equ	0xFD8
  2235                           
  2236 ;; *************** function _retrieveResults *****************
  2237 ;; Defined at:
  2238 ;;		line 34 in file "logMemory.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;  inputs          2   20[COMRAM] PTR unsigned char 
  2241 ;;		 -> showLogs@inputs(6), 
  2242 ;;  numRemaining    2   22[COMRAM] PTR unsigned short 
  2243 ;;		 -> showLogs@numRemaining(8), 
  2244 ;;  operationTim    2   24[COMRAM] PTR unsigned short 
  2245 ;;		 -> RAM(3967), 
  2246 ;;  timeEnd         2   26[COMRAM] PTR unsigned char 
  2247 ;;		 -> showLogs@timeEnd(7), 
  2248 ;;  logOption       1   28[COMRAM] unsigned char 
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;		None
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      void 
  2253 ;; Registers used:
  2254 ;;		None
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2260 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;Total ram usage:        9 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    1
  2267 ;; This function calls:
  2268 ;;		Nothing
  2269 ;; This function is called by:
  2270 ;;		_showLogs
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           	psect	text4
  2275  001790                     __ptext4:
  2276                           	opt stack 0
  2277  001790                     _retrieveResults:
  2278                           	opt stack 27
  2279                           
  2280                           ;incstack = 0
  2281  001790  0012               	return		;funcret
  2282  001792                     __end_of_retrieveResults:
  2283                           	opt stack 0
  2284                           tblptru	equ	0xFF8
  2285                           tblptrh	equ	0xFF7
  2286                           tblptrl	equ	0xFF6
  2287                           tablat	equ	0xFF5
  2288                           postinc0	equ	0xFEE
  2289                           wreg	equ	0xFE8
  2290                           postdec1	equ	0xFE5
  2291                           plusw1	equ	0xFE3
  2292                           fsr1l	equ	0xFE1
  2293                           indf2	equ	0xFDF
  2294                           postinc2	equ	0xFDE
  2295                           postdec2	equ	0xFDD
  2296                           plusw2	equ	0xFDB
  2297                           fsr2h	equ	0xFDA
  2298                           fsr2l	equ	0xFD9
  2299                           status	equ	0xFD8
  2300                           
  2301 ;; *************** function _initRTC *****************
  2302 ;; Defined at:
  2303 ;;		line 20 in file "RTC.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;		None
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;		None
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      void 
  2310 ;; Registers used:
  2311 ;;		wreg, status,2, status,0, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;Total ram usage:        0 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; Hardware stack levels required when called:    3
  2324 ;; This function calls:
  2325 ;;		_I2C_Master_Init
  2326 ;; This function is called by:
  2327 ;;		_initStandby
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           	psect	text5
  2332  001720                     __ptext5:
  2333                           	opt stack 0
  2334  001720                     _initRTC:
  2335                           	opt stack 26
  2336                           
  2337                           ;RTC.c: 21: I2C_Master_Init(100000);
  2338                           
  2339                           ;incstack = 0
  2340  001720  0EA0               	movlw	160
  2341  001722  6E22               	movwf	I2C_Master_Init@clockFreq,c
  2342  001724  0E86               	movlw	134
  2343  001726  6E23               	movwf	I2C_Master_Init@clockFreq+1,c
  2344  001728  0E01               	movlw	1
  2345  00172A  6E24               	movwf	I2C_Master_Init@clockFreq+2,c
  2346  00172C  0E00               	movlw	0
  2347  00172E  6E25               	movwf	I2C_Master_Init@clockFreq+3,c
  2348  001730  EC2D  F00A         	call	_I2C_Master_Init	;wreg free
  2349  001734  0012               	return		;funcret
  2350  001736                     __end_of_initRTC:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           postinc0	equ	0xFEE
  2357                           wreg	equ	0xFE8
  2358                           postdec1	equ	0xFE5
  2359                           plusw1	equ	0xFE3
  2360                           fsr1l	equ	0xFE1
  2361                           indf2	equ	0xFDF
  2362                           postinc2	equ	0xFDE
  2363                           postdec2	equ	0xFDD
  2364                           plusw2	equ	0xFDB
  2365                           fsr2h	equ	0xFDA
  2366                           fsr2l	equ	0xFD9
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _I2C_Master_Init *****************
  2370 ;; Defined at:
  2371 ;;		line 14 in file "I2C.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  clockFreq       4   33[COMRAM] const unsigned long 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;		None
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      void 
  2378 ;; Registers used:
  2379 ;;		wreg, status,2, status,0, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2385 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;Total ram usage:        8 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    2
  2392 ;; This function calls:
  2393 ;;		___lldiv
  2394 ;; This function is called by:
  2395 ;;		_initRTC
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text6
  2400  00145A                     __ptext6:
  2401                           	opt stack 0
  2402  00145A                     _I2C_Master_Init:
  2403                           	opt stack 26
  2404                           
  2405                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  2406                           
  2407                           ;incstack = 0
  2408  00145A  9AC6               	bcf	4038,5,c	;volatile
  2409                           
  2410                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  2411  00145C  8694               	bsf	3988,3,c	;volatile
  2412                           
  2413                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  2414  00145E  8894               	bsf	3988,4,c	;volatile
  2415                           
  2416                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  2417  001460  0E80               	movlw	128
  2418  001462  6EC7               	movwf	4039,c	;volatile
  2419                           
  2420                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  2421  001464  0E28               	movlw	40
  2422  001466  6EC6               	movwf	4038,c	;volatile
  2423                           
  2424                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  2425  001468  0E00               	movlw	0
  2426  00146A  6EC5               	movwf	4037,c	;volatile
  2427                           
  2428                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  2429  00146C  0E00               	movlw	0
  2430  00146E  6E15               	movwf	___lldiv@dividend,c
  2431  001470  0E5A               	movlw	90
  2432  001472  6E16               	movwf	___lldiv@dividend+1,c
  2433  001474  0E62               	movlw	98
  2434  001476  6E17               	movwf	___lldiv@dividend+2,c
  2435  001478  0E02               	movlw	2
  2436  00147A  6E18               	movwf	___lldiv@dividend+3,c
  2437  00147C  C022  F026         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  2438  001480  C023  F027         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  2439  001484  C024  F028         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  2440  001488  C025  F029         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  2441  00148C  0E02               	movlw	2
  2442  00148E                     u3385:
  2443  00148E  90D8               	bcf	status,0,c
  2444  001490  3626               	rlcf	??_I2C_Master_Init,f,c
  2445  001492  3627               	rlcf	??_I2C_Master_Init+1,f,c
  2446  001494  3628               	rlcf	??_I2C_Master_Init+2,f,c
  2447  001496  3629               	rlcf	??_I2C_Master_Init+3,f,c
  2448  001498  2EE8               	decfsz	wreg,f,c
  2449  00149A  D7F9               	goto	u3385
  2450  00149C  C026  F019         	movff	??_I2C_Master_Init,___lldiv@divisor
  2451  0014A0  C027  F01A         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2452  0014A4  C028  F01B         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2453  0014A8  C029  F01C         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2454  0014AC  ECDA  F008         	call	___lldiv	;wreg free
  2455  0014B0  0415               	decf	?___lldiv,w,c
  2456  0014B2  6EC8               	movwf	4040,c	;volatile
  2457  0014B4  0012               	return		;funcret
  2458  0014B6                     __end_of_I2C_Master_Init:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           postinc0	equ	0xFEE
  2465                           wreg	equ	0xFE8
  2466                           postdec1	equ	0xFE5
  2467                           plusw1	equ	0xFE3
  2468                           fsr1l	equ	0xFE1
  2469                           indf2	equ	0xFDF
  2470                           postinc2	equ	0xFDE
  2471                           postdec2	equ	0xFDD
  2472                           plusw2	equ	0xFDB
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function ___lldiv *****************
  2478 ;; Defined at:
  2479 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  dividend        4   20[COMRAM] unsigned long 
  2482 ;;  divisor         4   24[COMRAM] unsigned long 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  quotient        4   28[COMRAM] unsigned long 
  2485 ;;  counter         1   32[COMRAM] unsigned char 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  4   20[COMRAM] unsigned long 
  2488 ;; Registers used:
  2489 ;;		wreg, status,2, status,0
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2495 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;Total ram usage:       13 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    1
  2502 ;; This function calls:
  2503 ;;		Nothing
  2504 ;; This function is called by:
  2505 ;;		_I2C_Master_Init
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text7
  2510  0011B4                     __ptext7:
  2511                           	opt stack 0
  2512  0011B4                     ___lldiv:
  2513                           	opt stack 26
  2514                           
  2515                           ;incstack = 0
  2516  0011B4  0E00               	movlw	0
  2517  0011B6  6E1D               	movwf	___lldiv@quotient,c
  2518  0011B8  0E00               	movlw	0
  2519  0011BA  6E1E               	movwf	___lldiv@quotient+1,c
  2520  0011BC  0E00               	movlw	0
  2521  0011BE  6E1F               	movwf	___lldiv@quotient+2,c
  2522  0011C0  0E00               	movlw	0
  2523  0011C2  6E20               	movwf	___lldiv@quotient+3,c
  2524  0011C4  5019               	movf	___lldiv@divisor,w,c
  2525  0011C6  101A               	iorwf	___lldiv@divisor+1,w,c
  2526  0011C8  101B               	iorwf	___lldiv@divisor+2,w,c
  2527  0011CA  101C               	iorwf	___lldiv@divisor+3,w,c
  2528  0011CC  B4D8               	btfsc	status,2,c
  2529  0011CE  D02A               	goto	l850
  2530  0011D0  0E01               	movlw	1
  2531  0011D2  6E21               	movwf	___lldiv@counter,c
  2532  0011D4  D006               	goto	l845
  2533  0011D6  90D8               	bcf	status,0,c
  2534  0011D8  3619               	rlcf	___lldiv@divisor,f,c
  2535  0011DA  361A               	rlcf	___lldiv@divisor+1,f,c
  2536  0011DC  361B               	rlcf	___lldiv@divisor+2,f,c
  2537  0011DE  361C               	rlcf	___lldiv@divisor+3,f,c
  2538  0011E0  2A21               	incf	___lldiv@counter,f,c
  2539  0011E2                     l845:
  2540  0011E2  AE1C               	btfss	___lldiv@divisor+3,7,c
  2541  0011E4  D7F8               	goto	l846
  2542  0011E6                     u3150:
  2543  0011E6  90D8               	bcf	status,0,c
  2544  0011E8  361D               	rlcf	___lldiv@quotient,f,c
  2545  0011EA  361E               	rlcf	___lldiv@quotient+1,f,c
  2546  0011EC  361F               	rlcf	___lldiv@quotient+2,f,c
  2547  0011EE  3620               	rlcf	___lldiv@quotient+3,f,c
  2548  0011F0  5019               	movf	___lldiv@divisor,w,c
  2549  0011F2  5C15               	subwf	___lldiv@dividend,w,c
  2550  0011F4  501A               	movf	___lldiv@divisor+1,w,c
  2551  0011F6  5816               	subwfb	___lldiv@dividend+1,w,c
  2552  0011F8  501B               	movf	___lldiv@divisor+2,w,c
  2553  0011FA  5817               	subwfb	___lldiv@dividend+2,w,c
  2554  0011FC  501C               	movf	___lldiv@divisor+3,w,c
  2555  0011FE  5818               	subwfb	___lldiv@dividend+3,w,c
  2556  001200  A0D8               	btfss	status,0,c
  2557  001202  D009               	goto	l849
  2558  001204  5019               	movf	___lldiv@divisor,w,c
  2559  001206  5E15               	subwf	___lldiv@dividend,f,c
  2560  001208  501A               	movf	___lldiv@divisor+1,w,c
  2561  00120A  5A16               	subwfb	___lldiv@dividend+1,f,c
  2562  00120C  501B               	movf	___lldiv@divisor+2,w,c
  2563  00120E  5A17               	subwfb	___lldiv@dividend+2,f,c
  2564  001210  501C               	movf	___lldiv@divisor+3,w,c
  2565  001212  5A18               	subwfb	___lldiv@dividend+3,f,c
  2566  001214  801D               	bsf	___lldiv@quotient,0,c
  2567  001216                     l849:
  2568  001216  90D8               	bcf	status,0,c
  2569  001218  321C               	rrcf	___lldiv@divisor+3,f,c
  2570  00121A  321B               	rrcf	___lldiv@divisor+2,f,c
  2571  00121C  321A               	rrcf	___lldiv@divisor+1,f,c
  2572  00121E  3219               	rrcf	___lldiv@divisor,f,c
  2573  001220  2E21               	decfsz	___lldiv@counter,f,c
  2574  001222  D7E1               	goto	u3150
  2575  001224                     l850:
  2576  001224  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  2577  001228  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  2578  00122C  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  2579  001230  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  2580  001234  0012               	return		;funcret
  2581  001236                     __end_of___lldiv:
  2582                           	opt stack 0
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           postinc0	equ	0xFEE
  2588                           wreg	equ	0xFE8
  2589                           postdec1	equ	0xFE5
  2590                           plusw1	equ	0xFE3
  2591                           fsr1l	equ	0xFE1
  2592                           indf2	equ	0xFDF
  2593                           postinc2	equ	0xFDE
  2594                           postdec2	equ	0xFDD
  2595                           plusw2	equ	0xFDB
  2596                           fsr2h	equ	0xFDA
  2597                           fsr2l	equ	0xFD9
  2598                           status	equ	0xFD8
  2599                           
  2600 ;; *************** function _initLCD *****************
  2601 ;; Defined at:
  2602 ;;		line 63 in file "lcd.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;		None
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  1    wreg      void 
  2609 ;; Registers used:
  2610 ;;		wreg, status,2, status,0, cstack
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;Total ram usage:        1 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; Hardware stack levels required when called:    3
  2623 ;; This function calls:
  2624 ;;		_lcdInst
  2625 ;; This function is called by:
  2626 ;;		_initStandby
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           	psect	text8
  2631  001508                     __ptext8:
  2632                           	opt stack 0
  2633  001508                     _initLCD:
  2634                           	opt stack 26
  2635                           
  2636                           ;lcd.c: 71: _delay((unsigned long)((15)*(40000000/4000.0)));
  2637                           
  2638                           ;incstack = 0
  2639  001508  0EC3               	movlw	195
  2640  00150A  6E18               	movwf	??_initLCD& (0+255),c
  2641  00150C  0ECD               	movlw	205
  2642  00150E                     u3717:
  2643  00150E  2EE8               	decfsz	wreg,f,c
  2644  001510  D7FE               	bra	u3717
  2645  001512  2E18               	decfsz	??_initLCD& (0+255),f,c
  2646  001514  D7FC               	bra	u3717
  2647  001516  F000               	nop	
  2648                           
  2649                           ;lcd.c: 72: lcdInst(0b00110011);
  2650  001518  0E33               	movlw	51
  2651  00151A  ECA5  F00B         	call	_lcdInst
  2652                           
  2653                           ;lcd.c: 73: lcdInst(0b00110010);
  2654  00151E  0E32               	movlw	50
  2655  001520  ECA5  F00B         	call	_lcdInst
  2656                           
  2657                           ;lcd.c: 74: lcdInst(0b00101000);
  2658  001524  0E28               	movlw	40
  2659  001526  ECA5  F00B         	call	_lcdInst
  2660                           
  2661                           ;lcd.c: 75: lcdInst(0b00001111);
  2662  00152A  0E0F               	movlw	15
  2663  00152C  ECA5  F00B         	call	_lcdInst
  2664                           
  2665                           ;lcd.c: 76: lcdInst(0b00000110);
  2666  001530  0E06               	movlw	6
  2667  001532  ECA5  F00B         	call	_lcdInst
  2668                           
  2669                           ;lcd.c: 77: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2670  001536  0E01               	movlw	1
  2671  001538  ECA5  F00B         	call	_lcdInst
  2672  00153C  0EC3               	movlw	195
  2673  00153E  6E18               	movwf	??_initLCD& (0+255),c
  2674  001540  0ECD               	movlw	205
  2675  001542                     u3727:
  2676  001542  2EE8               	decfsz	wreg,f,c
  2677  001544  D7FE               	bra	u3727
  2678  001546  2E18               	decfsz	??_initLCD& (0+255),f,c
  2679  001548  D7FC               	bra	u3727
  2680  00154A  F000               	nop	
  2681                           
  2682                           ;lcd.c: 80: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2683  00154C  0E0F               	movlw	15
  2684  00154E  ECA5  F00B         	call	_lcdInst
  2685  001552  0012               	return		;funcret
  2686  001554                     __end_of_initLCD:
  2687                           	opt stack 0
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           postinc0	equ	0xFEE
  2693                           wreg	equ	0xFE8
  2694                           postdec1	equ	0xFE5
  2695                           plusw1	equ	0xFE3
  2696                           fsr1l	equ	0xFE1
  2697                           indf2	equ	0xFDF
  2698                           postinc2	equ	0xFDE
  2699                           postdec2	equ	0xFDD
  2700                           plusw2	equ	0xFDB
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _getInputs *****************
  2706 ;; Defined at:
  2707 ;;		line 183 in file "standbyInterface.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  inputs          2  125[BANK0 ] PTR unsigned char 
  2710 ;;		 -> main@inputs(6), 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  screenPos       2    7[BANK1 ] unsigned short 
  2713 ;;  keyCount        2    5[BANK1 ] unsigned short 
  2714 ;;  keyPressed      1    9[BANK1 ] unsigned char 
  2715 ;;  userTyping      1    4[BANK1 ] enum E3086
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      void 
  2718 ;; Registers used:
  2719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2725 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Totals:         0       2      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;Total ram usage:       12 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    7
  2732 ;; This function calls:
  2733 ;;		_checkValid
  2734 ;;		_errScreen
  2735 ;;		_getKeyPressed
  2736 ;;		_lcdInst
  2737 ;;		_printf
  2738 ;;		_putch
  2739 ;; This function is called by:
  2740 ;;		_initStandby
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text9
  2745  0003A6                     __ptext9:
  2746                           	opt stack 0
  2747  0003A6                     _getInputs:
  2748                           	opt stack 22
  2749                           
  2750                           ;standbyInterface.c: 184: unsigned char keyPressed;
  2751                           ;standbyInterface.c: 185: unsigned short int keyCount, screenPos = 1;
  2752                           
  2753                           ;incstack = 0
  2754  0003A6  0E00               	movlw	0
  2755  0003A8  0101               	movlb	1	; () banked
  2756  0003AA  6F72               	movwf	(getInputs@screenPos+1)& (0+255),b
  2757  0003AC  0E01               	movlw	1
  2758  0003AE  6F71               	movwf	getInputs@screenPos& (0+255),b
  2759                           
  2760                           ;standbyInterface.c: 186: boolean userTyping;
  2761                           ;standbyInterface.c: 188: while (screenPos < 4){
  2762  0003B0  D11F               	goto	l285
  2763  0003B2                     
  2764                           ; BSR set to: 1
  2765                           ;standbyInterface.c: 189: userTyping = true;
  2766                           
  2767                           ; BSR set to: 1
  2768  0003B2  0E01               	movlw	1
  2769  0003B4  6F6E               	movwf	getInputs@userTyping& (0+255),b
  2770                           
  2771                           ; BSR set to: 1
  2772                           ;standbyInterface.c: 190: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));
      +                          ;
  2773  0003B6  0E01               	movlw	1
  2774  0003B8  ECA5  F00B         	call	_lcdInst
  2775  0003BC  0EC3               	movlw	195
  2776  0003BE  0101               	movlb	1	; () banked
  2777  0003C0  6F6A               	movwf	??_getInputs& (0+255),b
  2778  0003C2  0ECD               	movlw	205
  2779  0003C4                     u3737:
  2780  0003C4  2EE8               	decfsz	wreg,f,c
  2781  0003C6  D7FE               	bra	u3737
  2782  0003C8  2F6A               	decfsz	??_getInputs& (0+255),f,b
  2783  0003CA  D7FC               	bra	u3737
  2784                           
  2785                           ;standbyInterface.c: 191: keyCount = 0;
  2786  0003CC  0E00               	movlw	0
  2787  0003CE  0101               	movlb	1	; () banked
  2788  0003D0  6F70               	movwf	(getInputs@keyCount+1)& (0+255),b
  2789  0003D2  0E00               	movlw	0
  2790  0003D4  6F6F               	movwf	getInputs@keyCount& (0+255),b
  2791                           
  2792                           ;standbyInterface.c: 192: switch (screenPos){
  2793  0003D6  D034               	goto	l253
  2794  0003D8                     
  2795                           ; BSR set to: 1
  2796                           ;standbyInterface.c: 194: inputs[0] = '0';
  2797                           
  2798                           ; BSR set to: 1
  2799  0003D8  C0FD  FFD9         	movff	getInputs@inputs,fsr2l
  2800  0003DC  C0FE  FFDA         	movff	getInputs@inputs+1,fsr2h
  2801  0003E0  0E30               	movlw	48
  2802  0003E2  6EDF               	movwf	indf2,c
  2803                           
  2804                           ; BSR set to: 1
  2805                           ;standbyInterface.c: 195: inputs[1] = '0';
  2806  0003E4  0100               	movlb	0	; () banked
  2807  0003E6  EE20 F001          	lfsr	2,1
  2808  0003EA  51FD               	movf	getInputs@inputs& (0+255),w,b
  2809  0003EC  26D9               	addwf	fsr2l,f,c
  2810  0003EE  51FE               	movf	(getInputs@inputs+1)& (0+255),w,b
  2811  0003F0  22DA               	addwfc	fsr2h,f,c
  2812  0003F2  0E30               	movlw	48
  2813  0003F4  6EDF               	movwf	indf2,c
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;standbyInterface.c: 196: inputs[2] = '0';
  2817  0003F6  EE20 F002          	lfsr	2,2
  2818  0003FA  51FD               	movf	getInputs@inputs& (0+255),w,b
  2819  0003FC  26D9               	addwf	fsr2l,f,c
  2820  0003FE  51FE               	movf	(getInputs@inputs+1)& (0+255),w,b
  2821  000400  22DA               	addwfc	fsr2h,f,c
  2822  000402  0E30               	movlw	48
  2823  000404  6EDF               	movwf	indf2,c
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;standbyInterface.c: 197: inputs[3] = '0';
  2827  000406  EE20 F003          	lfsr	2,3
  2828  00040A  51FD               	movf	getInputs@inputs& (0+255),w,b
  2829  00040C  26D9               	addwf	fsr2l,f,c
  2830  00040E  51FE               	movf	(getInputs@inputs+1)& (0+255),w,b
  2831  000410  22DA               	addwfc	fsr2h,f,c
  2832  000412  0E30               	movlw	48
  2833  000414  6EDF               	movwf	indf2,c
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;standbyInterface.c: 198: printf ("SET? 1234={BNSW}");
  2837  000416  0E24               	movlw	low STR_4
  2838  000418  6E21               	movwf	printf@f,c
  2839  00041A  0EFF               	movlw	high STR_4
  2840  00041C  6E22               	movwf	printf@f+1,c
  2841  00041E  EC09  F000         	call	_printf	;wreg free
  2842                           
  2843                           ;standbyInterface.c: 199: break;
  2844  000422  D021               	goto	l255
  2845  000424                     
  2846                           ;standbyInterface.c: 201: printf ("NUM SETS/STEP?");
  2847  000424  0E93               	movlw	low STR_5
  2848  000426  6E21               	movwf	printf@f,c
  2849  000428  0EFF               	movlw	high STR_5
  2850  00042A  6E22               	movwf	printf@f+1,c
  2851  00042C  EC09  F000         	call	_printf	;wreg free
  2852                           
  2853                           ;standbyInterface.c: 202: break;
  2854  000430  D01A               	goto	l255
  2855  000432                     
  2856                           ;standbyInterface.c: 204: printf ("NUM STEPS?");
  2857  000432  0EE5               	movlw	low STR_6
  2858  000434  6E21               	movwf	printf@f,c
  2859  000436  0EFF               	movlw	high STR_6
  2860  000438  6E22               	movwf	printf@f+1,c
  2861  00043A  EC09  F000         	call	_printf	;wreg free
  2862                           
  2863                           ;standbyInterface.c: 208: }
  2864                           
  2865                           ;standbyInterface.c: 207: break;
  2866                           
  2867                           ;standbyInterface.c: 206: default:
  2868                           
  2869                           ;standbyInterface.c: 205: break;
  2870  00043E  D013               	goto	l255
  2871  000440                     l253:
  2872  000440  C171  F16A         	movff	getInputs@screenPos,??_getInputs
  2873  000444  C172  F16B         	movff	getInputs@screenPos+1,??_getInputs+1
  2874                           
  2875                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2876                           ; Switch size 1, requested type "space"
  2877                           ; Number of cases is 1, Range of values is 0 to 0
  2878                           ; switch strategies available:
  2879                           ; Name         Instructions Cycles
  2880                           ; simple_byte            4     3 (average)
  2881                           ;	Chosen strategy is simple_byte
  2882  000448  0101               	movlb	1	; () banked
  2883  00044A  516B               	movf	(??_getInputs+1)& (0+255),w,b
  2884  00044C  0A00               	xorlw	0	; case 0
  2885  00044E  A4D8               	btfss	status,2,c
  2886  000450  D00A               	goto	l255
  2887                           
  2888                           ; BSR set to: 1
  2889                           ; Switch size 1, requested type "space"
  2890                           ; Number of cases is 3, Range of values is 1 to 3
  2891                           ; switch strategies available:
  2892                           ; Name         Instructions Cycles
  2893                           ; simple_byte           10     6 (average)
  2894                           ;	Chosen strategy is simple_byte
  2895  000452  516A               	movf	??_getInputs& (0+255),w,b
  2896  000454  0A01               	xorlw	1	; case 1
  2897  000456  B4D8               	btfsc	status,2,c
  2898  000458  D7BF               	goto	l254
  2899  00045A  0A03               	xorlw	3	; case 2
  2900  00045C  B4D8               	btfsc	status,2,c
  2901  00045E  D7E2               	goto	l256
  2902  000460  0A01               	xorlw	1	; case 3
  2903  000462  B4D8               	btfsc	status,2,c
  2904  000464  D7E6               	goto	l257
  2905  000466                     l255:
  2906                           
  2907                           ;standbyInterface.c: 209: lcdInst(0xC0);;
  2908                           
  2909                           ; BSR set to: 1
  2910  000466  0EC0               	movlw	192
  2911  000468  ECA5  F00B         	call	_lcdInst
  2912                           
  2913                           ;standbyInterface.c: 210: printf ("#-CONFIRM ");
  2914  00046C  0EDA               	movlw	low STR_7
  2915  00046E  6E21               	movwf	printf@f,c
  2916  000470  0EFF               	movlw	high STR_7
  2917  000472  6E22               	movwf	printf@f+1,c
  2918  000474  EC09  F000         	call	_printf	;wreg free
  2919                           
  2920                           ;standbyInterface.c: 211: while(userTyping){
  2921  000478  D0A4               	goto	l282
  2922  00047A                     
  2923                           ;standbyInterface.c: 212: keyPressed = getKeyPressed(false);
  2924  00047A  0E00               	movlw	0
  2925  00047C  EC0C  F005         	call	_getKeyPressed
  2926  000480  0101               	movlb	1	; () banked
  2927  000482  6F73               	movwf	getInputs@keyPressed& (0+255),b
  2928                           
  2929                           ;standbyInterface.c: 213: switch(keyPressed){
  2930  000484  D07C               	goto	l261
  2931  000486                     
  2932                           ; BSR set to: 1
  2933                           ;standbyInterface.c: 215: if (keyCount > 0)
  2934                           
  2935                           ; BSR set to: 1
  2936  000486  516F               	movf	getInputs@keyCount& (0+255),w,b
  2937  000488  1170               	iorwf	(getInputs@keyCount+1)& (0+255),w,b
  2938  00048A  B4D8               	btfsc	status,2,c
  2939  00048C  D09A               	goto	l282
  2940                           
  2941                           ; BSR set to: 1
  2942                           ;standbyInterface.c: 216: userTyping = false;
  2943  00048E  0E00               	movlw	0
  2944  000490  6F6E               	movwf	getInputs@userTyping& (0+255),b
  2945                           
  2946                           ; BSR set to: 1
  2947                           ;standbyInterface.c: 217: continue;
  2948  000492  D097               	goto	l282
  2949  000494                     
  2950                           ; BSR set to: 1
  2951                           ;standbyInterface.c: 219: if ((keyPressed == '1' || keyPressed == '2' || keyPressed == '
      +                          3' || keyPressed == '4') && screenPos == 1 && keyCount < 4){
  2952                           
  2953                           ; BSR set to: 1
  2954                           
  2955                           ; BSR set to: 1
  2956                           
  2957                           ; BSR set to: 1
  2958                           
  2959                           ; BSR set to: 1
  2960                           
  2961                           ; BSR set to: 1
  2962                           
  2963                           ; BSR set to: 1
  2964                           
  2965                           ; BSR set to: 1
  2966                           
  2967                           ; BSR set to: 1
  2968                           
  2969                           ; BSR set to: 1
  2970                           
  2971                           ; BSR set to: 1
  2972  000494  0E31               	movlw	49
  2973  000496  1973               	xorwf	getInputs@keyPressed& (0+255),w,b
  2974  000498  B4D8               	btfsc	status,2,c
  2975  00049A  D00C               	goto	u3430
  2976                           
  2977                           ; BSR set to: 1
  2978  00049C  0E32               	movlw	50
  2979  00049E  1973               	xorwf	getInputs@keyPressed& (0+255),w,b
  2980  0004A0  B4D8               	btfsc	status,2,c
  2981  0004A2  D008               	goto	u3430
  2982                           
  2983                           ; BSR set to: 1
  2984  0004A4  0E33               	movlw	51
  2985  0004A6  1973               	xorwf	getInputs@keyPressed& (0+255),w,b
  2986  0004A8  B4D8               	btfsc	status,2,c
  2987  0004AA  D004               	goto	u3430
  2988                           
  2989                           ; BSR set to: 1
  2990  0004AC  0E34               	movlw	52
  2991  0004AE  1973               	xorwf	getInputs@keyPressed& (0+255),w,b
  2992  0004B0  A4D8               	btfss	status,2,c
  2993  0004B2  D03E               	goto	l274
  2994  0004B4                     u3430:
  2995                           
  2996                           ; BSR set to: 1
  2997                           
  2998                           ; BSR set to: 1
  2999  0004B4  0571               	decf	getInputs@screenPos& (0+255),w,b
  3000  0004B6  1172               	iorwf	(getInputs@screenPos+1)& (0+255),w,b
  3001  0004B8  A4D8               	btfss	status,2,c
  3002  0004BA  D03A               	goto	l274
  3003                           
  3004                           ; BSR set to: 1
  3005  0004BC  5170               	movf	(getInputs@keyCount+1)& (0+255),w,b
  3006  0004BE  E138               	bnz	l3894
  3007  0004C0  0E04               	movlw	4
  3008  0004C2  5D6F               	subwf	getInputs@keyCount& (0+255),w,b
  3009  0004C4  B0D8               	btfsc	status,0,c
  3010  0004C6  D034               	goto	l274
  3011                           
  3012                           ; BSR set to: 1
  3013                           ;standbyInterface.c: 220: putch (setKeys[(unsigned int)keyPressed-49]);
  3014  0004C8  0ECF               	movlw	207
  3015  0004CA  6F6A               	movwf	??_getInputs& (0+255),b
  3016  0004CC  0EFF               	movlw	255
  3017  0004CE  6F6B               	movwf	(??_getInputs+1)& (0+255),b
  3018  0004D0  5173               	movf	getInputs@keyPressed& (0+255),w,b
  3019  0004D2  6F6C               	movwf	(??_getInputs+2)& (0+255),b
  3020  0004D4  6B6D               	clrf	(??_getInputs+3)& (0+255),b
  3021  0004D6  516A               	movf	??_getInputs& (0+255),w,b
  3022  0004D8  276C               	addwf	(??_getInputs+2)& (0+255),f,b
  3023  0004DA  516B               	movf	(??_getInputs+1)& (0+255),w,b
  3024  0004DC  236D               	addwfc	(??_getInputs+3)& (0+255),f,b
  3025  0004DE  0EED               	movlw	low _setKeys
  3026  0004E0  256C               	addwf	(??_getInputs+2)& (0+255),w,b
  3027  0004E2  6EF6               	movwf	tblptrl,c
  3028  0004E4  0EFE               	movlw	high _setKeys
  3029  0004E6  216D               	addwfc	(??_getInputs+3)& (0+255),w,b
  3030  0004E8  6EF7               	movwf	tblptrh,c
  3031  0004EA                     	if	0	;There are less than 3 active tblptr bytes
  3032  0004EA                     	endif
  3033  0004EA  0008               	tblrd		*
  3034  0004EC  50F5               	movf	tablat,w,c
  3035  0004EE  EC9B  F00B         	call	_putch
  3036                           
  3037                           ;standbyInterface.c: 221: inputs[keyCount] = setKeys[(unsigned int)keyPressed-49];
  3038  0004F2  0ECF               	movlw	207
  3039  0004F4  0101               	movlb	1	; () banked
  3040  0004F6  6F6A               	movwf	??_getInputs& (0+255),b
  3041  0004F8  0EFF               	movlw	255
  3042  0004FA  6F6B               	movwf	(??_getInputs+1)& (0+255),b
  3043  0004FC  5173               	movf	getInputs@keyPressed& (0+255),w,b
  3044  0004FE  6F6C               	movwf	(??_getInputs+2)& (0+255),b
  3045  000500  6B6D               	clrf	(??_getInputs+3)& (0+255),b
  3046  000502  516A               	movf	??_getInputs& (0+255),w,b
  3047  000504  276C               	addwf	(??_getInputs+2)& (0+255),f,b
  3048  000506  516B               	movf	(??_getInputs+1)& (0+255),w,b
  3049  000508  236D               	addwfc	(??_getInputs+3)& (0+255),f,b
  3050  00050A  0EED               	movlw	low _setKeys
  3051  00050C  256C               	addwf	(??_getInputs+2)& (0+255),w,b
  3052  00050E  6EF6               	movwf	tblptrl,c
  3053  000510  0EFE               	movlw	high _setKeys
  3054  000512  216D               	addwfc	(??_getInputs+3)& (0+255),w,b
  3055  000514  6EF7               	movwf	tblptrh,c
  3056  000516                     	if	0	;There are less than 3 active tblptr bytes
  3057  000516                     	endif
  3058  000516  516F               	movf	getInputs@keyCount& (0+255),w,b
  3059  000518  0100               	movlb	0	; () banked
  3060  00051A  25FD               	addwf	getInputs@inputs& (0+255),w,b
  3061  00051C  6ED9               	movwf	fsr2l,c
  3062  00051E  0101               	movlb	1	; () banked
  3063  000520  5170               	movf	(getInputs@keyCount+1)& (0+255),w,b
  3064  000522  0100               	movlb	0	; () banked
  3065  000524  21FE               	addwfc	(getInputs@inputs+1)& (0+255),w,b
  3066  000526  6EDA               	movwf	fsr2h,c
  3067  000528  0008               	tblrd		*
  3068  00052A  CFF5 FFDF          	movff	tablat,indf2
  3069  00052E  D023               	goto	l3904
  3070  000530                     l274:
  3071  000530                     l3894:
  3072                           
  3073                           ; BSR set to: 1
  3074                           ;standbyInterface.c: 224: else if ((screenPos == 2 || screenPos == 3) && keyCount < 1){
  3075  000530  0E02               	movlw	2
  3076  000532  1971               	xorwf	getInputs@screenPos& (0+255),w,b
  3077  000534  1172               	iorwf	(getInputs@screenPos+1)& (0+255),w,b
  3078  000536  B4D8               	btfsc	status,2,c
  3079  000538  D005               	goto	u3470
  3080                           
  3081                           ; BSR set to: 1
  3082  00053A  0E03               	movlw	3
  3083  00053C  1971               	xorwf	getInputs@screenPos& (0+255),w,b
  3084  00053E  1172               	iorwf	(getInputs@screenPos+1)& (0+255),w,b
  3085  000540  A4D8               	btfss	status,2,c
  3086  000542  D03F               	goto	l282
  3087  000544                     u3470:
  3088                           
  3089                           ; BSR set to: 1
  3090                           
  3091                           ; BSR set to: 1
  3092  000544  516F               	movf	getInputs@keyCount& (0+255),w,b
  3093  000546  1170               	iorwf	(getInputs@keyCount+1)& (0+255),w,b
  3094  000548  A4D8               	btfss	status,2,c
  3095  00054A  D03B               	goto	l282
  3096                           
  3097                           ; BSR set to: 1
  3098                           ;standbyInterface.c: 225: putch (keyPressed);
  3099  00054C  5173               	movf	getInputs@keyPressed& (0+255),w,b
  3100  00054E  EC9B  F00B         	call	_putch
  3101                           
  3102                           ;standbyInterface.c: 226: inputs[screenPos+2] = keyPressed;
  3103  000552  0E02               	movlw	2
  3104  000554  0101               	movlb	1	; () banked
  3105  000556  2571               	addwf	getInputs@screenPos& (0+255),w,b
  3106  000558  6F6A               	movwf	??_getInputs& (0+255),b
  3107  00055A  0E00               	movlw	0
  3108  00055C  2172               	addwfc	(getInputs@screenPos+1)& (0+255),w,b
  3109  00055E  6F6B               	movwf	(??_getInputs+1)& (0+255),b
  3110  000560  516A               	movf	??_getInputs& (0+255),w,b
  3111  000562  0100               	movlb	0	; () banked
  3112  000564  25FD               	addwf	getInputs@inputs& (0+255),w,b
  3113  000566  6ED9               	movwf	fsr2l,c
  3114  000568  0101               	movlb	1	; () banked
  3115  00056A  516B               	movf	(??_getInputs+1)& (0+255),w,b
  3116  00056C  0100               	movlb	0	; () banked
  3117  00056E  21FE               	addwfc	(getInputs@inputs+1)& (0+255),w,b
  3118  000570  6EDA               	movwf	fsr2h,c
  3119  000572  C173  FFDF         	movff	getInputs@keyPressed,indf2
  3120  000576                     l3904:
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;standbyInterface.c: 227: keyCount++;
  3124  000576  0101               	movlb	1	; () banked
  3125  000578  4B6F               	infsnz	getInputs@keyCount& (0+255),f,b
  3126  00057A  2B70               	incf	(getInputs@keyCount+1)& (0+255),f,b
  3127                           
  3128                           ; BSR set to: 1
  3129                           ;standbyInterface.c: 232: }
  3130                           
  3131                           ; BSR set to: 1
  3132                           ;standbyInterface.c: 231: continue;
  3133                           
  3134                           ;standbyInterface.c: 230: default:
  3135                           
  3136                           ; BSR set to: 1
  3137                           ;standbyInterface.c: 228: }
  3138                           ;standbyInterface.c: 229: continue;
  3139                           
  3140                           ; BSR set to: 1
  3141  00057C  D022               	goto	l282
  3142  00057E                     l261:
  3143                           
  3144                           ; BSR set to: 1
  3145                           
  3146                           ; BSR set to: 1
  3147  00057E  5173               	movf	getInputs@keyPressed& (0+255),w,b
  3148                           
  3149                           ; Switch size 1, requested type "space"
  3150                           ; Number of cases is 11, Range of values is 35 to 57
  3151                           ; switch strategies available:
  3152                           ; Name         Instructions Cycles
  3153                           ; simple_byte           34    18 (average)
  3154                           ;	Chosen strategy is simple_byte
  3155  000580  0A23               	xorlw	35	; case 35
  3156  000582  B4D8               	btfsc	status,2,c
  3157  000584  D780               	goto	l262
  3158  000586  0A13               	xorlw	19	; case 48
  3159  000588  B4D8               	btfsc	status,2,c
  3160  00058A  D784               	goto	l264
  3161  00058C  0A01               	xorlw	1	; case 49
  3162  00058E  B4D8               	btfsc	status,2,c
  3163  000590  D781               	goto	l264
  3164  000592  0A03               	xorlw	3	; case 50
  3165  000594  B4D8               	btfsc	status,2,c
  3166  000596  D77E               	goto	l264
  3167  000598  0A01               	xorlw	1	; case 51
  3168  00059A  B4D8               	btfsc	status,2,c
  3169  00059C  D77B               	goto	l264
  3170  00059E  0A07               	xorlw	7	; case 52
  3171  0005A0  B4D8               	btfsc	status,2,c
  3172  0005A2  D778               	goto	l264
  3173  0005A4  0A01               	xorlw	1	; case 53
  3174  0005A6  B4D8               	btfsc	status,2,c
  3175  0005A8  D775               	goto	l264
  3176  0005AA  0A03               	xorlw	3	; case 54
  3177  0005AC  B4D8               	btfsc	status,2,c
  3178  0005AE  D772               	goto	l264
  3179  0005B0  0A01               	xorlw	1	; case 55
  3180  0005B2  B4D8               	btfsc	status,2,c
  3181  0005B4  D76F               	goto	l264
  3182  0005B6  0A0F               	xorlw	15	; case 56
  3183  0005B8  B4D8               	btfsc	status,2,c
  3184  0005BA  D76C               	goto	l264
  3185  0005BC  0A01               	xorlw	1	; case 57
  3186  0005BE  B4D8               	btfsc	status,2,c
  3187  0005C0  D769               	goto	l264
  3188  0005C2                     l282:
  3189                           
  3190                           ; BSR set to: 1
  3191                           
  3192                           ; BSR set to: 1
  3193  0005C2  0101               	movlb	1	; () banked
  3194  0005C4  516E               	movf	getInputs@userTyping& (0+255),w,b
  3195  0005C6  A4D8               	btfss	status,2,c
  3196  0005C8  D758               	goto	l260
  3197                           
  3198                           ; BSR set to: 1
  3199                           ;standbyInterface.c: 233: }
  3200                           ;standbyInterface.c: 234: if (checkValid (screenPos, inputs))
  3201                           
  3202                           ; BSR set to: 1
  3203  0005CA  C171  F021         	movff	getInputs@screenPos,checkValid@inputScreenPos
  3204  0005CE  C172  F022         	movff	getInputs@screenPos+1,checkValid@inputScreenPos+1
  3205  0005D2  C0FD  F023         	movff	getInputs@inputs,checkValid@inputs
  3206  0005D6  C0FE  F024         	movff	getInputs@inputs+1,checkValid@inputs+1
  3207  0005DA  EC01  F003         	call	_checkValid	;wreg free
  3208  0005DE  0900               	iorlw	0
  3209  0005E0  B4D8               	btfsc	status,2,c
  3210  0005E2  D004               	goto	l284
  3211                           
  3212                           ;standbyInterface.c: 235: screenPos ++;
  3213  0005E4  0101               	movlb	1	; () banked
  3214  0005E6  4B71               	infsnz	getInputs@screenPos& (0+255),f,b
  3215  0005E8  2B72               	incf	(getInputs@screenPos+1)& (0+255),f,b
  3216  0005EA  D002               	goto	l285
  3217  0005EC                     l284:
  3218                           
  3219                           ;standbyInterface.c: 236: else
  3220                           ;standbyInterface.c: 237: errScreen();
  3221                           
  3222                           ; BSR set to: 1
  3223  0005EC  ECCD  F00A         	call	_errScreen	;wreg free
  3224  0005F0                     l285:
  3225  0005F0  0101               	movlb	1	; () banked
  3226  0005F2  5172               	movf	(getInputs@screenPos+1)& (0+255),w,b
  3227  0005F4  E105               	bnz	l287
  3228  0005F6  0E04               	movlw	4
  3229  0005F8  5D71               	subwf	getInputs@screenPos& (0+255),w,b
  3230  0005FA  B0D8               	btfsc	status,0,c
  3231  0005FC  0012               	return	
  3232  0005FE  D6D9               	goto	l252
  3233  000600                     l287:
  3234                           
  3235                           ; BSR set to: 1
  3236  000600  0012               	return		;funcret
  3237  000602                     __end_of_getInputs:
  3238                           	opt stack 0
  3239                           tblptru	equ	0xFF8
  3240                           tblptrh	equ	0xFF7
  3241                           tblptrl	equ	0xFF6
  3242                           tablat	equ	0xFF5
  3243                           postinc0	equ	0xFEE
  3244                           wreg	equ	0xFE8
  3245                           postdec1	equ	0xFE5
  3246                           plusw1	equ	0xFE3
  3247                           fsr1l	equ	0xFE1
  3248                           indf2	equ	0xFDF
  3249                           postinc2	equ	0xFDE
  3250                           postdec2	equ	0xFDD
  3251                           plusw2	equ	0xFDB
  3252                           fsr2h	equ	0xFDA
  3253                           fsr2l	equ	0xFD9
  3254                           status	equ	0xFD8
  3255                           
  3256 ;; *************** function _errScreen *****************
  3257 ;; Defined at:
  3258 ;;		line 87 in file "standbyInterface.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;		None
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;		None
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  1    wreg      void 
  3265 ;; Registers used:
  3266 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;Total ram usage:        1 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    6
  3279 ;; This function calls:
  3280 ;;		_getKeyPressed
  3281 ;;		_lcdInst
  3282 ;;		_printf
  3283 ;; This function is called by:
  3284 ;;		_getInputs
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text10
  3289  00159A                     __ptext10:
  3290                           	opt stack 0
  3291  00159A                     _errScreen:
  3292                           	opt stack 22
  3293                           
  3294                           ;standbyInterface.c: 88: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3295                           
  3296                           ; BSR set to: 1
  3297                           ;incstack = 0
  3298  00159A  0E01               	movlw	1
  3299  00159C  ECA5  F00B         	call	_lcdInst
  3300  0015A0  0EC3               	movlw	195
  3301  0015A2  6E5A               	movwf	??_errScreen& (0+255),c
  3302  0015A4  0ECD               	movlw	205
  3303  0015A6                     u3747:
  3304  0015A6  2EE8               	decfsz	wreg,f,c
  3305  0015A8  D7FE               	bra	u3747
  3306  0015AA  2E5A               	decfsz	??_errScreen& (0+255),f,c
  3307  0015AC  D7FC               	bra	u3747
  3308  0015AE  F000               	nop	
  3309                           
  3310                           ;standbyInterface.c: 89: printf ("INVALID INPUT!");
  3311  0015B0  0E75               	movlw	low STR_2
  3312  0015B2  6E21               	movwf	printf@f,c
  3313  0015B4  0EFF               	movlw	high STR_2
  3314  0015B6  6E22               	movwf	printf@f+1,c
  3315  0015B8  EC09  F000         	call	_printf	;wreg free
  3316                           
  3317                           ;standbyInterface.c: 90: lcdInst(0xC0);;
  3318  0015BC  0EC0               	movlw	192
  3319  0015BE  ECA5  F00B         	call	_lcdInst
  3320                           
  3321                           ;standbyInterface.c: 91: printf ("HIT A");
  3322  0015C2  0E3F               	movlw	low (STR_14+10)
  3323  0015C4  6E21               	movwf	printf@f,c
  3324  0015C6  0EFF               	movlw	high (STR_14+10)
  3325  0015C8  6E22               	movwf	printf@f+1,c
  3326  0015CA  EC09  F000         	call	_printf	;wreg free
  3327  0015CE                     
  3328                           ;standbyInterface.c: 93: if (getKeyPressed(false) == 'A')
  3329  0015CE  0E00               	movlw	0
  3330  0015D0  EC0C  F005         	call	_getKeyPressed
  3331  0015D4  0A41               	xorlw	65
  3332  0015D6  B4D8               	btfsc	status,2,c
  3333  0015D8  0012               	return	
  3334  0015DA  D7F9               	goto	l201
  3335  0015DC                     __end_of_errScreen:
  3336                           	opt stack 0
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           postinc0	equ	0xFEE
  3342                           wreg	equ	0xFE8
  3343                           postdec1	equ	0xFE5
  3344                           plusw1	equ	0xFE3
  3345                           fsr1l	equ	0xFE1
  3346                           indf2	equ	0xFDF
  3347                           postinc2	equ	0xFDE
  3348                           postdec2	equ	0xFDD
  3349                           plusw2	equ	0xFDB
  3350                           fsr2h	equ	0xFDA
  3351                           fsr2l	equ	0xFD9
  3352                           status	equ	0xFD8
  3353                           
  3354 ;; *************** function _getKeyPressed *****************
  3355 ;; Defined at:
  3356 ;;		line 28 in file "standbyInterface.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  shouldDispTi    1    wreg     enum E3086
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;  shouldDispTi    1   86[COMRAM] enum E3086
  3361 ;;  currTimeTemp    7   78[COMRAM] unsigned char [7]
  3362 ;;  lastTimeRefr    7   71[COMRAM] unsigned char [7]
  3363 ;;  i               2   87[COMRAM] int 
  3364 ;;  keypress        1   85[COMRAM] unsigned char 
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      unsigned char 
  3367 ;; Registers used:
  3368 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;Total ram usage:       18 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    5
  3381 ;; This function calls:
  3382 ;;		___ftge
  3383 ;;		___lwtoft
  3384 ;;		_calcOperationTime
  3385 ;;		_dispRealTime
  3386 ;;		_getDateTime
  3387 ;;		_lcd_set_cursor
  3388 ;; This function is called by:
  3389 ;;		_errScreen
  3390 ;;		_getInputs
  3391 ;;		_initStandby
  3392 ;;		_showResults
  3393 ;;		_showLogs
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text11
  3398  000A18                     __ptext11:
  3399                           	opt stack 0
  3400  000A18                     _getKeyPressed:
  3401                           	opt stack 24
  3402                           
  3403                           ;incstack = 0
  3404                           ;getKeyPressed@shouldDispTime stored from wreg
  3405  000A18  6E57               	movwf	getKeyPressed@shouldDispTime,c
  3406                           
  3407                           ;standbyInterface.c: 32: unsigned char lastTimeRefresh [7], currTimeTemp [7];
  3408                           ;standbyInterface.c: 33: int i;
  3409                           ;standbyInterface.c: 35: if (shouldDispTime){
  3410  000A1A  5057               	movf	getKeyPressed@shouldDispTime,w,c
  3411  000A1C  B4D8               	btfsc	status,2,c
  3412  000A1E  D05B               	goto	u3050
  3413                           
  3414                           ;standbyInterface.c: 36: dispRealTime();
  3415  000A20  ECFB  F009         	call	_dispRealTime	;wreg free
  3416                           
  3417                           ;standbyInterface.c: 37: getDateTime(lastTimeRefresh);
  3418  000A24  0E48               	movlw	low getKeyPressed@lastTimeRefresh
  3419  000A26  6E18               	movwf	getDateTime@time,c
  3420  000A28  0E00               	movlw	high getKeyPressed@lastTimeRefresh
  3421  000A2A  6E19               	movwf	getDateTime@time+1,c
  3422  000A2C  EC5A  F009         	call	_getDateTime	;wreg free
  3423                           
  3424                           ;standbyInterface.c: 38: lcd_set_cursor(15,2);
  3425  000A30  0E02               	movlw	2
  3426  000A32  6E1B               	movwf	lcd_set_cursor@y,c
  3427  000A34  0E0F               	movlw	15
  3428  000A36  EC0F  F00B         	call	_lcd_set_cursor
  3429                           
  3430                           ;standbyInterface.c: 39: }
  3431                           ;standbyInterface.c: 41: while(PORTBbits.RB1 == 0){
  3432  000A3A  D04D               	goto	u3050
  3433  000A3C                     
  3434                           ;standbyInterface.c: 42: if (shouldDispTime){
  3435  000A3C  5057               	movf	getKeyPressed@shouldDispTime,w,c
  3436  000A3E  B4D8               	btfsc	status,2,c
  3437  000A40  D04A               	goto	u3050
  3438                           
  3439                           ;standbyInterface.c: 43: getDateTime(currTimeTemp);
  3440  000A42  0E4F               	movlw	low getKeyPressed@currTimeTemp
  3441  000A44  6E18               	movwf	getDateTime@time,c
  3442  000A46  0E00               	movlw	high getKeyPressed@currTimeTemp
  3443  000A48  6E19               	movwf	getDateTime@time+1,c
  3444  000A4A  EC5A  F009         	call	_getDateTime	;wreg free
  3445                           
  3446                           ;standbyInterface.c: 44: if (calcOperationTime(lastTimeRefresh, currTimeTemp) >=0.5){
  3447  000A4E  0E4F               	movlw	low getKeyPressed@currTimeTemp
  3448  000A50  6E1D               	movwf	calcOperationTime@timeEnd,c
  3449  000A52  0E00               	movlw	high getKeyPressed@currTimeTemp
  3450  000A54  6E1E               	movwf	calcOperationTime@timeEnd+1,c
  3451  000A56  0E48               	movlw	low getKeyPressed@lastTimeRefresh
  3452  000A58  6E1B               	movwf	calcOperationTime@timeStart,c
  3453  000A5A  0E00               	movlw	high getKeyPressed@lastTimeRefresh
  3454  000A5C  6E1C               	movwf	calcOperationTime@timeStart+1,c
  3455  000A5E  EC0F  F004         	call	_calcOperationTime	;wreg free
  3456  000A62  C01B  F02F         	movff	?_calcOperationTime,___lwtoft@c
  3457  000A66  C01C  F030         	movff	?_calcOperationTime+1,___lwtoft@c+1
  3458  000A6A  EC54  F00B         	call	___lwtoft	;wreg free
  3459  000A6E  C02F  F032         	movff	?___lwtoft,___ftge@ff1
  3460  000A72  C030  F033         	movff	?___lwtoft+1,___ftge@ff1+1
  3461  000A76  C031  F034         	movff	?___lwtoft+2,___ftge@ff1+2
  3462  000A7A  0E00               	movlw	0
  3463  000A7C  6E35               	movwf	___ftge@ff2,c
  3464  000A7E  0E00               	movlw	0
  3465  000A80  6E36               	movwf	___ftge@ff2+1,c
  3466  000A82  0E3F               	movlw	63
  3467  000A84  6E37               	movwf	___ftge@ff2+2,c
  3468  000A86  EC92  F008         	call	___ftge	;wreg free
  3469  000A8A  A0D8               	btfss	status,0,c
  3470  000A8C  D024               	goto	u3050
  3471                           
  3472                           ;standbyInterface.c: 45: dispRealTime();
  3473  000A8E  ECFB  F009         	call	_dispRealTime	;wreg free
  3474                           
  3475                           ;standbyInterface.c: 46: lcd_set_cursor(15,2);
  3476  000A92  0E02               	movlw	2
  3477  000A94  6E1B               	movwf	lcd_set_cursor@y,c
  3478  000A96  0E0F               	movlw	15
  3479  000A98  EC0F  F00B         	call	_lcd_set_cursor
  3480                           
  3481                           ;standbyInterface.c: 47: for (i = 0; i<7; i++){
  3482  000A9C  0E00               	movlw	0
  3483  000A9E  6E59               	movwf	getKeyPressed@i+1,c
  3484  000AA0  0E00               	movlw	0
  3485  000AA2  6E58               	movwf	getKeyPressed@i,c
  3486  000AA4                     l3572:
  3487  000AA4  BE59               	btfsc	getKeyPressed@i+1,7,c
  3488  000AA6  D006               	goto	l185
  3489  000AA8  5059               	movf	getKeyPressed@i+1,w,c
  3490  000AAA  E115               	bnz	l181
  3491  000AAC  0E07               	movlw	7
  3492  000AAE  5C58               	subwf	getKeyPressed@i,w,c
  3493  000AB0  B0D8               	btfsc	status,0,c
  3494  000AB2  D011               	goto	u3050
  3495  000AB4                     l185:
  3496                           
  3497                           ;standbyInterface.c: 48: lastTimeRefresh[i] = currTimeTemp[i];
  3498  000AB4  0E4F               	movlw	low getKeyPressed@currTimeTemp
  3499  000AB6  2458               	addwf	getKeyPressed@i,w,c
  3500  000AB8  6ED9               	movwf	fsr2l,c
  3501  000ABA  0E00               	movlw	high getKeyPressed@currTimeTemp
  3502  000ABC  2059               	addwfc	getKeyPressed@i+1,w,c
  3503  000ABE  6EDA               	movwf	fsr2h,c
  3504  000AC0  0E48               	movlw	low getKeyPressed@lastTimeRefresh
  3505  000AC2  2458               	addwf	getKeyPressed@i,w,c
  3506  000AC4  6EE1               	movwf	fsr1l,c
  3507  000AC6  0E00               	movlw	high getKeyPressed@lastTimeRefresh
  3508  000AC8  2059               	addwfc	getKeyPressed@i+1,w,c
  3509  000ACA  6EE2               	movwf	fsr1h,c
  3510  000ACC  CFDF FFE7          	movff	indf2,indf1
  3511  000AD0  4A58               	infsnz	getKeyPressed@i,f,c
  3512  000AD2  2A59               	incf	getKeyPressed@i+1,f,c
  3513  000AD4  D7E7               	goto	l3572
  3514  000AD6                     u3050:
  3515  000AD6                     l181:
  3516  000AD6  A281               	btfss	3969,1,c	;volatile
  3517  000AD8  D7B1               	goto	l182
  3518                           
  3519                           ;standbyInterface.c: 53: }
  3520                           ;standbyInterface.c: 56: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3521  000ADA  3881               	swapf	3969,w,c	;volatile
  3522  000ADC  0B0F               	andlw	15
  3523  000ADE  0B0F               	andlw	15
  3524  000AE0  6E56               	movwf	getKeyPressed@keypress,c
  3525                           
  3526                           ;standbyInterface.c: 59: while(PORTBbits.RB1 == 1){
  3527  000AE2  D048               	goto	u3100
  3528  000AE4                     
  3529                           ;standbyInterface.c: 60: if (shouldDispTime){
  3530  000AE4  5057               	movf	getKeyPressed@shouldDispTime,w,c
  3531  000AE6  B4D8               	btfsc	status,2,c
  3532  000AE8  D045               	goto	u3100
  3533                           
  3534                           ;standbyInterface.c: 61: getDateTime(currTimeTemp);
  3535  000AEA  0E4F               	movlw	low getKeyPressed@currTimeTemp
  3536  000AEC  6E18               	movwf	getDateTime@time,c
  3537  000AEE  0E00               	movlw	high getKeyPressed@currTimeTemp
  3538  000AF0  6E19               	movwf	getDateTime@time+1,c
  3539  000AF2  EC5A  F009         	call	_getDateTime	;wreg free
  3540                           
  3541                           ;standbyInterface.c: 62: if (calcOperationTime(lastTimeRefresh, currTimeTemp) >=0.5){
  3542  000AF6  0E4F               	movlw	low getKeyPressed@currTimeTemp
  3543  000AF8  6E1D               	movwf	calcOperationTime@timeEnd,c
  3544  000AFA  0E00               	movlw	high getKeyPressed@currTimeTemp
  3545  000AFC  6E1E               	movwf	calcOperationTime@timeEnd+1,c
  3546  000AFE  0E48               	movlw	low getKeyPressed@lastTimeRefresh
  3547  000B00  6E1B               	movwf	calcOperationTime@timeStart,c
  3548  000B02  0E00               	movlw	high getKeyPressed@lastTimeRefresh
  3549  000B04  6E1C               	movwf	calcOperationTime@timeStart+1,c
  3550  000B06  EC0F  F004         	call	_calcOperationTime	;wreg free
  3551  000B0A  C01B  F02F         	movff	?_calcOperationTime,___lwtoft@c
  3552  000B0E  C01C  F030         	movff	?_calcOperationTime+1,___lwtoft@c+1
  3553  000B12  EC54  F00B         	call	___lwtoft	;wreg free
  3554  000B16  C02F  F032         	movff	?___lwtoft,___ftge@ff1
  3555  000B1A  C030  F033         	movff	?___lwtoft+1,___ftge@ff1+1
  3556  000B1E  C031  F034         	movff	?___lwtoft+2,___ftge@ff1+2
  3557  000B22  0E00               	movlw	0
  3558  000B24  6E35               	movwf	___ftge@ff2,c
  3559  000B26  0E00               	movlw	0
  3560  000B28  6E36               	movwf	___ftge@ff2+1,c
  3561  000B2A  0E3F               	movlw	63
  3562  000B2C  6E37               	movwf	___ftge@ff2+2,c
  3563  000B2E  EC92  F008         	call	___ftge	;wreg free
  3564  000B32  A0D8               	btfss	status,0,c
  3565  000B34  D01F               	goto	u3100
  3566                           
  3567                           ;standbyInterface.c: 63: dispRealTime();
  3568  000B36  ECFB  F009         	call	_dispRealTime	;wreg free
  3569                           
  3570                           ;standbyInterface.c: 64: for (i = 0; i<7; i++){
  3571  000B3A  0E00               	movlw	0
  3572  000B3C  6E59               	movwf	getKeyPressed@i+1,c
  3573  000B3E  0E00               	movlw	0
  3574  000B40  6E58               	movwf	getKeyPressed@i,c
  3575  000B42                     l3592:
  3576  000B42  BE59               	btfsc	getKeyPressed@i+1,7,c
  3577  000B44  D006               	goto	l192
  3578  000B46  5059               	movf	getKeyPressed@i+1,w,c
  3579  000B48  E115               	bnz	l188
  3580  000B4A  0E07               	movlw	7
  3581  000B4C  5C58               	subwf	getKeyPressed@i,w,c
  3582  000B4E  B0D8               	btfsc	status,0,c
  3583  000B50  D011               	goto	u3100
  3584  000B52                     l192:
  3585                           
  3586                           ;standbyInterface.c: 65: lastTimeRefresh[i] = currTimeTemp[i];
  3587  000B52  0E4F               	movlw	low getKeyPressed@currTimeTemp
  3588  000B54  2458               	addwf	getKeyPressed@i,w,c
  3589  000B56  6ED9               	movwf	fsr2l,c
  3590  000B58  0E00               	movlw	high getKeyPressed@currTimeTemp
  3591  000B5A  2059               	addwfc	getKeyPressed@i+1,w,c
  3592  000B5C  6EDA               	movwf	fsr2h,c
  3593  000B5E  0E48               	movlw	low getKeyPressed@lastTimeRefresh
  3594  000B60  2458               	addwf	getKeyPressed@i,w,c
  3595  000B62  6EE1               	movwf	fsr1l,c
  3596  000B64  0E00               	movlw	high getKeyPressed@lastTimeRefresh
  3597  000B66  2059               	addwfc	getKeyPressed@i+1,w,c
  3598  000B68  6EE2               	movwf	fsr1h,c
  3599  000B6A  CFDF FFE7          	movff	indf2,indf1
  3600  000B6E  4A58               	infsnz	getKeyPressed@i,f,c
  3601  000B70  2A59               	incf	getKeyPressed@i+1,f,c
  3602  000B72  D7E7               	goto	l3592
  3603  000B74                     u3100:
  3604  000B74                     l188:
  3605  000B74  B281               	btfsc	3969,1,c	;volatile
  3606  000B76  D7B6               	goto	l189
  3607                           
  3608                           ;standbyInterface.c: 70: }
  3609                           ;standbyInterface.c: 72: __nop();
  3610  000B78  F000               	nop	
  3611                           
  3612                           ;standbyInterface.c: 74: return keys[keypress];
  3613  000B7A  5056               	movf	getKeyPressed@keypress,w,c
  3614  000B7C  0D01               	mullw	1
  3615  000B7E  0EBB               	movlw	low _keys
  3616  000B80  24F3               	addwf	prodl,w,c
  3617  000B82  6EF6               	movwf	tblptrl,c
  3618  000B84  0EFE               	movlw	high _keys
  3619  000B86  20F4               	addwfc	prodh,w,c
  3620  000B88  6EF7               	movwf	tblptrh,c
  3621  000B8A                     	if	0	;There are less than 3 active tblptr bytes
  3622  000B8A                     	endif
  3623  000B8A  0008               	tblrd		*
  3624  000B8C  50F5               	movf	tablat,w,c
  3625  000B8E  0012               	return	
  3626  000B90                     __end_of_getKeyPressed:
  3627                           	opt stack 0
  3628                           tblptru	equ	0xFF8
  3629                           tblptrh	equ	0xFF7
  3630                           tblptrl	equ	0xFF6
  3631                           tablat	equ	0xFF5
  3632                           prodh	equ	0xFF4
  3633                           prodl	equ	0xFF3
  3634                           postinc0	equ	0xFEE
  3635                           wreg	equ	0xFE8
  3636                           indf1	equ	0xFE7
  3637                           postdec1	equ	0xFE5
  3638                           plusw1	equ	0xFE3
  3639                           fsr1h	equ	0xFE2
  3640                           fsr1l	equ	0xFE1
  3641                           indf2	equ	0xFDF
  3642                           postinc2	equ	0xFDE
  3643                           postdec2	equ	0xFDD
  3644                           plusw2	equ	0xFDB
  3645                           fsr2h	equ	0xFDA
  3646                           fsr2l	equ	0xFD9
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function _lcd_set_cursor *****************
  3650 ;; Defined at:
  3651 ;;		line 83 in file "lcd.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  x               1    wreg     unsigned char 
  3654 ;;  y               1   26[COMRAM] unsigned char 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  x               1   29[COMRAM] unsigned char 
  3657 ;;  i               1   28[COMRAM] unsigned char 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  1    wreg      void 
  3660 ;; Registers used:
  3661 ;;		wreg, status,2, status,0, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3667 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;Total ram usage:        4 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    4
  3674 ;; This function calls:
  3675 ;;		_lcdInst
  3676 ;;		_lcd_shift_cursor
  3677 ;; This function is called by:
  3678 ;;		_getKeyPressed
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text12
  3683  00161E                     __ptext12:
  3684                           	opt stack 0
  3685  00161E                     _lcd_set_cursor:
  3686                           	opt stack 24
  3687                           
  3688                           ;incstack = 0
  3689                           ;lcd_set_cursor@x stored from wreg
  3690  00161E  6E1E               	movwf	lcd_set_cursor@x,c
  3691                           
  3692                           ;lcd.c: 93: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3693  001620  0E80               	movlw	128
  3694  001622  ECA5  F00B         	call	_lcdInst
  3695  001626  0E41               	movlw	65
  3696  001628  6E1C               	movwf	??_lcd_set_cursor& (0+255),c
  3697  00162A  0EEE               	movlw	238
  3698  00162C                     u3757:
  3699  00162C  2EE8               	decfsz	wreg,f,c
  3700  00162E  D7FE               	bra	u3757
  3701  001630  2E1C               	decfsz	??_lcd_set_cursor& (0+255),f,c
  3702  001632  D7FC               	bra	u3757
  3703  001634  D000               	nop2	
  3704                           
  3705                           ;lcd.c: 94: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  3706  001636  0E00               	movlw	0
  3707  001638  6E1D               	movwf	lcd_set_cursor@i,c
  3708  00163A  D004               	goto	l114
  3709  00163C  0EC0               	movlw	192
  3710  00163E  ECA5  F00B         	call	_lcdInst
  3711  001642  2A1D               	incf	lcd_set_cursor@i,f,c
  3712  001644                     l114:
  3713  001644  501B               	movf	lcd_set_cursor@y,w,c
  3714  001646  5C1D               	subwf	lcd_set_cursor@i,w,c
  3715  001648  A0D8               	btfss	status,0,c
  3716  00164A  D7F8               	goto	l115
  3717                           
  3718                           ;lcd.c: 95: if(x > 0){
  3719  00164C  501E               	movf	lcd_set_cursor@x,w,c
  3720  00164E  B4D8               	btfsc	status,2,c
  3721  001650  0012               	return	
  3722                           
  3723                           ;lcd.c: 96: lcd_shift_cursor(x, 1);
  3724  001652  0E01               	movlw	1
  3725  001654  6E18               	movwf	lcd_shift_cursor@direction,c
  3726  001656  501E               	movf	lcd_set_cursor@x,w,c
  3727  001658  EC75  F00B         	call	_lcd_shift_cursor
  3728  00165C  0012               	return	
  3729  00165E                     __end_of_lcd_set_cursor:
  3730                           	opt stack 0
  3731                           tblptru	equ	0xFF8
  3732                           tblptrh	equ	0xFF7
  3733                           tblptrl	equ	0xFF6
  3734                           tablat	equ	0xFF5
  3735                           prodh	equ	0xFF4
  3736                           prodl	equ	0xFF3
  3737                           postinc0	equ	0xFEE
  3738                           wreg	equ	0xFE8
  3739                           indf1	equ	0xFE7
  3740                           postdec1	equ	0xFE5
  3741                           plusw1	equ	0xFE3
  3742                           fsr1h	equ	0xFE2
  3743                           fsr1l	equ	0xFE1
  3744                           indf2	equ	0xFDF
  3745                           postinc2	equ	0xFDE
  3746                           postdec2	equ	0xFDD
  3747                           plusw2	equ	0xFDB
  3748                           fsr2h	equ	0xFDA
  3749                           fsr2l	equ	0xFD9
  3750                           status	equ	0xFD8
  3751                           
  3752 ;; *************** function _lcd_shift_cursor *****************
  3753 ;; Defined at:
  3754 ;;		line 100 in file "lcd.c"
  3755 ;; Parameters:    Size  Location     Type
  3756 ;;  numChars        1    wreg     unsigned char 
  3757 ;;  direction       1   23[COMRAM] unsigned char 
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;  numChars        1   24[COMRAM] unsigned char 
  3760 ;;  n               1   25[COMRAM] unsigned char 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3770 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;Total ram usage:        3 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    3
  3777 ;; This function calls:
  3778 ;;		_lcdInst
  3779 ;; This function is called by:
  3780 ;;		_lcd_set_cursor
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	text13
  3785  0016EA                     __ptext13:
  3786                           	opt stack 0
  3787  0016EA                     _lcd_shift_cursor:
  3788                           	opt stack 24
  3789                           
  3790                           ;incstack = 0
  3791                           ;lcd_shift_cursor@numChars stored from wreg
  3792  0016EA  6E19               	movwf	lcd_shift_cursor@numChars,c
  3793                           
  3794                           ;lcd.c: 112: for(unsigned char n = numChars; n > 0; n--){
  3795  0016EC  C019  F01A         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  3796  0016F0                     l3300:
  3797  0016F0  501A               	movf	lcd_shift_cursor@n,w,c
  3798  0016F2  B4D8               	btfsc	status,2,c
  3799  0016F4  0012               	return	
  3800                           
  3801                           ;lcd.c: 113: lcdInst((unsigned char)(0x10 | (direction << 2)));
  3802  0016F6  4418               	rlncf	lcd_shift_cursor@direction,w,c
  3803  0016F8  46E8               	rlncf	wreg,f,c
  3804  0016FA  0BFC               	andlw	252
  3805  0016FC  0910               	iorlw	16
  3806  0016FE  ECA5  F00B         	call	_lcdInst
  3807  001702  061A               	decf	lcd_shift_cursor@n,f,c
  3808  001704  D7F5               	goto	l3300
  3809  001706                     __end_of_lcd_shift_cursor:
  3810                           	opt stack 0
  3811                           tblptru	equ	0xFF8
  3812                           tblptrh	equ	0xFF7
  3813                           tblptrl	equ	0xFF6
  3814                           tablat	equ	0xFF5
  3815                           prodh	equ	0xFF4
  3816                           prodl	equ	0xFF3
  3817                           postinc0	equ	0xFEE
  3818                           wreg	equ	0xFE8
  3819                           indf1	equ	0xFE7
  3820                           postdec1	equ	0xFE5
  3821                           plusw1	equ	0xFE3
  3822                           fsr1h	equ	0xFE2
  3823                           fsr1l	equ	0xFE1
  3824                           indf2	equ	0xFDF
  3825                           postinc2	equ	0xFDE
  3826                           postdec2	equ	0xFDD
  3827                           plusw2	equ	0xFDB
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function _dispRealTime *****************
  3833 ;; Defined at:
  3834 ;;		line 77 in file "standbyInterface.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;		None
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  time            7   64[COMRAM] unsigned char [7]
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  1    wreg      void 
  3841 ;; Registers used:
  3842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;Total ram usage:        9 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    4
  3855 ;; This function calls:
  3856 ;;		_getDateTime
  3857 ;;		_lcdInst
  3858 ;;		_printf
  3859 ;; This function is called by:
  3860 ;;		_getKeyPressed
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text14
  3865  0013F6                     __ptext14:
  3866                           	opt stack 0
  3867  0013F6                     _dispRealTime:
  3868                           	opt stack 24
  3869                           
  3870                           ;standbyInterface.c: 78: unsigned char time [7];
  3871                           ;standbyInterface.c: 79: getDateTime(time);
  3872                           
  3873                           ;incstack = 0
  3874  0013F6  0E41               	movlw	low dispRealTime@time
  3875  0013F8  6E18               	movwf	getDateTime@time,c
  3876  0013FA  0E00               	movlw	high dispRealTime@time
  3877  0013FC  6E19               	movwf	getDateTime@time+1,c
  3878  0013FE  EC5A  F009         	call	_getDateTime	;wreg free
  3879                           
  3880                           ;standbyInterface.c: 82: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3881  001402  0E80               	movlw	128
  3882  001404  ECA5  F00B         	call	_lcdInst
  3883  001408  0E41               	movlw	65
  3884  00140A  6E3F               	movwf	??_dispRealTime& (0+255),c
  3885  00140C  0EEE               	movlw	238
  3886  00140E                     u3767:
  3887  00140E  2EE8               	decfsz	wreg,f,c
  3888  001410  D7FE               	bra	u3767
  3889  001412  2E3F               	decfsz	??_dispRealTime& (0+255),f,c
  3890  001414  D7FC               	bra	u3767
  3891  001416  D000               	nop2	
  3892                           
  3893                           ;standbyInterface.c: 83: printf("%02x/%02x/20%02x %02x:%02x", time[4],time[5],time[6],ti
      +                          me[2],time[1]);
  3894  001418  0EF8               	movlw	low STR_1
  3895  00141A  6E21               	movwf	printf@f,c
  3896  00141C  0EFE               	movlw	high STR_1
  3897  00141E  6E22               	movwf	printf@f+1,c
  3898  001420  C045  F023         	movff	dispRealTime@time+4,?_printf+2
  3899  001424  6A24               	clrf	?_printf+3,c
  3900  001426  C046  F025         	movff	dispRealTime@time+5,?_printf+4
  3901  00142A  6A26               	clrf	?_printf+5,c
  3902  00142C  C047  F027         	movff	dispRealTime@time+6,?_printf+6
  3903  001430  6A28               	clrf	?_printf+7,c
  3904  001432  C043  F029         	movff	dispRealTime@time+2,?_printf+8
  3905  001436  6A2A               	clrf	?_printf+9,c
  3906  001438  C042  F02B         	movff	dispRealTime@time+1,?_printf+10
  3907  00143C  6A2C               	clrf	?_printf+11,c
  3908  00143E  EC09  F000         	call	_printf	;wreg free
  3909                           
  3910                           ;standbyInterface.c: 84: _delay((unsigned long)((115)*(40000000/4000.0)));
  3911  001442  0E06               	movlw	6
  3912  001444  6E40               	movwf	(??_dispRealTime+1)& (0+255),c
  3913  001446  0ED6               	movlw	214
  3914  001448  6E3F               	movwf	??_dispRealTime& (0+255),c
  3915  00144A  0E7C               	movlw	124
  3916  00144C                     u3777:
  3917  00144C  2EE8               	decfsz	wreg,f,c
  3918  00144E  D7FE               	bra	u3777
  3919  001450  2E3F               	decfsz	??_dispRealTime& (0+255),f,c
  3920  001452  D7FC               	bra	u3777
  3921  001454  2E40               	decfsz	(??_dispRealTime+1)& (0+255),f,c
  3922  001456  D7FA               	bra	u3777
  3923  001458  0012               	return		;funcret
  3924  00145A                     __end_of_dispRealTime:
  3925                           	opt stack 0
  3926                           tblptru	equ	0xFF8
  3927                           tblptrh	equ	0xFF7
  3928                           tblptrl	equ	0xFF6
  3929                           tablat	equ	0xFF5
  3930                           prodh	equ	0xFF4
  3931                           prodl	equ	0xFF3
  3932                           postinc0	equ	0xFEE
  3933                           wreg	equ	0xFE8
  3934                           indf1	equ	0xFE7
  3935                           postdec1	equ	0xFE5
  3936                           plusw1	equ	0xFE3
  3937                           fsr1h	equ	0xFE2
  3938                           fsr1l	equ	0xFE1
  3939                           indf2	equ	0xFDF
  3940                           postinc2	equ	0xFDE
  3941                           postdec2	equ	0xFDD
  3942                           plusw2	equ	0xFDB
  3943                           fsr2h	equ	0xFDA
  3944                           fsr2l	equ	0xFD9
  3945                           status	equ	0xFD8
  3946                           
  3947 ;; *************** function _printf *****************
  3948 ;; Defined at:
  3949 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  f               2   32[COMRAM] PTR const unsigned char 
  3952 ;;		 -> STR_18(16), STR_17(15), STR_16(15), STR_15(15), 
  3953 ;;		 -> STR_14(16), STR_13(5), STR_12(9), STR_11(13), 
  3954 ;;		 -> STR_10(16), STR_9(13), STR_8(16), STR_7(11), 
  3955 ;;		 -> STR_6(11), STR_5(15), STR_4(17), STR_3(6), 
  3956 ;;		 -> STR_2(15), STR_1(27), 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  idx             1   48[COMRAM] unsigned char 
  3959 ;;  tmpval          4    0        struct .
  3960 ;;  width           2   59[COMRAM] int 
  3961 ;;  val             2   56[COMRAM] unsigned int 
  3962 ;;  ap              2   54[COMRAM] PTR void [1]
  3963 ;;		 -> ?_printf(2), 
  3964 ;;  len             2   51[COMRAM] unsigned int 
  3965 ;;  cp              2   49[COMRAM] PTR const unsigned char 
  3966 ;;		 -> printf@c(1), 
  3967 ;;  c               1   61[COMRAM] char 
  3968 ;;  flag            1   58[COMRAM] unsigned char 
  3969 ;;  prec            1   53[COMRAM] char 
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  2   32[COMRAM] int 
  3972 ;; Registers used:
  3973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3979 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;Total ram usage:       30 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:    3
  3986 ;; This function calls:
  3987 ;;		___lwdiv
  3988 ;;		___lwmod
  3989 ;;		___wmul
  3990 ;;		_isdigit
  3991 ;;		_putch
  3992 ;; This function is called by:
  3993 ;;		_dispRealTime
  3994 ;;		_errScreen
  3995 ;;		_getInputs
  3996 ;;		_initStandby
  3997 ;;		_showResults
  3998 ;;		_showLogs
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text15
  4003  000012                     __ptext15:
  4004                           	opt stack 0
  4005  000012                     _printf:
  4006                           	opt stack 26
  4007                           
  4008                           ;doprnt.c: 466: va_list ap;
  4009                           ;doprnt.c: 499: signed char c;
  4010                           ;doprnt.c: 501: int width;
  4011                           ;doprnt.c: 506: signed char prec;
  4012                           ;doprnt.c: 508: unsigned char flag;
  4013                           ;doprnt.c: 523: union {
  4014                           ;doprnt.c: 524: unsigned long vd;
  4015                           ;doprnt.c: 525: double integ;
  4016                           ;doprnt.c: 526: } tmpval;
  4017                           ;doprnt.c: 528: unsigned int val;
  4018                           ;doprnt.c: 529: unsigned len;
  4019                           ;doprnt.c: 530: const char * cp;
  4020                           ;doprnt.c: 533: *ap = __va_start();
  4021                           
  4022                           ;incstack = 0
  4023  000012  0E23               	movlw	low (?_printf+2)
  4024  000014  6E37               	movwf	printf@ap,c
  4025  000016  0E00               	movlw	high (?_printf+2)
  4026  000018  6E38               	movwf	printf@ap+1,c
  4027                           
  4028                           ;doprnt.c: 536: while(c = *f++) {
  4029  00001A  D1B8               	goto	u2860
  4030  00001C                     
  4031                           ;doprnt.c: 538: if(c != '%')
  4032  00001C  0E25               	movlw	37
  4033  00001E  183E               	xorwf	printf@c,w,c
  4034  000020  B4D8               	btfsc	status,2,c
  4035  000022  D004               	goto	l427
  4036                           
  4037                           ;doprnt.c: 540: {
  4038                           ;doprnt.c: 541: (putch(c) );
  4039  000024  503E               	movf	printf@c,w,c
  4040  000026  EC9B  F00B         	call	_putch
  4041                           
  4042                           ;doprnt.c: 542: continue;
  4043  00002A  D1B0               	goto	u2860
  4044  00002C                     l427:
  4045                           
  4046                           ;doprnt.c: 543: }
  4047                           ;doprnt.c: 546: width = 0;
  4048  00002C  0E00               	movlw	0
  4049  00002E  6E3D               	movwf	printf@width+1,c
  4050  000030  0E00               	movlw	0
  4051  000032  6E3C               	movwf	printf@width,c
  4052                           
  4053                           ;doprnt.c: 548: flag = 0;
  4054  000034  0E00               	movlw	0
  4055  000036  6E3B               	movwf	printf@flag,c
  4056                           
  4057                           ;doprnt.c: 551: switch(*f) {
  4058                           
  4059                           ;doprnt.c: 550: for(;;) {
  4060  000038  D003               	goto	l429
  4061  00003A                     
  4062                           ;doprnt.c: 580: flag |= 0x04;
  4063  00003A  843B               	bsf	printf@flag,2,c
  4064                           
  4065                           ;doprnt.c: 581: f++;
  4066  00003C  4A21               	infsnz	printf@f,f,c
  4067  00003E  2A22               	incf	printf@f+1,f,c
  4068  000040                     l429:
  4069  000040  C021  FFF6         	movff	printf@f,tblptrl
  4070  000044  C022  FFF7         	movff	printf@f+1,tblptrh
  4071  000048                     	if	0	;tblptru may be non-zero
  4072  000048                     	endif
  4073  000048                     	if	0	;tblptru may be non-zero
  4074  000048                     	endif
  4075  000048  0008               	tblrd		*
  4076  00004A  50F5               	movf	tablat,w,c
  4077                           
  4078                           ; Switch size 1, requested type "space"
  4079                           ; Number of cases is 1, Range of values is 48 to 48
  4080                           ; switch strategies available:
  4081                           ; Name         Instructions Cycles
  4082                           ; simple_byte            4     3 (average)
  4083                           ;	Chosen strategy is simple_byte
  4084  00004C  0A30               	xorlw	48	; case 48
  4085  00004E  B4D8               	btfsc	status,2,c
  4086  000050  D7F4               	goto	l430
  4087                           
  4088                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4089                           
  4090                           ;doprnt.c: 586: }
  4091                           
  4092                           ;doprnt.c: 585: break;
  4093  000052  C021  FFF6         	movff	printf@f,tblptrl
  4094  000056  C022  FFF7         	movff	printf@f+1,tblptrh
  4095  00005A                     	if	0	;tblptru may be non-zero
  4096  00005A                     	endif
  4097  00005A                     	if	0	;tblptru may be non-zero
  4098  00005A                     	endif
  4099  00005A  0008               	tblrd		*
  4100  00005C  50F5               	movf	tablat,w,c
  4101  00005E  EC66  F00B         	call	_isdigit
  4102  000062  A0D8               	btfss	status,0,c
  4103  000064  D076               	goto	l437
  4104                           
  4105                           ;doprnt.c: 598: width = 0;
  4106  000066  0E00               	movlw	0
  4107  000068  6E3D               	movwf	printf@width+1,c
  4108  00006A  0E00               	movlw	0
  4109  00006C  6E3C               	movwf	printf@width,c
  4110  00006E                     
  4111                           ;doprnt.c: 600: width *= 10;
  4112  00006E  C03C  F015         	movff	printf@width,___wmul@multiplier
  4113  000072  C03D  F016         	movff	printf@width+1,___wmul@multiplier+1
  4114  000076  0E00               	movlw	0
  4115  000078  6E18               	movwf	___wmul@multiplicand+1,c
  4116  00007A  0E0A               	movlw	10
  4117  00007C  6E17               	movwf	___wmul@multiplicand,c
  4118  00007E  EC2F  F00B         	call	___wmul	;wreg free
  4119  000082  C015  F03C         	movff	?___wmul,printf@width
  4120  000086  C016  F03D         	movff	?___wmul+1,printf@width+1
  4121                           
  4122                           ;doprnt.c: 601: width += *f++ - '0';
  4123  00008A  0ED0               	movlw	208
  4124  00008C  6E2D               	movwf	??_printf& (0+255),c
  4125  00008E  0EFF               	movlw	255
  4126  000090  6E2E               	movwf	(??_printf+1)& (0+255),c
  4127  000092  C021  FFF6         	movff	printf@f,tblptrl
  4128  000096  C022  FFF7         	movff	printf@f+1,tblptrh
  4129  00009A                     	if	0	;tblptru may be non-zero
  4130  00009A                     	endif
  4131  00009A                     	if	0	;tblptru may be non-zero
  4132  00009A                     	endif
  4133  00009A  0008               	tblrd		*
  4134  00009C  50F5               	movf	tablat,w,c
  4135  00009E  6E2F               	movwf	(??_printf+2)& (0+255),c
  4136  0000A0  6A30               	clrf	(??_printf+3)& (0+255),c
  4137  0000A2  502D               	movf	??_printf,w,c
  4138  0000A4  262F               	addwf	??_printf+2,f,c
  4139  0000A6  502E               	movf	??_printf+1,w,c
  4140  0000A8  2230               	addwfc	??_printf+3,f,c
  4141  0000AA  502F               	movf	??_printf+2,w,c
  4142  0000AC  263C               	addwf	printf@width,f,c
  4143  0000AE  5030               	movf	??_printf+3,w,c
  4144  0000B0  223D               	addwfc	printf@width+1,f,c
  4145  0000B2  4A21               	infsnz	printf@f,f,c
  4146  0000B4  2A22               	incf	printf@f+1,f,c
  4147                           
  4148                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4149  0000B6  C021  FFF6         	movff	printf@f,tblptrl
  4150  0000BA  C022  FFF7         	movff	printf@f+1,tblptrh
  4151  0000BE                     	if	0	;tblptru may be non-zero
  4152  0000BE                     	endif
  4153  0000BE                     	if	0	;tblptru may be non-zero
  4154  0000BE                     	endif
  4155  0000BE  0008               	tblrd		*
  4156  0000C0  50F5               	movf	tablat,w,c
  4157  0000C2  EC66  F00B         	call	_isdigit
  4158  0000C6  A0D8               	btfss	status,0,c
  4159  0000C8  D044               	goto	l437
  4160  0000CA  D7D1               	goto	l435
  4161  0000CC                     
  4162                           ;doprnt.c: 721: flag |= 0x80;
  4163  0000CC  8E3B               	bsf	printf@flag,7,c
  4164                           
  4165                           ;doprnt.c: 723: break;
  4166  0000CE  D05B               	goto	l442
  4167  0000D0                     
  4168                           ;doprnt.c: 757: if(width > len)
  4169  0000D0  503C               	movf	printf@width,w,c
  4170  0000D2  5C34               	subwf	printf@len,w,c
  4171  0000D4  503D               	movf	printf@width+1,w,c
  4172  0000D6  5835               	subwfb	printf@len+1,w,c
  4173  0000D8  B0D8               	btfsc	status,0,c
  4174  0000DA  D005               	goto	l445
  4175                           
  4176                           ;doprnt.c: 758: width -= len;
  4177  0000DC  5034               	movf	printf@len,w,c
  4178  0000DE  5E3C               	subwf	printf@width,f,c
  4179  0000E0  5035               	movf	printf@len+1,w,c
  4180  0000E2  5A3D               	subwfb	printf@width+1,f,c
  4181  0000E4  D008               	goto	l447
  4182  0000E6                     l445:
  4183                           
  4184                           ;doprnt.c: 759: else
  4185                           ;doprnt.c: 760: width = 0;
  4186  0000E6  0E00               	movlw	0
  4187  0000E8  6E3D               	movwf	printf@width+1,c
  4188  0000EA  0E00               	movlw	0
  4189  0000EC  6E3C               	movwf	printf@width,c
  4190                           
  4191                           ;doprnt.c: 764: while(width--)
  4192  0000EE  D003               	goto	l447
  4193  0000F0                     l3344:
  4194                           
  4195                           ;doprnt.c: 765: (putch(' ') );
  4196  0000F0  0E20               	movlw	32
  4197  0000F2  EC9B  F00B         	call	_putch
  4198  0000F6                     l447:
  4199  0000F6  063C               	decf	printf@width,f,c
  4200  0000F8  A0D8               	btfss	status,0,c
  4201  0000FA  063D               	decf	printf@width+1,f,c
  4202  0000FC  283C               	incf	printf@width,w,c
  4203  0000FE  E1F8               	bnz	l3344
  4204  000100  283D               	incf	printf@width+1,w,c
  4205  000102  B4D8               	btfsc	status,2,c
  4206  000104  D00A               	goto	l450
  4207  000106  D7F4               	goto	l448
  4208  000108                     l3348:
  4209                           
  4210                           ;doprnt.c: 768: (putch(*cp++) );
  4211  000108  C032  FFD9         	movff	printf@cp,fsr2l
  4212  00010C  C033  FFDA         	movff	printf@cp+1,fsr2h
  4213  000110  50DF               	movf	indf2,w,c
  4214  000112  EC9B  F00B         	call	_putch
  4215  000116  4A32               	infsnz	printf@cp,f,c
  4216  000118  2A33               	incf	printf@cp+1,f,c
  4217  00011A                     l450:
  4218  00011A  0634               	decf	printf@len,f,c
  4219  00011C  A0D8               	btfss	status,0,c
  4220  00011E  0635               	decf	printf@len+1,f,c
  4221  000120  2834               	incf	printf@len,w,c
  4222  000122  E1F2               	bnz	l3348
  4223  000124  2835               	incf	printf@len+1,w,c
  4224  000126  B4D8               	btfsc	status,2,c
  4225  000128  D131               	goto	u2860
  4226  00012A  D7EE               	goto	l451
  4227  00012C                     
  4228                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4229  00012C  C037  FFD9         	movff	printf@ap,fsr2l
  4230  000130  C038  FFDA         	movff	printf@ap+1,fsr2h
  4231  000134  50DF               	movf	indf2,w,c
  4232  000136  6E3E               	movwf	printf@c,c
  4233  000138  0E02               	movlw	2
  4234  00013A  2637               	addwf	printf@ap,f,c
  4235  00013C  0E00               	movlw	0
  4236  00013E  2238               	addwfc	printf@ap+1,f,c
  4237  000140                     
  4238                           ;doprnt.c: 805: cp = (char *)&c;
  4239  000140  0E3E               	movlw	low printf@c
  4240  000142  6E32               	movwf	printf@cp,c
  4241  000144  0E00               	movlw	high printf@c
  4242  000146  6E33               	movwf	printf@cp+1,c
  4243                           
  4244                           ;doprnt.c: 806: len = 1;
  4245  000148  0E00               	movlw	0
  4246  00014A  6E35               	movwf	printf@len+1,c
  4247  00014C  0E01               	movlw	1
  4248  00014E  6E34               	movwf	printf@len,c
  4249                           
  4250                           ;doprnt.c: 807: goto dostring;
  4251  000150  D7BF               	goto	l444
  4252  000152                     l437:
  4253  000152  C021  FFF6         	movff	printf@f,tblptrl
  4254  000156  C022  FFF7         	movff	printf@f+1,tblptrh
  4255  00015A  4A21               	infsnz	printf@f,f,c
  4256  00015C  2A22               	incf	printf@f+1,f,c
  4257  00015E                     	if	0	;tblptru may be non-zero
  4258  00015E                     	endif
  4259  00015E                     	if	0	;tblptru may be non-zero
  4260  00015E                     	endif
  4261  00015E  0008               	tblrd		*
  4262  000160  CFF5 F03E          	movff	tablat,printf@c
  4263  000164  503E               	movf	printf@c,w,c
  4264                           
  4265                           ; Switch size 1, requested type "space"
  4266                           ; Number of cases is 5, Range of values is 0 to 120
  4267                           ; switch strategies available:
  4268                           ; Name         Instructions Cycles
  4269                           ; simple_byte           16     9 (average)
  4270                           ;	Chosen strategy is simple_byte
  4271  000166  0A00               	xorlw	0	; case 0
  4272  000168  B4D8               	btfsc	status,2,c
  4273  00016A  0012               	return	
  4274  00016C  0A63               	xorlw	99	; case 99
  4275  00016E  B4D8               	btfsc	status,2,c
  4276  000170  D7DD               	goto	l453
  4277  000172  0A07               	xorlw	7	; case 100
  4278  000174  B4D8               	btfsc	status,2,c
  4279  000176  D007               	goto	l442
  4280  000178  0A0D               	xorlw	13	; case 105
  4281  00017A  B4D8               	btfsc	status,2,c
  4282  00017C  D004               	goto	l442
  4283  00017E  0A11               	xorlw	17	; case 120
  4284  000180  B4D8               	btfsc	status,2,c
  4285  000182  D7A4               	goto	l443
  4286  000184  D7DD               	goto	l454
  4287  000186                     l442:
  4288                           
  4289                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4290  000186  BE3B               	btfsc	printf@flag,7,c
  4291  000188  D015               	goto	l455
  4292                           
  4293                           ;doprnt.c: 1253: {
  4294                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4295  00018A  C037  FFD9         	movff	printf@ap,fsr2l
  4296  00018E  C038  FFDA         	movff	printf@ap+1,fsr2h
  4297  000192  CFDE F039          	movff	postinc2,printf@val
  4298  000196  CFDD F03A          	movff	postdec2,printf@val+1
  4299  00019A  0E02               	movlw	2
  4300  00019C  2637               	addwf	printf@ap,f,c
  4301  00019E  0E00               	movlw	0
  4302  0001A0  2238               	addwfc	printf@ap+1,f,c
  4303                           
  4304                           ;doprnt.c: 1261: if((int)val < 0) {
  4305  0001A2  AE3A               	btfss	printf@val+1,7,c
  4306  0001A4  D044               	goto	l458
  4307                           
  4308                           ;doprnt.c: 1262: flag |= 0x03;
  4309  0001A6  0E03               	movlw	3
  4310  0001A8  123B               	iorwf	printf@flag,f,c
  4311                           
  4312                           ;doprnt.c: 1263: val = -val;
  4313  0001AA  6C39               	negf	printf@val,c
  4314  0001AC  1E3A               	comf	printf@val+1,f,c
  4315  0001AE  B0D8               	btfsc	status,0,c
  4316  0001B0  2A3A               	incf	printf@val+1,f,c
  4317                           
  4318                           ;doprnt.c: 1264: }
  4319                           ;doprnt.c: 1266: }
  4320  0001B2  D03D               	goto	l458
  4321  0001B4                     l455:
  4322                           
  4323                           ;doprnt.c: 1268: else
  4324                           ;doprnt.c: 1273: {
  4325                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4326  0001B4  C037  FFD9         	movff	printf@ap,fsr2l
  4327  0001B8  C038  FFDA         	movff	printf@ap+1,fsr2h
  4328  0001BC  CFDE F039          	movff	postinc2,printf@val
  4329  0001C0  CFDD F03A          	movff	postdec2,printf@val+1
  4330  0001C4  0E02               	movlw	2
  4331  0001C6  2637               	addwf	printf@ap,f,c
  4332  0001C8  0E00               	movlw	0
  4333  0001CA  2238               	addwfc	printf@ap+1,f,c
  4334                           
  4335                           ;doprnt.c: 1287: }
  4336                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4337  0001CC  D030               	goto	l458
  4338  0001CE                     
  4339                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4340  0001CE  0E01               	movlw	1
  4341  0001D0  6E3E               	movwf	printf@c,c
  4342  0001D2                     l3382:
  4343  0001D2  0E05               	movlw	5
  4344  0001D4  183E               	xorwf	printf@c,w,c
  4345  0001D6  B4D8               	btfsc	status,2,c
  4346  0001D8  D032               	goto	l463
  4347                           
  4348                           ;doprnt.c: 1306: if(val < dpowers[c])
  4349  0001DA  503E               	movf	printf@c,w,c
  4350  0001DC  0D02               	mullw	2
  4351  0001DE  0ECC               	movlw	low _dpowers
  4352  0001E0  24F3               	addwf	prodl,w,c
  4353  0001E2  6EF6               	movwf	tblptrl,c
  4354  0001E4  0EFE               	movlw	high _dpowers
  4355  0001E6  20F4               	addwfc	prodh,w,c
  4356  0001E8  6EF7               	movwf	tblptrh,c
  4357  0001EA                     	if	0	;There are less than 3 active tblptr bytes
  4358  0001EA                     	endif
  4359  0001EA  0009               	tblrd		*+
  4360  0001EC  50F5               	movf	tablat,w,c
  4361  0001EE  5C39               	subwf	printf@val,w,c
  4362  0001F0  0009               	tblrd		*+
  4363  0001F2  50F5               	movf	tablat,w,c
  4364  0001F4  583A               	subwfb	printf@val+1,w,c
  4365  0001F6  A0D8               	btfss	status,0,c
  4366  0001F8  D022               	goto	l463
  4367                           
  4368                           ;doprnt.c: 1307: break;
  4369  0001FA  2A3E               	incf	printf@c,f,c
  4370  0001FC  D7EA               	goto	l3382
  4371  0001FE                     
  4372                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4373  0001FE  0E01               	movlw	1
  4374  000200  6E3E               	movwf	printf@c,c
  4375  000202                     l3396:
  4376  000202  0E04               	movlw	4
  4377  000204  183E               	xorwf	printf@c,w,c
  4378  000206  B4D8               	btfsc	status,2,c
  4379  000208  D01A               	goto	l463
  4380                           
  4381                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4382  00020A  503E               	movf	printf@c,w,c
  4383  00020C  0D02               	mullw	2
  4384  00020E  0ED6               	movlw	low _hexpowers
  4385  000210  24F3               	addwf	prodl,w,c
  4386  000212  6EF6               	movwf	tblptrl,c
  4387  000214  0EFE               	movlw	high _hexpowers
  4388  000216  20F4               	addwfc	prodh,w,c
  4389  000218  6EF7               	movwf	tblptrh,c
  4390  00021A                     	if	0	;There are less than 3 active tblptr bytes
  4391  00021A                     	endif
  4392  00021A  0009               	tblrd		*+
  4393  00021C  50F5               	movf	tablat,w,c
  4394  00021E  5C39               	subwf	printf@val,w,c
  4395  000220  0009               	tblrd		*+
  4396  000222  50F5               	movf	tablat,w,c
  4397  000224  583A               	subwfb	printf@val+1,w,c
  4398  000226  A0D8               	btfss	status,0,c
  4399  000228  D00A               	goto	l463
  4400                           
  4401                           ;doprnt.c: 1318: break;
  4402  00022A  2A3E               	incf	printf@c,f,c
  4403  00022C  D7EA               	goto	l3396
  4404  00022E                     l458:
  4405  00022E  503B               	movf	printf@flag,w,c
  4406  000230  0B80               	andlw	128
  4407                           
  4408                           ; Switch size 1, requested type "space"
  4409                           ; Number of cases is 2, Range of values is 0 to 128
  4410                           ; switch strategies available:
  4411                           ; Name         Instructions Cycles
  4412                           ; simple_byte            7     4 (average)
  4413                           ;	Chosen strategy is simple_byte
  4414  000232  0A00               	xorlw	0	; case 0
  4415  000234  B4D8               	btfsc	status,2,c
  4416  000236  D7CB               	goto	l459
  4417  000238  0A80               	xorlw	128	; case 128
  4418  00023A  B4D8               	btfsc	status,2,c
  4419  00023C  D7E0               	goto	l464
  4420  00023E                     l463:
  4421                           
  4422                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4423  00023E  503C               	movf	printf@width,w,c
  4424  000240  103D               	iorwf	printf@width+1,w,c
  4425  000242  B4D8               	btfsc	status,2,c
  4426  000244  D009               	goto	l468
  4427  000246  C03B  F02D         	movff	printf@flag,??_printf
  4428  00024A  0E03               	movlw	3
  4429  00024C  162D               	andwf	??_printf,f,c
  4430  00024E  B4D8               	btfsc	status,2,c
  4431  000250  D003               	goto	l468
  4432                           
  4433                           ;doprnt.c: 1346: width--;
  4434  000252  063C               	decf	printf@width,f,c
  4435  000254  A0D8               	btfss	status,0,c
  4436  000256  063D               	decf	printf@width+1,f,c
  4437  000258                     l468:
  4438                           
  4439                           ;doprnt.c: 1381: if(width > c)
  4440  000258  0E80               	movlw	128
  4441  00025A  BE3E               	btfsc	printf@c,7,c
  4442  00025C  0E7F               	movlw	127
  4443  00025E  6E2D               	movwf	??_printf& (0+255),c
  4444  000260  503C               	movf	printf@width,w,c
  4445  000262  5C3E               	subwf	printf@c,w,c
  4446  000264  503D               	movf	printf@width+1,w,c
  4447  000266  0A80               	xorlw	128
  4448  000268  582D               	subwfb	??_printf& (0+255),w,c
  4449  00026A  B0D8               	btfsc	status,0,c
  4450  00026C  D007               	goto	l469
  4451                           
  4452                           ;doprnt.c: 1382: width -= c;
  4453  00026E  503E               	movf	printf@c,w,c
  4454  000270  5E3C               	subwf	printf@width,f,c
  4455  000272  0E00               	movlw	0
  4456  000274  BE3E               	btfsc	printf@c,7,c
  4457  000276  0EFF               	movlw	255
  4458  000278  5A3D               	subwfb	printf@width+1,f,c
  4459  00027A  D004               	goto	l470
  4460  00027C                     l469:
  4461                           
  4462                           ;doprnt.c: 1383: else
  4463                           ;doprnt.c: 1384: width = 0;
  4464  00027C  0E00               	movlw	0
  4465  00027E  6E3D               	movwf	printf@width+1,c
  4466  000280  0E00               	movlw	0
  4467  000282  6E3C               	movwf	printf@width,c
  4468  000284                     l470:
  4469                           
  4470                           ;doprnt.c: 1387: if(flag & 0x04) {
  4471  000284  A43B               	btfss	printf@flag,2,c
  4472  000286  D014               	goto	l471
  4473                           
  4474                           ;doprnt.c: 1392: if(flag & 0x03)
  4475  000288  C03B  F02D         	movff	printf@flag,??_printf
  4476  00028C  0E03               	movlw	3
  4477  00028E  162D               	andwf	??_printf,f,c
  4478  000290  B4D8               	btfsc	status,2,c
  4479  000292  D003               	goto	l472
  4480                           
  4481                           ;doprnt.c: 1393: (putch('-') );
  4482  000294  0E2D               	movlw	45
  4483  000296  EC9B  F00B         	call	_putch
  4484  00029A                     l472:
  4485                           
  4486                           ;doprnt.c: 1415: if(width)
  4487  00029A  503C               	movf	printf@width,w,c
  4488  00029C  103D               	iorwf	printf@width+1,w,c
  4489  00029E  B4D8               	btfsc	status,2,c
  4490  0002A0  D01E               	goto	l480
  4491                           
  4492                           ;doprnt.c: 1417: (putch('0') );
  4493                           
  4494                           ;doprnt.c: 1416: do
  4495  0002A2  0E30               	movlw	48
  4496  0002A4  EC9B  F00B         	call	_putch
  4497                           
  4498                           ;doprnt.c: 1418: while(--width);
  4499  0002A8  063C               	decf	printf@width,f,c
  4500  0002AA  A0D8               	btfss	status,0,c
  4501  0002AC  063D               	decf	printf@width+1,f,c
  4502  0002AE  D7F5               	goto	l472
  4503  0002B0                     l471:
  4504                           
  4505                           ;doprnt.c: 1422: {
  4506                           ;doprnt.c: 1424: if(width
  4507                           ;doprnt.c: 1428: )
  4508  0002B0  503C               	movf	printf@width,w,c
  4509  0002B2  103D               	iorwf	printf@width+1,w,c
  4510  0002B4  B4D8               	btfsc	status,2,c
  4511  0002B6  D00A               	goto	u2840
  4512  0002B8                     u2830:
  4513                           
  4514                           ;doprnt.c: 1430: (putch(' ') );
  4515                           
  4516                           ;doprnt.c: 1429: do
  4517  0002B8  0E20               	movlw	32
  4518  0002BA  EC9B  F00B         	call	_putch
  4519                           
  4520                           ;doprnt.c: 1431: while(--width);
  4521  0002BE  063C               	decf	printf@width,f,c
  4522  0002C0  A0D8               	btfss	status,0,c
  4523  0002C2  063D               	decf	printf@width+1,f,c
  4524  0002C4  503C               	movf	printf@width,w,c
  4525  0002C6  103D               	iorwf	printf@width+1,w,c
  4526  0002C8  A4D8               	btfss	status,2,c
  4527  0002CA  D7F6               	goto	u2830
  4528  0002CC                     u2840:
  4529                           
  4530                           ;doprnt.c: 1438: if(flag & 0x03)
  4531  0002CC  C03B  F02D         	movff	printf@flag,??_printf
  4532  0002D0  0E03               	movlw	3
  4533  0002D2  162D               	andwf	??_printf,f,c
  4534  0002D4  B4D8               	btfsc	status,2,c
  4535  0002D6  D003               	goto	l480
  4536                           
  4537                           ;doprnt.c: 1439: (putch('-') );
  4538  0002D8  0E2D               	movlw	45
  4539  0002DA  EC9B  F00B         	call	_putch
  4540  0002DE                     l480:
  4541                           
  4542                           ;doprnt.c: 1469: }
  4543                           ;doprnt.c: 1472: prec = c;
  4544  0002DE  C03E  F036         	movff	printf@c,printf@prec
  4545                           
  4546                           ;doprnt.c: 1474: while(prec--) {
  4547  0002E2  D050               	goto	l481
  4548  0002E4                     
  4549                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4550  0002E4  5036               	movf	printf@prec,w,c
  4551  0002E6  0D02               	mullw	2
  4552  0002E8  0ECC               	movlw	low _dpowers
  4553  0002EA  24F3               	addwf	prodl,w,c
  4554  0002EC  6EF6               	movwf	tblptrl,c
  4555  0002EE  0EFE               	movlw	high _dpowers
  4556  0002F0  20F4               	addwfc	prodh,w,c
  4557  0002F2  6EF7               	movwf	tblptrh,c
  4558  0002F4                     	if	0	;There are less than 3 active tblptr bytes
  4559  0002F4                     	endif
  4560  0002F4  0009               	tblrd		*+
  4561  0002F6  CFF5 F017          	movff	tablat,___lwdiv@divisor
  4562  0002FA  000A               	tblrd		*-
  4563  0002FC  CFF5 F018          	movff	tablat,___lwdiv@divisor+1
  4564  000300  C039  F015         	movff	printf@val,___lwdiv@dividend
  4565  000304  C03A  F016         	movff	printf@val+1,___lwdiv@dividend+1
  4566  000308  EC5B  F00A         	call	___lwdiv	;wreg free
  4567  00030C  C015  F01C         	movff	?___lwdiv,___lwmod@dividend
  4568  000310  C016  F01D         	movff	?___lwdiv+1,___lwmod@dividend+1
  4569  000314  0E00               	movlw	0
  4570  000316  6E1F               	movwf	___lwmod@divisor+1,c
  4571  000318  0E0A               	movlw	10
  4572  00031A  6E1E               	movwf	___lwmod@divisor,c
  4573  00031C  ECEE  F00A         	call	___lwmod	;wreg free
  4574  000320  501C               	movf	?___lwmod,w,c
  4575  000322  0F30               	addlw	48
  4576  000324  6E3E               	movwf	printf@c,c
  4577                           
  4578                           ;doprnt.c: 1491: break;
  4579  000326  D02B               	goto	l485
  4580  000328                     
  4581                           ;doprnt.c: 1499: {
  4582                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4583  000328  C039  F015         	movff	printf@val,___lwdiv@dividend
  4584  00032C  C03A  F016         	movff	printf@val+1,___lwdiv@dividend+1
  4585  000330  5036               	movf	printf@prec,w,c
  4586  000332  0D02               	mullw	2
  4587  000334  0ED6               	movlw	low _hexpowers
  4588  000336  24F3               	addwf	prodl,w,c
  4589  000338  6EF6               	movwf	tblptrl,c
  4590  00033A  0EFE               	movlw	high _hexpowers
  4591  00033C  20F4               	addwfc	prodh,w,c
  4592  00033E  6EF7               	movwf	tblptrh,c
  4593  000340                     	if	0	;There are less than 3 active tblptr bytes
  4594  000340                     	endif
  4595  000340  0009               	tblrd		*+
  4596  000342  CFF5 F017          	movff	tablat,___lwdiv@divisor
  4597  000346  000A               	tblrd		*-
  4598  000348  CFF5 F018          	movff	tablat,___lwdiv@divisor+1
  4599  00034C  EC5B  F00A         	call	___lwdiv	;wreg free
  4600  000350  5015               	movf	?___lwdiv,w,c
  4601  000352  0B0F               	andlw	15
  4602  000354  6E31               	movwf	printf@idx,c
  4603                           
  4604                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4605  000356  5031               	movf	printf@idx,w,c
  4606  000358  0D01               	mullw	1
  4607  00035A  0E13               	movlw	low STR_19
  4608  00035C  24F3               	addwf	prodl,w,c
  4609  00035E  6EF6               	movwf	tblptrl,c
  4610  000360  0EFF               	movlw	high STR_19
  4611  000362  20F4               	addwfc	prodh,w,c
  4612  000364  6EF7               	movwf	tblptrh,c
  4613  000366                     	if	0	;There are less than 3 active tblptr bytes
  4614  000366                     	endif
  4615  000366  0008               	tblrd		*
  4616  000368  CFF5 F03E          	movff	tablat,printf@c
  4617                           
  4618                           ;doprnt.c: 1523: }
  4619                           
  4620                           ;doprnt.c: 1508: }
  4621                           ;doprnt.c: 1510: break;
  4622  00036C  D008               	goto	l485
  4623  00036E  503B               	movf	printf@flag,w,c
  4624  000370  0B80               	andlw	128
  4625                           
  4626                           ; Switch size 1, requested type "space"
  4627                           ; Number of cases is 2, Range of values is 0 to 128
  4628                           ; switch strategies available:
  4629                           ; Name         Instructions Cycles
  4630                           ; simple_byte            7     4 (average)
  4631                           ;	Chosen strategy is simple_byte
  4632  000372  0A00               	xorlw	0	; case 0
  4633  000374  B4D8               	btfsc	status,2,c
  4634  000376  D7B6               	goto	l484
  4635  000378  0A80               	xorlw	128	; case 128
  4636  00037A  B4D8               	btfsc	status,2,c
  4637  00037C  D7D5               	goto	l486
  4638  00037E                     l485:
  4639                           
  4640                           ;doprnt.c: 1524: (putch(c) );
  4641  00037E  503E               	movf	printf@c,w,c
  4642  000380  EC9B  F00B         	call	_putch
  4643  000384                     l481:
  4644  000384  0636               	decf	printf@prec,f,c
  4645  000386  2836               	incf	printf@prec,w,c
  4646  000388  A4D8               	btfss	status,2,c
  4647  00038A  D7F1               	goto	l483
  4648  00038C                     u2860:
  4649  00038C  C021  FFF6         	movff	printf@f,tblptrl
  4650  000390  C022  FFF7         	movff	printf@f+1,tblptrh
  4651  000394  4A21               	infsnz	printf@f,f,c
  4652  000396  2A22               	incf	printf@f+1,f,c
  4653  000398                     	if	0	;tblptru may be non-zero
  4654  000398                     	endif
  4655  000398                     	if	0	;tblptru may be non-zero
  4656  000398                     	endif
  4657  000398  0008               	tblrd		*
  4658  00039A  CFF5 F03E          	movff	tablat,printf@c
  4659  00039E  503E               	movf	printf@c,w,c
  4660  0003A0  B4D8               	btfsc	status,2,c
  4661  0003A2  0012               	return	
  4662  0003A4  D63B               	goto	l426
  4663  0003A6                     __end_of_printf:
  4664                           	opt stack 0
  4665                           tblptru	equ	0xFF8
  4666                           tblptrh	equ	0xFF7
  4667                           tblptrl	equ	0xFF6
  4668                           tablat	equ	0xFF5
  4669                           prodh	equ	0xFF4
  4670                           prodl	equ	0xFF3
  4671                           postinc0	equ	0xFEE
  4672                           wreg	equ	0xFE8
  4673                           indf1	equ	0xFE7
  4674                           postdec1	equ	0xFE5
  4675                           plusw1	equ	0xFE3
  4676                           fsr1h	equ	0xFE2
  4677                           fsr1l	equ	0xFE1
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           plusw2	equ	0xFDB
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _putch *****************
  4687 ;; Defined at:
  4688 ;;		line 27 in file "lcd.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  data            1    wreg     unsigned char 
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  data            1   22[COMRAM] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      void 
  4695 ;; Registers used:
  4696 ;;		wreg, status,2, status,0, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;Total ram usage:        1 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    2
  4709 ;; This function calls:
  4710 ;;		_lcdNibble
  4711 ;; This function is called by:
  4712 ;;		_getInputs
  4713 ;;		_showResults
  4714 ;;		_printf
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           	psect	text16
  4719  001736                     __ptext16:
  4720                           	opt stack 0
  4721  001736                     _putch:
  4722                           	opt stack 27
  4723                           
  4724                           ;incstack = 0
  4725                           ;putch@data stored from wreg
  4726  001736  6E17               	movwf	putch@data,c
  4727                           
  4728                           ;lcd.c: 35: LATDbits.LATD2 = 1;
  4729  001738  848C               	bsf	3980,2,c	;volatile
  4730                           
  4731                           ;lcd.c: 36: lcdNibble(data);
  4732  00173A  5017               	movf	putch@data,w,c
  4733  00173C  EC1B  F009         	call	_lcdNibble
  4734                           
  4735                           ;lcd.c: 37: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4736  001740  0EC8               	movlw	200
  4737  001742                     u3787:
  4738  001742  D000               	nop2	
  4739  001744  2EE8               	decfsz	wreg,f,c
  4740  001746  D7FD               	bra	u3787
  4741  001748  0012               	return		;funcret
  4742  00174A                     __end_of_putch:
  4743                           	opt stack 0
  4744                           tblptru	equ	0xFF8
  4745                           tblptrh	equ	0xFF7
  4746                           tblptrl	equ	0xFF6
  4747                           tablat	equ	0xFF5
  4748                           prodh	equ	0xFF4
  4749                           prodl	equ	0xFF3
  4750                           postinc0	equ	0xFEE
  4751                           wreg	equ	0xFE8
  4752                           indf1	equ	0xFE7
  4753                           postdec1	equ	0xFE5
  4754                           plusw1	equ	0xFE3
  4755                           fsr1h	equ	0xFE2
  4756                           fsr1l	equ	0xFE1
  4757                           indf2	equ	0xFDF
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           plusw2	equ	0xFDB
  4761                           fsr2h	equ	0xFDA
  4762                           fsr2l	equ	0xFD9
  4763                           status	equ	0xFD8
  4764                           
  4765 ;; *************** function _isdigit *****************
  4766 ;; Defined at:
  4767 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;  c               1    wreg     unsigned char 
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  c               1   22[COMRAM] unsigned char 
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, status,2, status,0
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;Total ram usage:        3 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    1
  4788 ;; This function calls:
  4789 ;;		Nothing
  4790 ;; This function is called by:
  4791 ;;		_printf
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text17
  4796  0016CC                     __ptext17:
  4797                           	opt stack 0
  4798  0016CC                     _isdigit:
  4799                           	opt stack 27
  4800                           
  4801                           ;incstack = 0
  4802                           ;isdigit@c stored from wreg
  4803  0016CC  6E17               	movwf	isdigit@c,c
  4804  0016CE  0E00               	movlw	0
  4805  0016D0  6E16               	movwf	_isdigit$898,c
  4806  0016D2  0E3A               	movlw	58
  4807  0016D4  6017               	cpfslt	isdigit@c,c
  4808  0016D6  D005               	goto	l819
  4809  0016D8  0E2F               	movlw	47
  4810  0016DA  6417               	cpfsgt	isdigit@c,c
  4811  0016DC  D002               	goto	l819
  4812  0016DE  0E01               	movlw	1
  4813  0016E0  6E16               	movwf	_isdigit$898,c
  4814  0016E2                     l819:
  4815  0016E2  C016  F015         	movff	_isdigit$898,??_isdigit
  4816  0016E6  3015               	rrcf	??_isdigit,w,c
  4817  0016E8  0012               	return	
  4818  0016EA                     __end_of_isdigit:
  4819                           	opt stack 0
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           postinc0	equ	0xFEE
  4827                           wreg	equ	0xFE8
  4828                           indf1	equ	0xFE7
  4829                           postdec1	equ	0xFE5
  4830                           plusw1	equ	0xFE3
  4831                           fsr1h	equ	0xFE2
  4832                           fsr1l	equ	0xFE1
  4833                           indf2	equ	0xFDF
  4834                           postinc2	equ	0xFDE
  4835                           postdec2	equ	0xFDD
  4836                           plusw2	equ	0xFDB
  4837                           fsr2h	equ	0xFDA
  4838                           fsr2l	equ	0xFD9
  4839                           status	equ	0xFD8
  4840                           
  4841 ;; *************** function ___lwmod *****************
  4842 ;; Defined at:
  4843 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  dividend        2   27[COMRAM] unsigned int 
  4846 ;;  divisor         2   29[COMRAM] unsigned int 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  counter         1   31[COMRAM] unsigned char 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  2   27[COMRAM] unsigned int 
  4851 ;; Registers used:
  4852 ;;		wreg, status,2, status,0
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4858 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;Total ram usage:        5 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    1
  4865 ;; This function calls:
  4866 ;;		Nothing
  4867 ;; This function is called by:
  4868 ;;		_printf
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text18
  4873  0015DC                     __ptext18:
  4874                           	opt stack 0
  4875  0015DC                     ___lwmod:
  4876                           	opt stack 27
  4877                           
  4878                           ;incstack = 0
  4879  0015DC  501E               	movf	___lwmod@divisor,w,c
  4880  0015DE  101F               	iorwf	___lwmod@divisor+1,w,c
  4881  0015E0  B4D8               	btfsc	status,2,c
  4882  0015E2  D018               	goto	l913
  4883  0015E4  0E01               	movlw	1
  4884  0015E6  6E20               	movwf	___lwmod@counter,c
  4885  0015E8  D004               	goto	l908
  4886  0015EA  90D8               	bcf	status,0,c
  4887  0015EC  361E               	rlcf	___lwmod@divisor,f,c
  4888  0015EE  361F               	rlcf	___lwmod@divisor+1,f,c
  4889  0015F0  2A20               	incf	___lwmod@counter,f,c
  4890  0015F2                     l908:
  4891  0015F2  AE1F               	btfss	___lwmod@divisor+1,7,c
  4892  0015F4  D7FA               	goto	l909
  4893  0015F6                     u2560:
  4894  0015F6  501E               	movf	___lwmod@divisor,w,c
  4895  0015F8  5C1C               	subwf	___lwmod@dividend,w,c
  4896  0015FA  501F               	movf	___lwmod@divisor+1,w,c
  4897  0015FC  581D               	subwfb	___lwmod@dividend+1,w,c
  4898  0015FE  A0D8               	btfss	status,0,c
  4899  001600  D004               	goto	l912
  4900  001602  501E               	movf	___lwmod@divisor,w,c
  4901  001604  5E1C               	subwf	___lwmod@dividend,f,c
  4902  001606  501F               	movf	___lwmod@divisor+1,w,c
  4903  001608  5A1D               	subwfb	___lwmod@dividend+1,f,c
  4904  00160A                     l912:
  4905  00160A  90D8               	bcf	status,0,c
  4906  00160C  321F               	rrcf	___lwmod@divisor+1,f,c
  4907  00160E  321E               	rrcf	___lwmod@divisor,f,c
  4908  001610  2E20               	decfsz	___lwmod@counter,f,c
  4909  001612  D7F1               	goto	u2560
  4910  001614                     l913:
  4911  001614  C01C  F01C         	movff	___lwmod@dividend,?___lwmod
  4912  001618  C01D  F01D         	movff	___lwmod@dividend+1,?___lwmod+1
  4913  00161C  0012               	return		;funcret
  4914  00161E                     __end_of___lwmod:
  4915                           	opt stack 0
  4916                           tblptru	equ	0xFF8
  4917                           tblptrh	equ	0xFF7
  4918                           tblptrl	equ	0xFF6
  4919                           tablat	equ	0xFF5
  4920                           prodh	equ	0xFF4
  4921                           prodl	equ	0xFF3
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           indf1	equ	0xFE7
  4925                           postdec1	equ	0xFE5
  4926                           plusw1	equ	0xFE3
  4927                           fsr1h	equ	0xFE2
  4928                           fsr1l	equ	0xFE1
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           postdec2	equ	0xFDD
  4932                           plusw2	equ	0xFDB
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function ___lwdiv *****************
  4938 ;; Defined at:
  4939 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  dividend        2   20[COMRAM] unsigned int 
  4942 ;;  divisor         2   22[COMRAM] unsigned int 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  quotient        2   25[COMRAM] unsigned int 
  4945 ;;  counter         1   24[COMRAM] unsigned char 
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  2   20[COMRAM] unsigned int 
  4948 ;; Registers used:
  4949 ;;		wreg, status,2, status,0
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4955 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;Total ram usage:        7 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:    1
  4962 ;; This function calls:
  4963 ;;		Nothing
  4964 ;; This function is called by:
  4965 ;;		_printf
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text19
  4970  0014B6                     __ptext19:
  4971                           	opt stack 0
  4972  0014B6                     ___lwdiv:
  4973                           	opt stack 27
  4974                           
  4975                           ;incstack = 0
  4976  0014B6  0E00               	movlw	0
  4977  0014B8  6E1B               	movwf	___lwdiv@quotient+1,c
  4978  0014BA  0E00               	movlw	0
  4979  0014BC  6E1A               	movwf	___lwdiv@quotient,c
  4980  0014BE  5017               	movf	___lwdiv@divisor,w,c
  4981  0014C0  1018               	iorwf	___lwdiv@divisor+1,w,c
  4982  0014C2  B4D8               	btfsc	status,2,c
  4983  0014C4  D01C               	goto	l903
  4984  0014C6  0E01               	movlw	1
  4985  0014C8  6E19               	movwf	___lwdiv@counter,c
  4986  0014CA  D004               	goto	l898
  4987  0014CC  90D8               	bcf	status,0,c
  4988  0014CE  3617               	rlcf	___lwdiv@divisor,f,c
  4989  0014D0  3618               	rlcf	___lwdiv@divisor+1,f,c
  4990  0014D2  2A19               	incf	___lwdiv@counter,f,c
  4991  0014D4                     l898:
  4992  0014D4  AE18               	btfss	___lwdiv@divisor+1,7,c
  4993  0014D6  D7FA               	goto	l899
  4994  0014D8                     u2530:
  4995  0014D8  90D8               	bcf	status,0,c
  4996  0014DA  361A               	rlcf	___lwdiv@quotient,f,c
  4997  0014DC  361B               	rlcf	___lwdiv@quotient+1,f,c
  4998  0014DE  5017               	movf	___lwdiv@divisor,w,c
  4999  0014E0  5C15               	subwf	___lwdiv@dividend,w,c
  5000  0014E2  5018               	movf	___lwdiv@divisor+1,w,c
  5001  0014E4  5816               	subwfb	___lwdiv@dividend+1,w,c
  5002  0014E6  A0D8               	btfss	status,0,c
  5003  0014E8  D005               	goto	l902
  5004  0014EA  5017               	movf	___lwdiv@divisor,w,c
  5005  0014EC  5E15               	subwf	___lwdiv@dividend,f,c
  5006  0014EE  5018               	movf	___lwdiv@divisor+1,w,c
  5007  0014F0  5A16               	subwfb	___lwdiv@dividend+1,f,c
  5008  0014F2  801A               	bsf	___lwdiv@quotient,0,c
  5009  0014F4                     l902:
  5010  0014F4  90D8               	bcf	status,0,c
  5011  0014F6  3218               	rrcf	___lwdiv@divisor+1,f,c
  5012  0014F8  3217               	rrcf	___lwdiv@divisor,f,c
  5013  0014FA  2E19               	decfsz	___lwdiv@counter,f,c
  5014  0014FC  D7ED               	goto	u2530
  5015  0014FE                     l903:
  5016  0014FE  C01A  F015         	movff	___lwdiv@quotient,?___lwdiv
  5017  001502  C01B  F016         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5018  001506  0012               	return		;funcret
  5019  001508                     __end_of___lwdiv:
  5020                           	opt stack 0
  5021                           tblptru	equ	0xFF8
  5022                           tblptrh	equ	0xFF7
  5023                           tblptrl	equ	0xFF6
  5024                           tablat	equ	0xFF5
  5025                           prodh	equ	0xFF4
  5026                           prodl	equ	0xFF3
  5027                           postinc0	equ	0xFEE
  5028                           wreg	equ	0xFE8
  5029                           indf1	equ	0xFE7
  5030                           postdec1	equ	0xFE5
  5031                           plusw1	equ	0xFE3
  5032                           fsr1h	equ	0xFE2
  5033                           fsr1l	equ	0xFE1
  5034                           indf2	equ	0xFDF
  5035                           postinc2	equ	0xFDE
  5036                           postdec2	equ	0xFDD
  5037                           plusw2	equ	0xFDB
  5038                           fsr2h	equ	0xFDA
  5039                           fsr2l	equ	0xFD9
  5040                           status	equ	0xFD8
  5041                           
  5042 ;; *************** function _lcdInst *****************
  5043 ;; Defined at:
  5044 ;;		line 14 in file "lcd.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;  data            1    wreg     unsigned char 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  data            1   22[COMRAM] unsigned char 
  5049 ;; Return value:  Size  Location     Type
  5050 ;;                  1    wreg      void 
  5051 ;; Registers used:
  5052 ;;		wreg, status,2, status,0, cstack
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;Total ram usage:        1 bytes
  5063 ;; Hardware stack levels used:    1
  5064 ;; Hardware stack levels required when called:    2
  5065 ;; This function calls:
  5066 ;;		_lcdNibble
  5067 ;; This function is called by:
  5068 ;;		_initLCD
  5069 ;;		_lcd_set_cursor
  5070 ;;		_lcd_shift_cursor
  5071 ;;		_dispRealTime
  5072 ;;		_errScreen
  5073 ;;		_getInputs
  5074 ;;		_initStandby
  5075 ;;		_showResults
  5076 ;;		_showLogs
  5077 ;;		_lcd_shift_display
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text20
  5082  00174A                     __ptext20:
  5083                           	opt stack 0
  5084  00174A                     _lcdInst:
  5085                           	opt stack 27
  5086                           
  5087                           ;incstack = 0
  5088                           ;lcdInst@data stored from wreg
  5089  00174A  6E17               	movwf	lcdInst@data,c
  5090                           
  5091                           ;lcd.c: 22: LATDbits.LATD2 = 0;
  5092  00174C  948C               	bcf	3980,2,c	;volatile
  5093                           
  5094                           ;lcd.c: 23: lcdNibble(data);
  5095  00174E  5017               	movf	lcdInst@data,w,c
  5096  001750  EC1B  F009         	call	_lcdNibble
  5097                           
  5098                           ;lcd.c: 24: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5099  001754  0EC8               	movlw	200
  5100  001756                     u3797:
  5101  001756  D000               	nop2	
  5102  001758  2EE8               	decfsz	wreg,f,c
  5103  00175A  D7FD               	bra	u3797
  5104  00175C  0012               	return		;funcret
  5105  00175E                     __end_of_lcdInst:
  5106                           	opt stack 0
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           postinc0	equ	0xFEE
  5114                           wreg	equ	0xFE8
  5115                           indf1	equ	0xFE7
  5116                           postdec1	equ	0xFE5
  5117                           plusw1	equ	0xFE3
  5118                           fsr1h	equ	0xFE2
  5119                           fsr1l	equ	0xFE1
  5120                           indf2	equ	0xFDF
  5121                           postinc2	equ	0xFDE
  5122                           postdec2	equ	0xFDD
  5123                           plusw2	equ	0xFDB
  5124                           fsr2h	equ	0xFDA
  5125                           fsr2l	equ	0xFD9
  5126                           status	equ	0xFD8
  5127                           
  5128 ;; *************** function _lcdNibble *****************
  5129 ;; Defined at:
  5130 ;;		line 40 in file "lcd.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  data            1    wreg     unsigned char 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  data            1   21[COMRAM] unsigned char 
  5135 ;;  temp            1   20[COMRAM] unsigned char 
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  1    wreg      void 
  5138 ;; Registers used:
  5139 ;;		wreg, status,2, status,0
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5146 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5148 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;Total ram usage:        2 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:    1
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		_lcdInst
  5156 ;;		_putch
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text21
  5161  001236                     __ptext21:
  5162                           	opt stack 0
  5163  001236                     _lcdNibble:
  5164                           	opt stack 27
  5165                           
  5166                           ;incstack = 0
  5167                           ;lcdNibble@data stored from wreg
  5168  001236  6E16               	movwf	lcdNibble@data,c
  5169                           
  5170                           ;lcd.c: 48: char temp = (unsigned char) (data & 0xF0);
  5171  001238  5016               	movf	lcdNibble@data,w,c
  5172  00123A  0BF0               	andlw	240
  5173  00123C  6E15               	movwf	lcdNibble@temp,c
  5174                           
  5175                           ;lcd.c: 49: LATD = (unsigned char) (LATD & 0x0F);
  5176  00123E  508C               	movf	3980,w,c	;volatile
  5177  001240  0B0F               	andlw	15
  5178  001242  6E8C               	movwf	3980,c	;volatile
  5179                           
  5180                           ;lcd.c: 50: LATD = (unsigned char) (temp | LATD);
  5181  001244  5015               	movf	lcdNibble@temp,w,c
  5182  001246  108C               	iorwf	3980,w,c	;volatile
  5183  001248  6E8C               	movwf	3980,c	;volatile
  5184                           
  5185                           ;lcd.c: 52: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5186  00124A  0E00               	movlw	0
  5187  00124C  BEF2               	btfsc	intcon,7,c	;volatile
  5188  00124E  0E01               	movlw	1
  5189  001250  6E64               	movwf	_LCDinterruptState,c
  5190  001252  9EF2               	bcf	intcon,7,c	;volatile
  5191  001254  868C               	bsf	3980,3,c	;volatile
  5192  001256  0E53               	movlw	83
  5193  001258                     u3807:
  5194  001258  2EE8               	decfsz	wreg,f,c
  5195  00125A  D7FE               	bra	u3807
  5196  00125C  F000               	nop	
  5197  00125E  968C               	bcf	3980,3,c	;volatile
  5198  001260  0EC8               	movlw	200
  5199  001262                     u3817:
  5200  001262  D000               	nop2	
  5201  001264  2EE8               	decfsz	wreg,f,c
  5202  001266  D7FD               	bra	u3817
  5203  001268  B064               	btfsc	_LCDinterruptState,0,c
  5204  00126A  D002               	bra	u2455
  5205  00126C  9EF2               	bcf	intcon,7,c	;volatile
  5206  00126E  D001               	bra	u2456
  5207  001270                     u2455:
  5208  001270  8EF2               	bsf	intcon,7,c	;volatile
  5209  001272                     u2456:
  5210                           
  5211                           ;lcd.c: 55: data = (unsigned char) (data << 4);
  5212  001272  3816               	swapf	lcdNibble@data,w,c
  5213  001274  0BF0               	andlw	240
  5214  001276  6E16               	movwf	lcdNibble@data,c
  5215                           
  5216                           ;lcd.c: 56: temp = (unsigned char) (data & 0xF0);
  5217  001278  5016               	movf	lcdNibble@data,w,c
  5218  00127A  0BF0               	andlw	240
  5219  00127C  6E15               	movwf	lcdNibble@temp,c
  5220                           
  5221                           ;lcd.c: 57: LATD = (unsigned char) (LATD & 0x0F);
  5222  00127E  508C               	movf	3980,w,c	;volatile
  5223  001280  0B0F               	andlw	15
  5224  001282  6E8C               	movwf	3980,c	;volatile
  5225                           
  5226                           ;lcd.c: 58: LATD = (unsigned char) (temp | LATD);
  5227  001284  5015               	movf	lcdNibble@temp,w,c
  5228  001286  108C               	iorwf	3980,w,c	;volatile
  5229  001288  6E8C               	movwf	3980,c	;volatile
  5230                           
  5231                           ;lcd.c: 60: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5232  00128A  0E00               	movlw	0
  5233  00128C  BEF2               	btfsc	intcon,7,c	;volatile
  5234  00128E  0E01               	movlw	1
  5235  001290  6E64               	movwf	_LCDinterruptState,c
  5236  001292  9EF2               	bcf	intcon,7,c	;volatile
  5237  001294  868C               	bsf	3980,3,c	;volatile
  5238  001296  0E53               	movlw	83
  5239  001298                     u3827:
  5240  001298  2EE8               	decfsz	wreg,f,c
  5241  00129A  D7FE               	bra	u3827
  5242  00129C  F000               	nop	
  5243  00129E  968C               	bcf	3980,3,c	;volatile
  5244  0012A0  0EC8               	movlw	200
  5245  0012A2                     u3837:
  5246  0012A2  D000               	nop2	
  5247  0012A4  2EE8               	decfsz	wreg,f,c
  5248  0012A6  D7FD               	bra	u3837
  5249  0012A8  B064               	btfsc	_LCDinterruptState,0,c
  5250  0012AA  D002               	bra	u2465
  5251  0012AC  9EF2               	bcf	intcon,7,c	;volatile
  5252  0012AE  D001               	bra	u2466
  5253  0012B0                     u2465:
  5254  0012B0  8EF2               	bsf	intcon,7,c	;volatile
  5255  0012B2                     u2466:
  5256  0012B2  0012               	return		;funcret
  5257  0012B4                     __end_of_lcdNibble:
  5258                           	opt stack 0
  5259                           tblptru	equ	0xFF8
  5260                           tblptrh	equ	0xFF7
  5261                           tblptrl	equ	0xFF6
  5262                           tablat	equ	0xFF5
  5263                           prodh	equ	0xFF4
  5264                           prodl	equ	0xFF3
  5265                           intcon	equ	0xFF2
  5266                           postinc0	equ	0xFEE
  5267                           wreg	equ	0xFE8
  5268                           indf1	equ	0xFE7
  5269                           postdec1	equ	0xFE5
  5270                           plusw1	equ	0xFE3
  5271                           fsr1h	equ	0xFE2
  5272                           fsr1l	equ	0xFE1
  5273                           indf2	equ	0xFDF
  5274                           postinc2	equ	0xFDE
  5275                           postdec2	equ	0xFDD
  5276                           plusw2	equ	0xFDB
  5277                           fsr2h	equ	0xFDA
  5278                           fsr2l	equ	0xFD9
  5279                           status	equ	0xFD8
  5280                           
  5281 ;; *************** function _getDateTime *****************
  5282 ;; Defined at:
  5283 ;;		line 53 in file "RTC.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  time            2   23[COMRAM] PTR unsigned char 
  5286 ;;		 -> dispRealTime@time(7), getKeyPressed@currTimeTemp(7), getKeyPressed@lastTimeRefresh(7), main@timeEnd(7), 
  5287 ;;		 -> main@timeStart(7), 
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;  i               1   25[COMRAM] unsigned char 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  1    wreg      void 
  5292 ;; Registers used:
  5293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5299 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;Total ram usage:        3 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:    3
  5306 ;; This function calls:
  5307 ;;		_I2C_Master_Read
  5308 ;;		_I2C_Master_Start
  5309 ;;		_I2C_Master_Stop
  5310 ;;		_I2C_Master_Write
  5311 ;; This function is called by:
  5312 ;;		_main
  5313 ;;		_getKeyPressed
  5314 ;;		_dispRealTime
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           	psect	text22
  5319  0012B4                     __ptext22:
  5320                           	opt stack 0
  5321  0012B4                     _getDateTime:
  5322                           	opt stack 25
  5323                           
  5324                           ;RTC.c: 54: unsigned char i;
  5325                           ;RTC.c: 57: I2C_Master_Start();
  5326                           
  5327                           ;incstack = 0
  5328  0012B4  ECC1  F00B         	call	_I2C_Master_Start	;wreg free
  5329                           
  5330                           ;RTC.c: 58: I2C_Master_Write(0b11010000);
  5331  0012B8  0E00               	movlw	0
  5332  0012BA  6E17               	movwf	I2C_Master_Write@byteToWrite+1,c
  5333  0012BC  0ED0               	movlw	208
  5334  0012BE  6E16               	movwf	I2C_Master_Write@byteToWrite,c
  5335  0012C0  ECB8  F00B         	call	_I2C_Master_Write	;wreg free
  5336                           
  5337                           ;RTC.c: 59: I2C_Master_Write(0x00);
  5338  0012C4  0E00               	movlw	0
  5339  0012C6  6E17               	movwf	I2C_Master_Write@byteToWrite+1,c
  5340  0012C8  0E00               	movlw	0
  5341  0012CA  6E16               	movwf	I2C_Master_Write@byteToWrite,c
  5342  0012CC  ECB8  F00B         	call	_I2C_Master_Write	;wreg free
  5343                           
  5344                           ;RTC.c: 60: I2C_Master_Stop();
  5345  0012D0  ECBD  F00B         	call	_I2C_Master_Stop	;wreg free
  5346                           
  5347                           ;RTC.c: 63: I2C_Master_Start();
  5348  0012D4  ECC1  F00B         	call	_I2C_Master_Start	;wreg free
  5349                           
  5350                           ;RTC.c: 64: I2C_Master_Write(0b11010001);
  5351  0012D8  0E00               	movlw	0
  5352  0012DA  6E17               	movwf	I2C_Master_Write@byteToWrite+1,c
  5353  0012DC  0ED1               	movlw	209
  5354  0012DE  6E16               	movwf	I2C_Master_Write@byteToWrite,c
  5355  0012E0  ECB8  F00B         	call	_I2C_Master_Write	;wreg free
  5356                           
  5357                           ;RTC.c: 65: for(i = 0; i < 6; i++){
  5358  0012E4  0E00               	movlw	0
  5359  0012E6  6E1A               	movwf	getDateTime@i,c
  5360  0012E8                     l3284:
  5361  0012E8  0E05               	movlw	5
  5362  0012EA  641A               	cpfsgt	getDateTime@i,c
  5363  0012EC  D001               	goto	l402
  5364  0012EE  D00E               	goto	u2590
  5365  0012F0                     l402:
  5366                           
  5367                           ;RTC.c: 66: time[i] = I2C_Master_Read(0);
  5368  0012F0  501A               	movf	getDateTime@i,w,c
  5369  0012F2  0D01               	mullw	1
  5370  0012F4  50F3               	movf	prodl,w,c
  5371  0012F6  2418               	addwf	getDateTime@time,w,c
  5372  0012F8  6ED9               	movwf	fsr2l,c
  5373  0012FA  50F4               	movf	prodh,w,c
  5374  0012FC  2019               	addwfc	getDateTime@time+1,w,c
  5375  0012FE  6EDA               	movwf	fsr2h,c
  5376  001300  0E00               	movlw	0
  5377  001302  EC42  F00B         	call	_I2C_Master_Read
  5378  001306  6EDF               	movwf	indf2,c
  5379  001308  2A1A               	incf	getDateTime@i,f,c
  5380  00130A  D7EE               	goto	l3284
  5381  00130C                     u2590:
  5382                           
  5383                           ;RTC.c: 67: }
  5384                           ;RTC.c: 68: time[6] = I2C_Master_Read(1);
  5385  00130C  EE20 F006          	lfsr	2,6
  5386  001310  5018               	movf	getDateTime@time,w,c
  5387  001312  26D9               	addwf	fsr2l,f,c
  5388  001314  5019               	movf	getDateTime@time+1,w,c
  5389  001316  22DA               	addwfc	fsr2h,f,c
  5390  001318  0E01               	movlw	1
  5391  00131A  EC42  F00B         	call	_I2C_Master_Read
  5392  00131E  6EDF               	movwf	indf2,c
  5393                           
  5394                           ;RTC.c: 69: I2C_Master_Stop();
  5395  001320  ECBD  F00B         	call	_I2C_Master_Stop	;wreg free
  5396  001324  0012               	return		;funcret
  5397  001326                     __end_of_getDateTime:
  5398                           	opt stack 0
  5399                           tblptru	equ	0xFF8
  5400                           tblptrh	equ	0xFF7
  5401                           tblptrl	equ	0xFF6
  5402                           tablat	equ	0xFF5
  5403                           prodh	equ	0xFF4
  5404                           prodl	equ	0xFF3
  5405                           intcon	equ	0xFF2
  5406                           postinc0	equ	0xFEE
  5407                           wreg	equ	0xFE8
  5408                           indf1	equ	0xFE7
  5409                           postdec1	equ	0xFE5
  5410                           plusw1	equ	0xFE3
  5411                           fsr1h	equ	0xFE2
  5412                           fsr1l	equ	0xFE1
  5413                           indf2	equ	0xFDF
  5414                           postinc2	equ	0xFDE
  5415                           postdec2	equ	0xFDD
  5416                           plusw2	equ	0xFDB
  5417                           fsr2h	equ	0xFDA
  5418                           fsr2l	equ	0xFD9
  5419                           status	equ	0xFD8
  5420                           
  5421 ;; *************** function _I2C_Master_Write *****************
  5422 ;; Defined at:
  5423 ;;		line 108 in file "I2C.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;  byteToWrite     2   21[COMRAM] unsigned int 
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      void 
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;Total ram usage:        2 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    2
  5444 ;; This function calls:
  5445 ;;		_I2C_Master_Wait
  5446 ;; This function is called by:
  5447 ;;		_getDateTime
  5448 ;;		_RTC_setTime
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text23
  5453  001770                     __ptext23:
  5454                           	opt stack 0
  5455  001770                     _I2C_Master_Write:
  5456                           	opt stack 25
  5457                           
  5458                           ;I2C.c: 116: I2C_Master_Wait();
  5459                           
  5460                           ;incstack = 0
  5461  001770  ECAF  F00B         	call	_I2C_Master_Wait	;wreg free
  5462                           
  5463                           ;I2C.c: 117: SSPBUF = byteToWrite;
  5464  001774  C016  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  5465  001778  0012               	return		;funcret
  5466  00177A                     __end_of_I2C_Master_Write:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           intcon	equ	0xFF2
  5475                           postinc0	equ	0xFEE
  5476                           wreg	equ	0xFE8
  5477                           indf1	equ	0xFE7
  5478                           postdec1	equ	0xFE5
  5479                           plusw1	equ	0xFE3
  5480                           fsr1h	equ	0xFE2
  5481                           fsr1l	equ	0xFE1
  5482                           indf2	equ	0xFDF
  5483                           postinc2	equ	0xFDE
  5484                           postdec2	equ	0xFDD
  5485                           plusw2	equ	0xFDB
  5486                           fsr2h	equ	0xFDA
  5487                           fsr2l	equ	0xFD9
  5488                           status	equ	0xFD8
  5489                           
  5490 ;; *************** function _I2C_Master_Stop *****************
  5491 ;; Defined at:
  5492 ;;		line 95 in file "I2C.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;		None
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;		None
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  1    wreg      void 
  5499 ;; Registers used:
  5500 ;;		wreg, status,2, status,0, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;Total ram usage:        0 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    2
  5513 ;; This function calls:
  5514 ;;		_I2C_Master_Wait
  5515 ;; This function is called by:
  5516 ;;		_getDateTime
  5517 ;;		_RTC_setTime
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text24
  5522  00177A                     __ptext24:
  5523                           	opt stack 0
  5524  00177A                     _I2C_Master_Stop:
  5525                           	opt stack 25
  5526                           
  5527                           ;I2C.c: 104: I2C_Master_Wait();
  5528                           
  5529                           ;incstack = 0
  5530  00177A  ECAF  F00B         	call	_I2C_Master_Wait	;wreg free
  5531                           
  5532                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  5533  00177E  84C5               	bsf	4037,2,c	;volatile
  5534  001780  0012               	return		;funcret
  5535  001782                     __end_of_I2C_Master_Stop:
  5536                           	opt stack 0
  5537                           tblptru	equ	0xFF8
  5538                           tblptrh	equ	0xFF7
  5539                           tblptrl	equ	0xFF6
  5540                           tablat	equ	0xFF5
  5541                           prodh	equ	0xFF4
  5542                           prodl	equ	0xFF3
  5543                           intcon	equ	0xFF2
  5544                           postinc0	equ	0xFEE
  5545                           wreg	equ	0xFE8
  5546                           indf1	equ	0xFE7
  5547                           postdec1	equ	0xFE5
  5548                           plusw1	equ	0xFE3
  5549                           fsr1h	equ	0xFE2
  5550                           fsr1l	equ	0xFE1
  5551                           indf2	equ	0xFDF
  5552                           postinc2	equ	0xFDE
  5553                           postdec2	equ	0xFDD
  5554                           plusw2	equ	0xFDB
  5555                           fsr2h	equ	0xFDA
  5556                           fsr2l	equ	0xFD9
  5557                           status	equ	0xFD8
  5558                           
  5559 ;; *************** function _I2C_Master_Start *****************
  5560 ;; Defined at:
  5561 ;;		line 69 in file "I2C.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;		None
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;		None
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  1    wreg      void 
  5568 ;; Registers used:
  5569 ;;		wreg, status,2, status,0, cstack
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;Total ram usage:        0 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    2
  5582 ;; This function calls:
  5583 ;;		_I2C_Master_Wait
  5584 ;; This function is called by:
  5585 ;;		_getDateTime
  5586 ;;		_RTC_setTime
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text25
  5591  001782                     __ptext25:
  5592                           	opt stack 0
  5593  001782                     _I2C_Master_Start:
  5594                           	opt stack 25
  5595                           
  5596                           ;I2C.c: 78: I2C_Master_Wait();
  5597                           
  5598                           ;incstack = 0
  5599  001782  ECAF  F00B         	call	_I2C_Master_Wait	;wreg free
  5600                           
  5601                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  5602  001786  80C5               	bsf	4037,0,c	;volatile
  5603  001788  0012               	return		;funcret
  5604  00178A                     __end_of_I2C_Master_Start:
  5605                           	opt stack 0
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           intcon	equ	0xFF2
  5613                           postinc0	equ	0xFEE
  5614                           wreg	equ	0xFE8
  5615                           indf1	equ	0xFE7
  5616                           postdec1	equ	0xFE5
  5617                           plusw1	equ	0xFE3
  5618                           fsr1h	equ	0xFE2
  5619                           fsr1l	equ	0xFE1
  5620                           indf2	equ	0xFDF
  5621                           postinc2	equ	0xFDE
  5622                           postdec2	equ	0xFDD
  5623                           plusw2	equ	0xFDB
  5624                           fsr2h	equ	0xFDA
  5625                           fsr2l	equ	0xFD9
  5626                           status	equ	0xFD8
  5627                           
  5628 ;; *************** function _I2C_Master_Read *****************
  5629 ;; Defined at:
  5630 ;;		line 120 in file "I2C.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  ackBit          1    wreg     unsigned char 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;  ackBit          1   21[COMRAM] unsigned char 
  5635 ;;  receivedByte    1   22[COMRAM] unsigned char 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  1    wreg      unsigned char 
  5638 ;; Registers used:
  5639 ;;		wreg, status,2, status,0, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;Total ram usage:        2 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:    2
  5652 ;; This function calls:
  5653 ;;		_I2C_Master_Wait
  5654 ;; This function is called by:
  5655 ;;		_getDateTime
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text26
  5660  001684                     __ptext26:
  5661                           	opt stack 0
  5662  001684                     _I2C_Master_Read:
  5663                           	opt stack 25
  5664                           
  5665                           ;incstack = 0
  5666                           ;I2C_Master_Read@ackBit stored from wreg
  5667  001684  6E16               	movwf	I2C_Master_Read@ackBit,c
  5668                           
  5669                           ;I2C.c: 130: unsigned char receivedByte;
  5670                           ;I2C.c: 132: I2C_Master_Wait();
  5671  001686  ECAF  F00B         	call	_I2C_Master_Wait	;wreg free
  5672                           
  5673                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  5674  00168A  86C5               	bsf	4037,3,c	;volatile
  5675                           
  5676                           ;I2C.c: 135: I2C_Master_Wait();
  5677  00168C  ECAF  F00B         	call	_I2C_Master_Wait	;wreg free
  5678                           
  5679                           ;I2C.c: 136: receivedByte = SSPBUF;
  5680  001690  CFC9 F017          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  5681                           
  5682                           ;I2C.c: 138: I2C_Master_Wait();
  5683  001694  ECAF  F00B         	call	_I2C_Master_Wait	;wreg free
  5684                           
  5685                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  5686  001698  B016               	btfsc	I2C_Master_Read@ackBit,0,c
  5687  00169A  D002               	bra	u2495
  5688  00169C  9AC5               	bcf	4037,5,c	;volatile
  5689  00169E  D001               	bra	u2496
  5690  0016A0                     u2495:
  5691  0016A0  8AC5               	bsf	4037,5,c	;volatile
  5692  0016A2                     u2496:
  5693                           
  5694                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  5695  0016A2  88C5               	bsf	4037,4,c	;volatile
  5696                           
  5697                           ;I2C.c: 142: return receivedByte;
  5698  0016A4  5017               	movf	I2C_Master_Read@receivedByte,w,c
  5699  0016A6  0012               	return	
  5700  0016A8                     __end_of_I2C_Master_Read:
  5701                           	opt stack 0
  5702                           tblptru	equ	0xFF8
  5703                           tblptrh	equ	0xFF7
  5704                           tblptrl	equ	0xFF6
  5705                           tablat	equ	0xFF5
  5706                           prodh	equ	0xFF4
  5707                           prodl	equ	0xFF3
  5708                           intcon	equ	0xFF2
  5709                           postinc0	equ	0xFEE
  5710                           wreg	equ	0xFE8
  5711                           indf1	equ	0xFE7
  5712                           postdec1	equ	0xFE5
  5713                           plusw1	equ	0xFE3
  5714                           fsr1h	equ	0xFE2
  5715                           fsr1l	equ	0xFE1
  5716                           indf2	equ	0xFDF
  5717                           postinc2	equ	0xFDE
  5718                           postdec2	equ	0xFDD
  5719                           plusw2	equ	0xFDB
  5720                           fsr2h	equ	0xFDA
  5721                           fsr2l	equ	0xFD9
  5722                           status	equ	0xFD8
  5723                           
  5724 ;; *************** function _I2C_Master_Wait *****************
  5725 ;; Defined at:
  5726 ;;		line 51 in file "I2C.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;		None
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;		None
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  1    wreg      void 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2, status,0
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;Total ram usage:        1 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    1
  5747 ;; This function calls:
  5748 ;;		Nothing
  5749 ;; This function is called by:
  5750 ;;		_I2C_Master_Start
  5751 ;;		_I2C_Master_Stop
  5752 ;;		_I2C_Master_Write
  5753 ;;		_I2C_Master_Read
  5754 ;;		_I2C_Master_RepeatedStart
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           	psect	text27
  5759  00175E                     __ptext27:
  5760                           	opt stack 0
  5761  00175E                     _I2C_Master_Wait:
  5762                           	opt stack 25
  5763                           
  5764                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5765                           
  5766                           ;incstack = 0
  5767  00175E  B4C7               	btfsc	4039,2,c	;volatile
  5768  001760  D7FE               	goto	_I2C_Master_Wait
  5769  001762  CFC5 F015          	movff	4037,??_I2C_Master_Wait	;volatile
  5770  001766  0E1F               	movlw	31
  5771  001768  1615               	andwf	??_I2C_Master_Wait,f,c
  5772  00176A  B4D8               	btfsc	status,2,c
  5773  00176C  0012               	return	
  5774  00176E  D7F7               	goto	_I2C_Master_Wait
  5775  001770                     __end_of_I2C_Master_Wait:
  5776                           	opt stack 0
  5777                           tblptru	equ	0xFF8
  5778                           tblptrh	equ	0xFF7
  5779                           tblptrl	equ	0xFF6
  5780                           tablat	equ	0xFF5
  5781                           prodh	equ	0xFF4
  5782                           prodl	equ	0xFF3
  5783                           intcon	equ	0xFF2
  5784                           postinc0	equ	0xFEE
  5785                           wreg	equ	0xFE8
  5786                           indf1	equ	0xFE7
  5787                           postdec1	equ	0xFE5
  5788                           plusw1	equ	0xFE3
  5789                           fsr1h	equ	0xFE2
  5790                           fsr1l	equ	0xFE1
  5791                           indf2	equ	0xFDF
  5792                           postinc2	equ	0xFDE
  5793                           postdec2	equ	0xFDD
  5794                           plusw2	equ	0xFDB
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function _calcOperationTime *****************
  5800 ;; Defined at:
  5801 ;;		line 16 in file "standbyInterface.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  timeStart       2   26[COMRAM] PTR unsigned char 
  5804 ;;		 -> getKeyPressed@lastTimeRefresh(7), main@timeStart(7), 
  5805 ;;  timeEnd         2   28[COMRAM] PTR unsigned char 
  5806 ;;		 -> getKeyPressed@currTimeTemp(7), main@timeEnd(7), 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;  secEnd          2   44[COMRAM] unsigned short 
  5809 ;;  minEnd          2   42[COMRAM] unsigned short 
  5810 ;;  hourEnd         2   40[COMRAM] unsigned short 
  5811 ;;  secStart        2   38[COMRAM] unsigned short 
  5812 ;;  minStart        2   36[COMRAM] unsigned short 
  5813 ;;  hourStart       2   34[COMRAM] unsigned short 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  2   26[COMRAM] unsigned short 
  5816 ;; Registers used:
  5817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5823 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;Total ram usage:       20 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    2
  5830 ;; This function calls:
  5831 ;;		___wmul
  5832 ;; This function is called by:
  5833 ;;		_main
  5834 ;;		_getKeyPressed
  5835 ;; This function uses a non-reentrant model
  5836 ;;
  5837                           
  5838                           	psect	text28
  5839  00081E                     __ptext28:
  5840                           	opt stack 0
  5841  00081E                     _calcOperationTime:
  5842                           	opt stack 26
  5843                           
  5844                           ;standbyInterface.c: 17: unsigned short int hourStart, minStart, secStart, hourEnd, minE
      +                          nd, secEnd;
  5845                           ;standbyInterface.c: 18: hourStart = (unsigned) ((unsigned)timeStart[2] & 0x0F) + (((uns
      +                          igned)timeStart[2] & 0xF0)>>4)*10;
  5846                           
  5847                           ;incstack = 0
  5848  00081E  EE20 F002          	lfsr	2,2
  5849  000822  501B               	movf	calcOperationTime@timeStart,w,c
  5850  000824  26D9               	addwf	fsr2l,f,c
  5851  000826  501C               	movf	calcOperationTime@timeStart+1,w,c
  5852  000828  22DA               	addwfc	fsr2h,f,c
  5853  00082A  50DF               	movf	indf2,w,c
  5854  00082C  6E1F               	movwf	??_calcOperationTime& (0+255),c
  5855  00082E  3A1F               	swapf	??_calcOperationTime,f,c
  5856  000830  0E0F               	movlw	15
  5857  000832  161F               	andwf	??_calcOperationTime,f,c
  5858  000834  0E0F               	movlw	15
  5859  000836  161F               	andwf	??_calcOperationTime,f,c
  5860  000838  501F               	movf	??_calcOperationTime,w,c
  5861  00083A  0D0A               	mullw	10
  5862  00083C  EE20 F002          	lfsr	2,2
  5863  000840  501B               	movf	calcOperationTime@timeStart,w,c
  5864  000842  26D9               	addwf	fsr2l,f,c
  5865  000844  501C               	movf	calcOperationTime@timeStart+1,w,c
  5866  000846  22DA               	addwfc	fsr2h,f,c
  5867  000848  50DF               	movf	indf2,w,c
  5868  00084A  6E20               	movwf	(??_calcOperationTime+1)& (0+255),c
  5869  00084C  0E0F               	movlw	15
  5870  00084E  1620               	andwf	??_calcOperationTime+1,f,c
  5871  000850  5020               	movf	??_calcOperationTime+1,w,c
  5872  000852  24F3               	addwf	prodl,w,c
  5873  000854  6E23               	movwf	calcOperationTime@hourStart,c
  5874  000856  0E00               	movlw	0
  5875  000858  20F4               	addwfc	prodh,w,c
  5876  00085A  6E24               	movwf	calcOperationTime@hourStart+1,c
  5877                           
  5878                           ;standbyInterface.c: 19: minStart = (unsigned)((unsigned)timeStart[1] & 0x0F) + (((unsig
      +                          ned)timeStart[1] & 0xF0)>>4)*10;
  5879  00085C  EE20 F001          	lfsr	2,1
  5880  000860  501B               	movf	calcOperationTime@timeStart,w,c
  5881  000862  26D9               	addwf	fsr2l,f,c
  5882  000864  501C               	movf	calcOperationTime@timeStart+1,w,c
  5883  000866  22DA               	addwfc	fsr2h,f,c
  5884  000868  50DF               	movf	indf2,w,c
  5885  00086A  6E1F               	movwf	??_calcOperationTime& (0+255),c
  5886  00086C  3A1F               	swapf	??_calcOperationTime,f,c
  5887  00086E  0E0F               	movlw	15
  5888  000870  161F               	andwf	??_calcOperationTime,f,c
  5889  000872  0E0F               	movlw	15
  5890  000874  161F               	andwf	??_calcOperationTime,f,c
  5891  000876  501F               	movf	??_calcOperationTime,w,c
  5892  000878  0D0A               	mullw	10
  5893  00087A  EE20 F001          	lfsr	2,1
  5894  00087E  501B               	movf	calcOperationTime@timeStart,w,c
  5895  000880  26D9               	addwf	fsr2l,f,c
  5896  000882  501C               	movf	calcOperationTime@timeStart+1,w,c
  5897  000884  22DA               	addwfc	fsr2h,f,c
  5898  000886  50DF               	movf	indf2,w,c
  5899  000888  6E20               	movwf	(??_calcOperationTime+1)& (0+255),c
  5900  00088A  0E0F               	movlw	15
  5901  00088C  1620               	andwf	??_calcOperationTime+1,f,c
  5902  00088E  5020               	movf	??_calcOperationTime+1,w,c
  5903  000890  24F3               	addwf	prodl,w,c
  5904  000892  6E25               	movwf	calcOperationTime@minStart,c
  5905  000894  0E00               	movlw	0
  5906  000896  20F4               	addwfc	prodh,w,c
  5907  000898  6E26               	movwf	calcOperationTime@minStart+1,c
  5908                           
  5909                           ;standbyInterface.c: 20: secStart = (unsigned)((unsigned)timeStart[0] & 0x0F) + (((unsig
      +                          ned)timeStart[0] & 0xF0)>>4)*10;
  5910  00089A  C01B  FFD9         	movff	calcOperationTime@timeStart,fsr2l
  5911  00089E  C01C  FFDA         	movff	calcOperationTime@timeStart+1,fsr2h
  5912  0008A2  50DF               	movf	indf2,w,c
  5913  0008A4  6E1F               	movwf	??_calcOperationTime& (0+255),c
  5914  0008A6  3A1F               	swapf	??_calcOperationTime,f,c
  5915  0008A8  0E0F               	movlw	15
  5916  0008AA  161F               	andwf	??_calcOperationTime,f,c
  5917  0008AC  0E0F               	movlw	15
  5918  0008AE  161F               	andwf	??_calcOperationTime,f,c
  5919  0008B0  501F               	movf	??_calcOperationTime,w,c
  5920  0008B2  0D0A               	mullw	10
  5921  0008B4  C01B  FFD9         	movff	calcOperationTime@timeStart,fsr2l
  5922  0008B8  C01C  FFDA         	movff	calcOperationTime@timeStart+1,fsr2h
  5923  0008BC  50DF               	movf	indf2,w,c
  5924  0008BE  6E20               	movwf	(??_calcOperationTime+1)& (0+255),c
  5925  0008C0  0E0F               	movlw	15
  5926  0008C2  1620               	andwf	??_calcOperationTime+1,f,c
  5927  0008C4  5020               	movf	??_calcOperationTime+1,w,c
  5928  0008C6  24F3               	addwf	prodl,w,c
  5929  0008C8  6E27               	movwf	calcOperationTime@secStart,c
  5930  0008CA  0E00               	movlw	0
  5931  0008CC  20F4               	addwfc	prodh,w,c
  5932  0008CE  6E28               	movwf	calcOperationTime@secStart+1,c
  5933                           
  5934                           ;standbyInterface.c: 21: hourEnd = (unsigned)((unsigned)timeEnd[2] & 0x0F) + (((unsigned
      +                          )timeEnd[2] & 0xF0)>>4)*10;
  5935  0008D0  EE20 F002          	lfsr	2,2
  5936  0008D4  501D               	movf	calcOperationTime@timeEnd,w,c
  5937  0008D6  26D9               	addwf	fsr2l,f,c
  5938  0008D8  501E               	movf	calcOperationTime@timeEnd+1,w,c
  5939  0008DA  22DA               	addwfc	fsr2h,f,c
  5940  0008DC  50DF               	movf	indf2,w,c
  5941  0008DE  6E1F               	movwf	??_calcOperationTime& (0+255),c
  5942  0008E0  3A1F               	swapf	??_calcOperationTime,f,c
  5943  0008E2  0E0F               	movlw	15
  5944  0008E4  161F               	andwf	??_calcOperationTime,f,c
  5945  0008E6  0E0F               	movlw	15
  5946  0008E8  161F               	andwf	??_calcOperationTime,f,c
  5947  0008EA  501F               	movf	??_calcOperationTime,w,c
  5948  0008EC  0D0A               	mullw	10
  5949  0008EE  EE20 F002          	lfsr	2,2
  5950  0008F2  501D               	movf	calcOperationTime@timeEnd,w,c
  5951  0008F4  26D9               	addwf	fsr2l,f,c
  5952  0008F6  501E               	movf	calcOperationTime@timeEnd+1,w,c
  5953  0008F8  22DA               	addwfc	fsr2h,f,c
  5954  0008FA  50DF               	movf	indf2,w,c
  5955  0008FC  6E20               	movwf	(??_calcOperationTime+1)& (0+255),c
  5956  0008FE  0E0F               	movlw	15
  5957  000900  1620               	andwf	??_calcOperationTime+1,f,c
  5958  000902  5020               	movf	??_calcOperationTime+1,w,c
  5959  000904  24F3               	addwf	prodl,w,c
  5960  000906  6E29               	movwf	calcOperationTime@hourEnd,c
  5961  000908  0E00               	movlw	0
  5962  00090A  20F4               	addwfc	prodh,w,c
  5963  00090C  6E2A               	movwf	calcOperationTime@hourEnd+1,c
  5964                           
  5965                           ;standbyInterface.c: 22: minEnd = (unsigned)((unsigned)timeEnd[1] & 0x0F) + (((unsigned)
      +                          timeEnd[1] & 0xF0)>>4)*10;
  5966  00090E  EE20 F001          	lfsr	2,1
  5967  000912  501D               	movf	calcOperationTime@timeEnd,w,c
  5968  000914  26D9               	addwf	fsr2l,f,c
  5969  000916  501E               	movf	calcOperationTime@timeEnd+1,w,c
  5970  000918  22DA               	addwfc	fsr2h,f,c
  5971  00091A  50DF               	movf	indf2,w,c
  5972  00091C  6E1F               	movwf	??_calcOperationTime& (0+255),c
  5973  00091E  3A1F               	swapf	??_calcOperationTime,f,c
  5974  000920  0E0F               	movlw	15
  5975  000922  161F               	andwf	??_calcOperationTime,f,c
  5976  000924  0E0F               	movlw	15
  5977  000926  161F               	andwf	??_calcOperationTime,f,c
  5978  000928  501F               	movf	??_calcOperationTime,w,c
  5979  00092A  0D0A               	mullw	10
  5980  00092C  EE20 F001          	lfsr	2,1
  5981  000930  501D               	movf	calcOperationTime@timeEnd,w,c
  5982  000932  26D9               	addwf	fsr2l,f,c
  5983  000934  501E               	movf	calcOperationTime@timeEnd+1,w,c
  5984  000936  22DA               	addwfc	fsr2h,f,c
  5985  000938  50DF               	movf	indf2,w,c
  5986  00093A  6E20               	movwf	(??_calcOperationTime+1)& (0+255),c
  5987  00093C  0E0F               	movlw	15
  5988  00093E  1620               	andwf	??_calcOperationTime+1,f,c
  5989  000940  5020               	movf	??_calcOperationTime+1,w,c
  5990  000942  24F3               	addwf	prodl,w,c
  5991  000944  6E2B               	movwf	calcOperationTime@minEnd,c
  5992  000946  0E00               	movlw	0
  5993  000948  20F4               	addwfc	prodh,w,c
  5994  00094A  6E2C               	movwf	calcOperationTime@minEnd+1,c
  5995                           
  5996                           ;standbyInterface.c: 23: secEnd = (unsigned)((unsigned)timeEnd[0] & 0x0F) + (((unsigned)
      +                          timeEnd[0] & 0xF0)>>4)*10;
  5997  00094C  C01D  FFD9         	movff	calcOperationTime@timeEnd,fsr2l
  5998  000950  C01E  FFDA         	movff	calcOperationTime@timeEnd+1,fsr2h
  5999  000954  50DF               	movf	indf2,w,c
  6000  000956  6E1F               	movwf	??_calcOperationTime& (0+255),c
  6001  000958  3A1F               	swapf	??_calcOperationTime,f,c
  6002  00095A  0E0F               	movlw	15
  6003  00095C  161F               	andwf	??_calcOperationTime,f,c
  6004  00095E  0E0F               	movlw	15
  6005  000960  161F               	andwf	??_calcOperationTime,f,c
  6006  000962  501F               	movf	??_calcOperationTime,w,c
  6007  000964  0D0A               	mullw	10
  6008  000966  C01D  FFD9         	movff	calcOperationTime@timeEnd,fsr2l
  6009  00096A  C01E  FFDA         	movff	calcOperationTime@timeEnd+1,fsr2h
  6010  00096E  50DF               	movf	indf2,w,c
  6011  000970  6E20               	movwf	(??_calcOperationTime+1)& (0+255),c
  6012  000972  0E0F               	movlw	15
  6013  000974  1620               	andwf	??_calcOperationTime+1,f,c
  6014  000976  5020               	movf	??_calcOperationTime+1,w,c
  6015  000978  24F3               	addwf	prodl,w,c
  6016  00097A  6E2D               	movwf	calcOperationTime@secEnd,c
  6017  00097C  0E00               	movlw	0
  6018  00097E  20F4               	addwfc	prodh,w,c
  6019  000980  6E2E               	movwf	calcOperationTime@secEnd+1,c
  6020                           
  6021                           ;standbyInterface.c: 25: return (hourEnd*3600 + minEnd*60 + secEnd) - (hourStart*3600 + 
      +                          minStart*60 + secStart);
  6022  000982  C023  F015         	movff	calcOperationTime@hourStart,___wmul@multiplier
  6023  000986  C024  F016         	movff	calcOperationTime@hourStart+1,___wmul@multiplier+1
  6024  00098A  0E0E               	movlw	14
  6025  00098C  6E18               	movwf	___wmul@multiplicand+1,c
  6026  00098E  0E10               	movlw	16
  6027  000990  6E17               	movwf	___wmul@multiplicand,c
  6028  000992  EC2F  F00B         	call	___wmul	;wreg free
  6029  000996  C015  F01F         	movff	?___wmul,??_calcOperationTime
  6030  00099A  C016  F020         	movff	?___wmul+1,??_calcOperationTime+1
  6031  00099E  C025  F015         	movff	calcOperationTime@minStart,___wmul@multiplier
  6032  0009A2  C026  F016         	movff	calcOperationTime@minStart+1,___wmul@multiplier+1
  6033  0009A6  0E00               	movlw	0
  6034  0009A8  6E18               	movwf	___wmul@multiplicand+1,c
  6035  0009AA  0E3C               	movlw	60
  6036  0009AC  6E17               	movwf	___wmul@multiplicand,c
  6037  0009AE  EC2F  F00B         	call	___wmul	;wreg free
  6038  0009B2  5015               	movf	?___wmul,w,c
  6039  0009B4  261F               	addwf	??_calcOperationTime,f,c
  6040  0009B6  5016               	movf	?___wmul+1,w,c
  6041  0009B8  2220               	addwfc	??_calcOperationTime+1,f,c
  6042  0009BA  5027               	movf	calcOperationTime@secStart,w,c
  6043  0009BC  261F               	addwf	??_calcOperationTime,f,c
  6044  0009BE  5028               	movf	calcOperationTime@secStart+1,w,c
  6045  0009C0  2220               	addwfc	??_calcOperationTime+1,f,c
  6046  0009C2  1E1F               	comf	??_calcOperationTime,f,c
  6047  0009C4  1E20               	comf	??_calcOperationTime+1,f,c
  6048  0009C6  4A1F               	infsnz	??_calcOperationTime,f,c
  6049  0009C8  2A20               	incf	??_calcOperationTime+1,f,c
  6050  0009CA  C029  F015         	movff	calcOperationTime@hourEnd,___wmul@multiplier
  6051  0009CE  C02A  F016         	movff	calcOperationTime@hourEnd+1,___wmul@multiplier+1
  6052  0009D2  0E0E               	movlw	14
  6053  0009D4  6E18               	movwf	___wmul@multiplicand+1,c
  6054  0009D6  0E10               	movlw	16
  6055  0009D8  6E17               	movwf	___wmul@multiplicand,c
  6056  0009DA  EC2F  F00B         	call	___wmul	;wreg free
  6057  0009DE  C015  F021         	movff	?___wmul,??_calcOperationTime+2
  6058  0009E2  C016  F022         	movff	?___wmul+1,??_calcOperationTime+3
  6059  0009E6  C02B  F015         	movff	calcOperationTime@minEnd,___wmul@multiplier
  6060  0009EA  C02C  F016         	movff	calcOperationTime@minEnd+1,___wmul@multiplier+1
  6061  0009EE  0E00               	movlw	0
  6062  0009F0  6E18               	movwf	___wmul@multiplicand+1,c
  6063  0009F2  0E3C               	movlw	60
  6064  0009F4  6E17               	movwf	___wmul@multiplicand,c
  6065  0009F6  EC2F  F00B         	call	___wmul	;wreg free
  6066  0009FA  5015               	movf	?___wmul,w,c
  6067  0009FC  2621               	addwf	??_calcOperationTime+2,f,c
  6068  0009FE  5016               	movf	?___wmul+1,w,c
  6069  000A00  2222               	addwfc	??_calcOperationTime+3,f,c
  6070  000A02  501F               	movf	??_calcOperationTime,w,c
  6071  000A04  2621               	addwf	??_calcOperationTime+2,f,c
  6072  000A06  5020               	movf	??_calcOperationTime+1,w,c
  6073  000A08  2222               	addwfc	??_calcOperationTime+3,f,c
  6074  000A0A  502D               	movf	calcOperationTime@secEnd,w,c
  6075  000A0C  2421               	addwf	??_calcOperationTime+2,w,c
  6076  000A0E  6E1B               	movwf	?_calcOperationTime,c
  6077  000A10  502E               	movf	calcOperationTime@secEnd+1,w,c
  6078  000A12  2022               	addwfc	??_calcOperationTime+3,w,c
  6079  000A14  6E1C               	movwf	?_calcOperationTime+1,c
  6080  000A16  0012               	return	
  6081  000A18                     __end_of_calcOperationTime:
  6082                           	opt stack 0
  6083                           tblptru	equ	0xFF8
  6084                           tblptrh	equ	0xFF7
  6085                           tblptrl	equ	0xFF6
  6086                           tablat	equ	0xFF5
  6087                           prodh	equ	0xFF4
  6088                           prodl	equ	0xFF3
  6089                           intcon	equ	0xFF2
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           indf1	equ	0xFE7
  6093                           postdec1	equ	0xFE5
  6094                           plusw1	equ	0xFE3
  6095                           fsr1h	equ	0xFE2
  6096                           fsr1l	equ	0xFE1
  6097                           indf2	equ	0xFDF
  6098                           postinc2	equ	0xFDE
  6099                           postdec2	equ	0xFDD
  6100                           plusw2	equ	0xFDB
  6101                           fsr2h	equ	0xFDA
  6102                           fsr2l	equ	0xFD9
  6103                           status	equ	0xFD8
  6104                           
  6105 ;; *************** function ___lwtoft *****************
  6106 ;; Defined at:
  6107 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;  c               2   46[COMRAM] unsigned int 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;		None
  6112 ;; Return value:  Size  Location     Type
  6113 ;;                  3   46[COMRAM] float 
  6114 ;; Registers used:
  6115 ;;		wreg, status,2, status,0, cstack
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6121 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6125 ;;Total ram usage:        3 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:    2
  6128 ;; This function calls:
  6129 ;;		___ftpack
  6130 ;; This function is called by:
  6131 ;;		_getKeyPressed
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           	psect	text29
  6136  0016A8                     __ptext29:
  6137                           	opt stack 0
  6138  0016A8                     ___lwtoft:
  6139                           	opt stack 26
  6140                           
  6141                           ;incstack = 0
  6142  0016A8  C02F  F015         	movff	___lwtoft@c,___ftpack@arg
  6143  0016AC  C030  F016         	movff	___lwtoft@c+1,___ftpack@arg+1
  6144  0016B0  6A17               	clrf	___ftpack@arg+2,c
  6145  0016B2  0E8E               	movlw	142
  6146  0016B4  6E18               	movwf	___ftpack@exp,c
  6147  0016B6  0E00               	movlw	0
  6148  0016B8  6E19               	movwf	___ftpack@sign,c
  6149  0016BA  EC3B  F008         	call	___ftpack	;wreg free
  6150  0016BE  C015  F02F         	movff	?___ftpack,?___lwtoft
  6151  0016C2  C016  F030         	movff	?___ftpack+1,?___lwtoft+1
  6152  0016C6  C017  F031         	movff	?___ftpack+2,?___lwtoft+2
  6153  0016CA  0012               	return	
  6154  0016CC                     __end_of___lwtoft:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           intcon	equ	0xFF2
  6163                           postinc0	equ	0xFEE
  6164                           wreg	equ	0xFE8
  6165                           indf1	equ	0xFE7
  6166                           postdec1	equ	0xFE5
  6167                           plusw1	equ	0xFE3
  6168                           fsr1h	equ	0xFE2
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           plusw2	equ	0xFDB
  6174                           fsr2h	equ	0xFDA
  6175                           fsr2l	equ	0xFD9
  6176                           status	equ	0xFD8
  6177                           
  6178 ;; *************** function ___ftpack *****************
  6179 ;; Defined at:
  6180 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;  arg             3   20[COMRAM] unsigned um
  6183 ;;  exp             1   23[COMRAM] unsigned char 
  6184 ;;  sign            1   24[COMRAM] unsigned char 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;		None
  6187 ;; Return value:  Size  Location     Type
  6188 ;;                  3   20[COMRAM] float 
  6189 ;; Registers used:
  6190 ;;		wreg, status,2, status,0
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6196 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6200 ;;Total ram usage:        8 bytes
  6201 ;; Hardware stack levels used:    1
  6202 ;; Hardware stack levels required when called:    1
  6203 ;; This function calls:
  6204 ;;		Nothing
  6205 ;; This function is called by:
  6206 ;;		___lwtoft
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text30
  6211  001076                     __ptext30:
  6212                           	opt stack 0
  6213  001076                     ___ftpack:
  6214                           	opt stack 26
  6215                           
  6216                           ;incstack = 0
  6217  001076  5018               	movf	___ftpack@exp,w,c
  6218  001078  B4D8               	btfsc	status,2,c
  6219  00107A  D005               	goto	u2890
  6220  00107C  5015               	movf	___ftpack@arg,w,c
  6221  00107E  1016               	iorwf	___ftpack@arg+1,w,c
  6222  001080  1017               	iorwf	___ftpack@arg+2,w,c
  6223  001082  A4D8               	btfss	status,2,c
  6224  001084  D00C               	goto	l704
  6225  001086                     u2890:
  6226  001086  0E00               	movlw	0
  6227  001088  6E15               	movwf	?___ftpack,c
  6228  00108A  0E00               	movlw	0
  6229  00108C  6E16               	movwf	?___ftpack+1,c
  6230  00108E  0E00               	movlw	0
  6231  001090  6E17               	movwf	?___ftpack+2,c
  6232  001092  0012               	return	
  6233  001094  2A18               	incf	___ftpack@exp,f,c
  6234  001096  90D8               	bcf	status,0,c
  6235  001098  3217               	rrcf	___ftpack@arg+2,f,c
  6236  00109A  3216               	rrcf	___ftpack@arg+1,f,c
  6237  00109C  3215               	rrcf	___ftpack@arg,f,c
  6238  00109E                     l704:
  6239  00109E  0E00               	movlw	0
  6240  0010A0  1415               	andwf	___ftpack@arg,w,c
  6241  0010A2  6E1A               	movwf	??___ftpack& (0+255),c
  6242  0010A4  0E00               	movlw	0
  6243  0010A6  1416               	andwf	___ftpack@arg+1,w,c
  6244  0010A8  6E1B               	movwf	(??___ftpack+1)& (0+255),c
  6245  0010AA  0EFE               	movlw	254
  6246  0010AC  1417               	andwf	___ftpack@arg+2,w,c
  6247  0010AE  6E1C               	movwf	(??___ftpack+2)& (0+255),c
  6248  0010B0  501A               	movf	??___ftpack,w,c
  6249  0010B2  101B               	iorwf	??___ftpack+1,w,c
  6250  0010B4  101C               	iorwf	??___ftpack+2,w,c
  6251  0010B6  B4D8               	btfsc	status,2,c
  6252  0010B8  D00C               	goto	l707
  6253  0010BA  D7EC               	goto	l705
  6254  0010BC  2A18               	incf	___ftpack@exp,f,c
  6255  0010BE  0E01               	movlw	1
  6256  0010C0  2615               	addwf	___ftpack@arg,f,c
  6257  0010C2  0E00               	movlw	0
  6258  0010C4  2216               	addwfc	___ftpack@arg+1,f,c
  6259  0010C6  0E00               	movlw	0
  6260  0010C8  2217               	addwfc	___ftpack@arg+2,f,c
  6261  0010CA  90D8               	bcf	status,0,c
  6262  0010CC  3217               	rrcf	___ftpack@arg+2,f,c
  6263  0010CE  3216               	rrcf	___ftpack@arg+1,f,c
  6264  0010D0  3215               	rrcf	___ftpack@arg,f,c
  6265  0010D2                     l707:
  6266  0010D2  0E00               	movlw	0
  6267  0010D4  1415               	andwf	___ftpack@arg,w,c
  6268  0010D6  6E1A               	movwf	??___ftpack& (0+255),c
  6269  0010D8  0E00               	movlw	0
  6270  0010DA  1416               	andwf	___ftpack@arg+1,w,c
  6271  0010DC  6E1B               	movwf	(??___ftpack+1)& (0+255),c
  6272  0010DE  0EFF               	movlw	255
  6273  0010E0  1417               	andwf	___ftpack@arg+2,w,c
  6274  0010E2  6E1C               	movwf	(??___ftpack+2)& (0+255),c
  6275  0010E4  501A               	movf	??___ftpack,w,c
  6276  0010E6  101B               	iorwf	??___ftpack+1,w,c
  6277  0010E8  101C               	iorwf	??___ftpack+2,w,c
  6278  0010EA  B4D8               	btfsc	status,2,c
  6279  0010EC  D006               	goto	l710
  6280  0010EE  D7E6               	goto	l708
  6281  0010F0  0618               	decf	___ftpack@exp,f,c
  6282  0010F2  90D8               	bcf	status,0,c
  6283  0010F4  3615               	rlcf	___ftpack@arg,f,c
  6284  0010F6  3616               	rlcf	___ftpack@arg+1,f,c
  6285  0010F8  3617               	rlcf	___ftpack@arg+2,f,c
  6286  0010FA                     l710:
  6287  0010FA  BE16               	btfsc	___ftpack@arg+1,7,c
  6288  0010FC  D003               	goto	u2930
  6289  0010FE  0E02               	movlw	2
  6290  001100  6018               	cpfslt	___ftpack@exp,c
  6291  001102  D7F6               	goto	l711
  6292  001104                     u2930:
  6293  001104  A018               	btfss	___ftpack@exp,0,c
  6294  001106  9E16               	bcf	___ftpack@arg+1,7,c
  6295  001108  90D8               	bcf	status,0,c
  6296  00110A  3218               	rrcf	___ftpack@exp,f,c
  6297  00110C  5018               	movf	___ftpack@exp,w,c
  6298  00110E  1217               	iorwf	___ftpack@arg+2,f,c
  6299  001110  5019               	movf	___ftpack@sign,w,c
  6300  001112  A4D8               	btfss	status,2,c
  6301  001114  8E17               	bsf	___ftpack@arg+2,7,c
  6302  001116  C015  F015         	movff	___ftpack@arg,?___ftpack
  6303  00111A  C016  F016         	movff	___ftpack@arg+1,?___ftpack+1
  6304  00111E  C017  F017         	movff	___ftpack@arg+2,?___ftpack+2
  6305  001122  0012               	return	
  6306  001124                     __end_of___ftpack:
  6307                           	opt stack 0
  6308                           tblptru	equ	0xFF8
  6309                           tblptrh	equ	0xFF7
  6310                           tblptrl	equ	0xFF6
  6311                           tablat	equ	0xFF5
  6312                           prodh	equ	0xFF4
  6313                           prodl	equ	0xFF3
  6314                           intcon	equ	0xFF2
  6315                           postinc0	equ	0xFEE
  6316                           wreg	equ	0xFE8
  6317                           indf1	equ	0xFE7
  6318                           postdec1	equ	0xFE5
  6319                           plusw1	equ	0xFE3
  6320                           fsr1h	equ	0xFE2
  6321                           fsr1l	equ	0xFE1
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           plusw2	equ	0xFDB
  6326                           fsr2h	equ	0xFDA
  6327                           fsr2l	equ	0xFD9
  6328                           status	equ	0xFD8
  6329                           
  6330 ;; *************** function ___ftge *****************
  6331 ;; Defined at:
  6332 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;  ff1             3   49[COMRAM] float 
  6335 ;;  ff2             3   52[COMRAM] float 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;		None
  6338 ;; Return value:  Size  Location     Type
  6339 ;;		None               void
  6340 ;; Registers used:
  6341 ;;		wreg, status,2, status,0
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6347 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;Total ram usage:        9 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    1
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		_getKeyPressed
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           	psect	text31
  6362  001124                     __ptext31:
  6363                           	opt stack 0
  6364  001124                     ___ftge:
  6365                           	opt stack 27
  6366                           
  6367                           ;incstack = 0
  6368  001124  AE34               	btfss	___ftge@ff1+2,7,c
  6369  001126  D016               	goto	l776
  6370  001128  C032  F038         	movff	___ftge@ff1,??___ftge
  6371  00112C  C033  F039         	movff	___ftge@ff1+1,??___ftge+1
  6372  001130  C034  F03A         	movff	___ftge@ff1+2,??___ftge+2
  6373  001134  1E38               	comf	??___ftge,f,c
  6374  001136  1E39               	comf	??___ftge+1,f,c
  6375  001138  1E3A               	comf	??___ftge+2,f,c
  6376  00113A  2A38               	incf	??___ftge,f,c
  6377  00113C  0E00               	movlw	0
  6378  00113E  2239               	addwfc	??___ftge+1,f,c
  6379  001140  223A               	addwfc	??___ftge+2,f,c
  6380  001142  0E00               	movlw	0
  6381  001144  2438               	addwf	??___ftge,w,c
  6382  001146  6E32               	movwf	___ftge@ff1,c
  6383  001148  0E00               	movlw	0
  6384  00114A  2039               	addwfc	??___ftge+1,w,c
  6385  00114C  6E33               	movwf	___ftge@ff1+1,c
  6386  00114E  0E80               	movlw	128
  6387  001150  203A               	addwfc	??___ftge+2,w,c
  6388  001152  6E34               	movwf	___ftge@ff1+2,c
  6389  001154                     l776:
  6390  001154  AE37               	btfss	___ftge@ff2+2,7,c
  6391  001156  D016               	goto	l777
  6392  001158  C035  F038         	movff	___ftge@ff2,??___ftge
  6393  00115C  C036  F039         	movff	___ftge@ff2+1,??___ftge+1
  6394  001160  C037  F03A         	movff	___ftge@ff2+2,??___ftge+2
  6395  001164  1E38               	comf	??___ftge,f,c
  6396  001166  1E39               	comf	??___ftge+1,f,c
  6397  001168  1E3A               	comf	??___ftge+2,f,c
  6398  00116A  2A38               	incf	??___ftge,f,c
  6399  00116C  0E00               	movlw	0
  6400  00116E  2239               	addwfc	??___ftge+1,f,c
  6401  001170  223A               	addwfc	??___ftge+2,f,c
  6402  001172  0E00               	movlw	0
  6403  001174  2438               	addwf	??___ftge,w,c
  6404  001176  6E35               	movwf	___ftge@ff2,c
  6405  001178  0E00               	movlw	0
  6406  00117A  2039               	addwfc	??___ftge+1,w,c
  6407  00117C  6E36               	movwf	___ftge@ff2+1,c
  6408  00117E  0E80               	movlw	128
  6409  001180  203A               	addwfc	??___ftge+2,w,c
  6410  001182  6E37               	movwf	___ftge@ff2+2,c
  6411  001184                     l777:
  6412  001184  0E00               	movlw	0
  6413  001186  1A32               	xorwf	___ftge@ff1,f,c
  6414  001188  0E00               	movlw	0
  6415  00118A  1A33               	xorwf	___ftge@ff1+1,f,c
  6416  00118C  0E80               	movlw	128
  6417  00118E  1A34               	xorwf	___ftge@ff1+2,f,c
  6418  001190  0E00               	movlw	0
  6419  001192  1A35               	xorwf	___ftge@ff2,f,c
  6420  001194  0E00               	movlw	0
  6421  001196  1A36               	xorwf	___ftge@ff2+1,f,c
  6422  001198  0E80               	movlw	128
  6423  00119A  1A37               	xorwf	___ftge@ff2+2,f,c
  6424  00119C  5035               	movf	___ftge@ff2,w,c
  6425  00119E  5C32               	subwf	___ftge@ff1,w,c
  6426  0011A0  5036               	movf	___ftge@ff2+1,w,c
  6427  0011A2  5833               	subwfb	___ftge@ff1+1,w,c
  6428  0011A4  5037               	movf	___ftge@ff2+2,w,c
  6429  0011A6  5834               	subwfb	___ftge@ff1+2,w,c
  6430  0011A8  B0D8               	btfsc	status,0,c
  6431  0011AA  D002               	goto	l3140
  6432  0011AC  90D8               	bcf	status,0,c
  6433  0011AE  0012               	return	
  6434  0011B0                     l3140:
  6435  0011B0  80D8               	bsf	status,0,c
  6436  0011B2  0012               	return	
  6437  0011B4                     __end_of___ftge:
  6438                           	opt stack 0
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           intcon	equ	0xFF2
  6446                           postinc0	equ	0xFEE
  6447                           wreg	equ	0xFE8
  6448                           indf1	equ	0xFE7
  6449                           postdec1	equ	0xFE5
  6450                           plusw1	equ	0xFE3
  6451                           fsr1h	equ	0xFE2
  6452                           fsr1l	equ	0xFE1
  6453                           indf2	equ	0xFDF
  6454                           postinc2	equ	0xFDE
  6455                           postdec2	equ	0xFDD
  6456                           plusw2	equ	0xFDB
  6457                           fsr2h	equ	0xFDA
  6458                           fsr2l	equ	0xFD9
  6459                           status	equ	0xFD8
  6460                           
  6461 ;; *************** function _checkValid *****************
  6462 ;; Defined at:
  6463 ;;		line 112 in file "standbyInterface.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  inputScreenP    2   32[COMRAM] unsigned short 
  6466 ;;  inputs          2   34[COMRAM] PTR unsigned char 
  6467 ;;		 -> main@inputs(6), 
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;  validFastene  100    0[BANK0 ] unsigned char [5][20]
  6470 ;;  numFasteners    8  113[BANK0 ] unsigned short [4]
  6471 ;;  MAX_FASTENER    8  105[BANK0 ] const unsigned int [4]
  6472 ;;  fastenerSet     5  100[BANK0 ] unsigned char [5]
  6473 ;;  i               2  123[BANK0 ] unsigned short 
  6474 ;;  numSetsPerSt    2  121[BANK0 ] unsigned short 
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      enum E3086
  6477 ;; Registers used:
  6478 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6484 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6485 ;;      Locals:         0     125       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;      Totals:         6     125       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;Total ram usage:      131 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    2
  6491 ;; This function calls:
  6492 ;;		___wmul
  6493 ;;		_strcmp
  6494 ;; This function is called by:
  6495 ;;		_getInputs
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           	psect	text32
  6500  000602                     __ptext32:
  6501                           	opt stack 0
  6502  000602                     _checkValid:
  6503                           	opt stack 26
  6504                           
  6505                           ;standbyInterface.c: 114: unsigned char validFastenerSets [20][5] = {"B000", "N000", "S0
      +                          00", "W000",
  6506                           ;standbyInterface.c: 115: "BN00", "BS00", "BW00",
  6507                           ;standbyInterface.c: 116: "BBN0", "BBS0", "BBW0", "BNW0", "BSW0", "BWW0",
  6508                           ;standbyInterface.c: 117: "BNWW", "BSWW", "BBSW", "BBNW", "BNNW", "BNNN", "BWWW"};
  6509                           
  6510                           ;incstack = 0
  6511  000602  EE21  F000         	lfsr	2,checkValid@F3153
  6512  000606  EE10  F080         	lfsr	1,checkValid@validFastenerSets
  6513  00060A  0E63               	movlw	99
  6514  00060C                     u3231:
  6515  00060C  CFDB FFE3          	movff	plusw2,plusw1
  6516  000610  06E8               	decf	wreg,f,c
  6517  000612  E2FC               	bc	u3231
  6518                           
  6519                           ;standbyInterface.c: 118: unsigned char fastenerSet [5];
  6520                           ;standbyInterface.c: 119: unsigned short int i, numSetsPerStep;
  6521                           ;standbyInterface.c: 120: unsigned short int numFasteners [4] = {0,0,0,0};
  6522  000614  EE20  F05C         	lfsr	2,checkValid@F3158
  6523  000618  EE10  F0F1         	lfsr	1,checkValid@numFasteners
  6524  00061C  0E07               	movlw	7
  6525  00061E                     u3241:
  6526  00061E  CFDB FFE3          	movff	plusw2,plusw1
  6527  000622  06E8               	decf	wreg,f,c
  6528  000624  E2FC               	bc	u3241
  6529                           
  6530                           ;standbyInterface.c: 121: const unsigned int MAX_FASTENERS [4] = {2,3,2,4};
  6531  000626  0EDE               	movlw	low checkValid@F3160
  6532  000628  6EF6               	movwf	tblptrl,c
  6533  00062A                     	if	1	;There is more than 1 active tblptr byte
  6534  00062A  0EFE               	movlw	high checkValid@F3160
  6535  00062C  6EF7               	movwf	tblptrh,c
  6536  00062E                     	endif
  6537  00062E                     	if	0	;There are less than 3 active tblptr bytes
  6538  00062E                     	endif
  6539  00062E  EE20  F0E9         	lfsr	2,checkValid@MAX_FASTENERS
  6540  000632  0E07               	movlw	7
  6541  000634                     u3250:
  6542  000634  0009               	tblrd		*+
  6543  000636  CFF5 FFDE          	movff	tablat,postinc2
  6544  00063A  06E8               	decf	wreg,f,c
  6545  00063C  E2FB               	bc	u3250
  6546                           
  6547                           ;standbyInterface.c: 123: switch (inputScreenPos) {
  6548  00063E  D0DC               	goto	l214
  6549  000640                     
  6550                           ;standbyInterface.c: 125: for (i = 0; i<4; i++){
  6551  000640  0E00               	movlw	0
  6552  000642  0100               	movlb	0	; () banked
  6553  000644  6FFC               	movwf	(checkValid@i+1)& (0+255),b
  6554  000646  0E00               	movlw	0
  6555  000648  6FFB               	movwf	checkValid@i& (0+255),b
  6556  00064A                     l3706:
  6557                           
  6558                           ; BSR set to: 0
  6559  00064A  51FC               	movf	(checkValid@i+1)& (0+255),w,b
  6560  00064C  E115               	bnz	l3716
  6561  00064E  0E04               	movlw	4
  6562  000650  5DFB               	subwf	checkValid@i& (0+255),w,b
  6563  000652  B0D8               	btfsc	status,0,c
  6564  000654  D011               	goto	u3270
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;standbyInterface.c: 126: fastenerSet[i] = inputs[i];
  6568                           
  6569                           ; BSR set to: 0
  6570                           
  6571                           ; BSR set to: 0
  6572  000656  51FB               	movf	checkValid@i& (0+255),w,b
  6573  000658  2423               	addwf	checkValid@inputs,w,c
  6574  00065A  6ED9               	movwf	fsr2l,c
  6575  00065C  51FC               	movf	(checkValid@i+1)& (0+255),w,b
  6576  00065E  2024               	addwfc	checkValid@inputs+1,w,c
  6577  000660  6EDA               	movwf	fsr2h,c
  6578  000662  0EE4               	movlw	low checkValid@fastenerSet
  6579  000664  25FB               	addwf	checkValid@i& (0+255),w,b
  6580  000666  6EE1               	movwf	fsr1l,c
  6581  000668  0E00               	movlw	high checkValid@fastenerSet
  6582  00066A  21FC               	addwfc	(checkValid@i+1)& (0+255),w,b
  6583  00066C  6EE2               	movwf	fsr1h,c
  6584  00066E  CFDF FFE7          	movff	indf2,indf1
  6585                           
  6586                           ; BSR set to: 0
  6587  000672  4BFB               	infsnz	checkValid@i& (0+255),f,b
  6588  000674  2BFC               	incf	(checkValid@i+1)& (0+255),f,b
  6589  000676  D7E9               	goto	l3706
  6590  000678                     u3270:
  6591  000678                     l3716:
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;standbyInterface.c: 127: }
  6595                           ;standbyInterface.c: 128: fastenerSet[4] = '\0';
  6596  000678  0E00               	movlw	0
  6597  00067A  6FE8               	movwf	(checkValid@fastenerSet+4)& (0+255),b
  6598                           
  6599                           ;standbyInterface.c: 129: for (i = 0; i<20; i++){
  6600  00067C  0E00               	movlw	0
  6601  00067E  6FFC               	movwf	(checkValid@i+1)& (0+255),b
  6602  000680  0E00               	movlw	0
  6603  000682  6FFB               	movwf	checkValid@i& (0+255),b
  6604  000684                     l3718:
  6605                           
  6606                           ; BSR set to: 0
  6607  000684  51FC               	movf	(checkValid@i+1)& (0+255),w,b
  6608  000686  E124               	bnz	l3732
  6609  000688  0E14               	movlw	20
  6610  00068A  5DFB               	subwf	checkValid@i& (0+255),w,b
  6611  00068C  B0D8               	btfsc	status,0,c
  6612  00068E  D020               	goto	u3300
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;standbyInterface.c: 130: if (strcmp(fastenerSet, validFastenerSets[i]) == 0)
  6616                           
  6617                           ; BSR set to: 0
  6618                           
  6619                           ; BSR set to: 0
  6620  000690  0EE4               	movlw	low checkValid@fastenerSet
  6621  000692  6E1B               	movwf	strcmp@s1,c
  6622  000694  0E00               	movlw	high checkValid@fastenerSet
  6623  000696  6E1C               	movwf	strcmp@s1+1,c
  6624  000698  C0FB  F015         	movff	checkValid@i,___wmul@multiplier
  6625  00069C  C0FC  F016         	movff	checkValid@i+1,___wmul@multiplier+1
  6626  0006A0  0E00               	movlw	0
  6627  0006A2  6E18               	movwf	___wmul@multiplicand+1,c
  6628  0006A4  0E05               	movlw	5
  6629  0006A6  6E17               	movwf	___wmul@multiplicand,c
  6630  0006A8  EC2F  F00B         	call	___wmul	;wreg free
  6631  0006AC  0E80               	movlw	low checkValid@validFastenerSets
  6632  0006AE  2415               	addwf	?___wmul,w,c
  6633  0006B0  6E1D               	movwf	strcmp@s2,c
  6634  0006B2  0E00               	movlw	high checkValid@validFastenerSets
  6635  0006B4  2016               	addwfc	?___wmul+1,w,c
  6636  0006B6  6E1E               	movwf	strcmp@s2+1,c
  6637  0006B8  ECAA  F00A         	call	_strcmp	;wreg free
  6638  0006BC  501B               	movf	?_strcmp,w,c
  6639  0006BE  101C               	iorwf	?_strcmp+1,w,c
  6640  0006C0  A4D8               	btfss	status,2,c
  6641  0006C2  D002               	goto	l220
  6642                           
  6643                           ;standbyInterface.c: 131: return true;
  6644  0006C4  0E01               	movlw	1
  6645  0006C6  0012               	return	
  6646  0006C8                     l220:
  6647  0006C8  0100               	movlb	0	; () banked
  6648  0006CA  4BFB               	infsnz	checkValid@i& (0+255),f,b
  6649  0006CC  2BFC               	incf	(checkValid@i+1)& (0+255),f,b
  6650  0006CE  D7DA               	goto	l3718
  6651  0006D0                     u3300:
  6652  0006D0                     l3732:
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;standbyInterface.c: 132: }
  6656                           ;standbyInterface.c: 133: return false;
  6657  0006D0  0E00               	movlw	0
  6658                           
  6659                           ; BSR set to: 0
  6660  0006D2  0012               	return	
  6661  0006D4                     
  6662                           ;standbyInterface.c: 136: for (i = 0; i<4; i++){
  6663                           
  6664                           ; BSR set to: 0
  6665  0006D4  0E00               	movlw	0
  6666  0006D6  0100               	movlb	0	; () banked
  6667  0006D8  6FFC               	movwf	(checkValid@i+1)& (0+255),b
  6668  0006DA  0E00               	movlw	0
  6669  0006DC  6FFB               	movwf	checkValid@i& (0+255),b
  6670  0006DE                     l3738:
  6671                           
  6672                           ; BSR set to: 0
  6673  0006DE  51FC               	movf	(checkValid@i+1)& (0+255),w,b
  6674  0006E0  E156               	bnz	l3780
  6675  0006E2  0E04               	movlw	4
  6676  0006E4  5DFB               	subwf	checkValid@i& (0+255),w,b
  6677  0006E6  B0D8               	btfsc	status,0,c
  6678  0006E8  D052               	goto	u3360
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;standbyInterface.c: 137: numSetsPerStep = (unsigned int)inputs[4]-48;
  6682                           
  6683                           ; BSR set to: 0
  6684                           
  6685                           ; BSR set to: 0
  6686  0006EA  EE20 F004          	lfsr	2,4
  6687  0006EE  5023               	movf	checkValid@inputs,w,c
  6688  0006F0  26D9               	addwf	fsr2l,f,c
  6689  0006F2  5024               	movf	checkValid@inputs+1,w,c
  6690  0006F4  22DA               	addwfc	fsr2h,f,c
  6691  0006F6  50DF               	movf	indf2,w,c
  6692  0006F8  6E25               	movwf	??_checkValid& (0+255),c
  6693  0006FA  0ED0               	movlw	208
  6694  0006FC  2425               	addwf	??_checkValid,w,c
  6695  0006FE  6FF9               	movwf	checkValid@numSetsPerStep& (0+255),b
  6696  000700  6BFA               	clrf	(checkValid@numSetsPerStep+1)& (0+255),b
  6697  000702  0EFF               	movlw	255
  6698  000704  23FA               	addwfc	(checkValid@numSetsPerStep+1)& (0+255),f,b
  6699                           
  6700                           ;standbyInterface.c: 138: switch (inputs[i]){
  6701  000706  D029               	goto	l225
  6702  000708                     
  6703                           ; BSR set to: 0
  6704                           ;standbyInterface.c: 142: numFasteners[0] += numSetsPerStep;
  6705                           
  6706                           ; BSR set to: 0
  6707  000708  51F9               	movf	checkValid@numSetsPerStep& (0+255),w,b
  6708  00070A  27F1               	addwf	checkValid@numFasteners& (0+255),f,b
  6709  00070C  51FA               	movf	(checkValid@numSetsPerStep+1)& (0+255),w,b
  6710  00070E  23F2               	addwfc	(checkValid@numFasteners+1)& (0+255),f,b
  6711                           
  6712                           ;standbyInterface.c: 143: if (numFasteners[0] > MAX_FASTENERS[0])
  6713  000710  51F1               	movf	checkValid@numFasteners& (0+255),w,b
  6714  000712  5DE9               	subwf	checkValid@MAX_FASTENERS& (0+255),w,b
  6715  000714  51F2               	movf	(checkValid@numFasteners+1)& (0+255),w,b
  6716  000716  59EA               	subwfb	(checkValid@MAX_FASTENERS+1)& (0+255),w,b
  6717  000718                     L3:
  6718  000718  B0D8               	btfsc	status,0,c
  6719  00071A  D036               	goto	l227
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;standbyInterface.c: 144: return false;
  6723  00071C  0E00               	movlw	0
  6724                           
  6725                           ; BSR set to: 0
  6726  00071E  0012               	return	
  6727  000720                     
  6728                           ; BSR set to: 0
  6729                           ;standbyInterface.c: 147: numFasteners[1] += numSetsPerStep;
  6730                           
  6731                           ; BSR set to: 0
  6732  000720  51F9               	movf	checkValid@numSetsPerStep& (0+255),w,b
  6733  000722  27F3               	addwf	(checkValid@numFasteners+2)& (0+255),f,b
  6734  000724  51FA               	movf	(checkValid@numSetsPerStep+1)& (0+255),w,b
  6735  000726  23F4               	addwfc	(checkValid@numFasteners+3)& (0+255),f,b
  6736                           
  6737                           ;standbyInterface.c: 148: if (numFasteners[1] > MAX_FASTENERS[1])
  6738  000728  51F3               	movf	(checkValid@numFasteners+2)& (0+255),w,b
  6739  00072A  5DEB               	subwf	(checkValid@MAX_FASTENERS+2)& (0+255),w,b
  6740  00072C  51F4               	movf	(checkValid@numFasteners+3)& (0+255),w,b
  6741  00072E  59EC               	subwfb	(checkValid@MAX_FASTENERS+3)& (0+255),w,b
  6742  000730  D7F3               	goto	L3
  6743  000732                     
  6744                           ; BSR set to: 0
  6745                           ;standbyInterface.c: 152: numFasteners[2] += numSetsPerStep;
  6746                           
  6747                           ; BSR set to: 0
  6748  000732  51F9               	movf	checkValid@numSetsPerStep& (0+255),w,b
  6749  000734  27F5               	addwf	(checkValid@numFasteners+4)& (0+255),f,b
  6750  000736  51FA               	movf	(checkValid@numSetsPerStep+1)& (0+255),w,b
  6751  000738  23F6               	addwfc	(checkValid@numFasteners+5)& (0+255),f,b
  6752                           
  6753                           ;standbyInterface.c: 153: if (numFasteners[2] > MAX_FASTENERS[2])
  6754  00073A  51F5               	movf	(checkValid@numFasteners+4)& (0+255),w,b
  6755  00073C  5DED               	subwf	(checkValid@MAX_FASTENERS+4)& (0+255),w,b
  6756  00073E  51F6               	movf	(checkValid@numFasteners+5)& (0+255),w,b
  6757  000740  59EE               	subwfb	(checkValid@MAX_FASTENERS+5)& (0+255),w,b
  6758  000742  D7EA               	goto	L3
  6759  000744                     
  6760                           ; BSR set to: 0
  6761                           ;standbyInterface.c: 157: numFasteners[3] += numSetsPerStep;
  6762                           
  6763                           ; BSR set to: 0
  6764  000744  51F9               	movf	checkValid@numSetsPerStep& (0+255),w,b
  6765  000746  27F7               	addwf	(checkValid@numFasteners+6)& (0+255),f,b
  6766  000748  51FA               	movf	(checkValid@numSetsPerStep+1)& (0+255),w,b
  6767  00074A  23F8               	addwfc	(checkValid@numFasteners+7)& (0+255),f,b
  6768                           
  6769                           ;standbyInterface.c: 158: if (numFasteners[3] > MAX_FASTENERS[3])
  6770  00074C  51F7               	movf	(checkValid@numFasteners+6)& (0+255),w,b
  6771  00074E  5DEF               	subwf	(checkValid@MAX_FASTENERS+6)& (0+255),w,b
  6772  000750  51F8               	movf	(checkValid@numFasteners+7)& (0+255),w,b
  6773  000752  59F0               	subwfb	(checkValid@MAX_FASTENERS+7)& (0+255),w,b
  6774  000754  D7E1               	goto	L3
  6775  000756                     
  6776                           ; BSR set to: 0
  6777                           ;standbyInterface.c: 162: return false;
  6778                           
  6779                           ; BSR set to: 0
  6780  000756  0E00               	movlw	0
  6781                           
  6782                           ; BSR set to: 0
  6783  000758  0012               	return	
  6784  00075A                     l225:
  6785                           
  6786                           ; BSR set to: 0
  6787                           
  6788                           ; BSR set to: 0
  6789  00075A  51FB               	movf	checkValid@i& (0+255),w,b
  6790  00075C  2423               	addwf	checkValid@inputs,w,c
  6791  00075E  6ED9               	movwf	fsr2l,c
  6792  000760  51FC               	movf	(checkValid@i+1)& (0+255),w,b
  6793  000762  2024               	addwfc	checkValid@inputs+1,w,c
  6794  000764  6EDA               	movwf	fsr2h,c
  6795  000766  50DF               	movf	indf2,w,c
  6796                           
  6797                           ; Switch size 1, requested type "space"
  6798                           ; Number of cases is 5, Range of values is 48 to 87
  6799                           ; switch strategies available:
  6800                           ; Name         Instructions Cycles
  6801                           ; simple_byte           16     9 (average)
  6802                           ;	Chosen strategy is simple_byte
  6803  000768  0A30               	xorlw	48	; case 48
  6804  00076A  B4D8               	btfsc	status,2,c
  6805  00076C  D00D               	goto	l227
  6806  00076E  0A72               	xorlw	114	; case 66
  6807  000770  B4D8               	btfsc	status,2,c
  6808  000772  D7CA               	goto	l228
  6809  000774  0A0C               	xorlw	12	; case 78
  6810  000776  B4D8               	btfsc	status,2,c
  6811  000778  D7D3               	goto	l230
  6812  00077A  0A1D               	xorlw	29	; case 83
  6813  00077C  B4D8               	btfsc	status,2,c
  6814  00077E  D7D9               	goto	l232
  6815  000780  0A04               	xorlw	4	; case 87
  6816  000782  B4D8               	btfsc	status,2,c
  6817  000784  D7DF               	goto	l234
  6818  000786  D7E7               	goto	l236
  6819  000788                     l227:
  6820                           
  6821                           ; BSR set to: 0
  6822                           
  6823                           ; BSR set to: 0
  6824  000788  4BFB               	infsnz	checkValid@i& (0+255),f,b
  6825  00078A  2BFC               	incf	(checkValid@i+1)& (0+255),f,b
  6826  00078C  D7A8               	goto	l3738
  6827  00078E                     u3360:
  6828  00078E                     l3780:
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;standbyInterface.c: 164: }
  6832                           ;standbyInterface.c: 165: if (numFasteners[0] + numFasteners[1] + numFasteners[2] + numF
      +                          asteners[3] <= 4)
  6833  00078E  51F5               	movf	(checkValid@numFasteners+4)& (0+255),w,b
  6834  000790  25F3               	addwf	(checkValid@numFasteners+2)& (0+255),w,b
  6835  000792  6E25               	movwf	??_checkValid& (0+255),c
  6836  000794  51F6               	movf	(checkValid@numFasteners+5)& (0+255),w,b
  6837  000796  21F4               	addwfc	(checkValid@numFasteners+3)& (0+255),w,b
  6838  000798  6E26               	movwf	(??_checkValid+1)& (0+255),c
  6839  00079A  51F7               	movf	(checkValid@numFasteners+6)& (0+255),w,b
  6840  00079C  2625               	addwf	??_checkValid,f,c
  6841  00079E  51F8               	movf	(checkValid@numFasteners+7)& (0+255),w,b
  6842  0007A0  2226               	addwfc	??_checkValid+1,f,c
  6843  0007A2  51F1               	movf	checkValid@numFasteners& (0+255),w,b
  6844  0007A4  2625               	addwf	??_checkValid,f,c
  6845  0007A6  51F2               	movf	(checkValid@numFasteners+1)& (0+255),w,b
  6846  0007A8  2226               	addwfc	??_checkValid+1,f,c
  6847  0007AA  5026               	movf	??_checkValid+1,w,c
  6848  0007AC  E106               	bnz	l3786
  6849  0007AE  0E05               	movlw	5
  6850  0007B0  5C25               	subwf	??_checkValid,w,c
  6851  0007B2  B0D8               	btfsc	status,0,c
  6852  0007B4  D002               	goto	l237
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;standbyInterface.c: 166: return true;
  6856  0007B6  0E01               	movlw	1
  6857                           
  6858                           ; BSR set to: 0
  6859  0007B8  0012               	return	
  6860  0007BA                     l237:
  6861  0007BA                     l3786:
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;standbyInterface.c: 167: return false;
  6865  0007BA  0E00               	movlw	0
  6866                           
  6867                           ; BSR set to: 0
  6868  0007BC  0012               	return	
  6869  0007BE                     
  6870                           ;standbyInterface.c: 171: return true;
  6871                           
  6872                           ; BSR set to: 0
  6873                           
  6874                           ; BSR set to: 0
  6875                           
  6876                           ; BSR set to: 0
  6877                           
  6878                           ; BSR set to: 0
  6879                           
  6880                           ; BSR set to: 0
  6881  0007BE  0E01               	movlw	1
  6882  0007C0  0012               	return	
  6883  0007C2                     
  6884                           ;standbyInterface.c: 173: return false;
  6885  0007C2  0E00               	movlw	0
  6886  0007C4  0012               	return	
  6887  0007C6  EE20 F005          	lfsr	2,5
  6888  0007CA  5023               	movf	checkValid@inputs,w,c
  6889  0007CC  26D9               	addwf	fsr2l,f,c
  6890  0007CE  5024               	movf	checkValid@inputs+1,w,c
  6891  0007D0  22DA               	addwfc	fsr2h,f,c
  6892  0007D2  50DF               	movf	indf2,w,c
  6893                           
  6894                           ; Switch size 1, requested type "space"
  6895                           ; Number of cases is 5, Range of values is 52 to 56
  6896                           ; switch strategies available:
  6897                           ; Name         Instructions Cycles
  6898                           ; simple_byte           16     9 (average)
  6899                           ;	Chosen strategy is simple_byte
  6900  0007D4  0A34               	xorlw	52	; case 52
  6901  0007D6  B4D8               	btfsc	status,2,c
  6902  0007D8  D7F2               	goto	l240
  6903  0007DA  0A01               	xorlw	1	; case 53
  6904  0007DC  B4D8               	btfsc	status,2,c
  6905  0007DE  D7EF               	goto	l240
  6906  0007E0  0A03               	xorlw	3	; case 54
  6907  0007E2  B4D8               	btfsc	status,2,c
  6908  0007E4  D7EC               	goto	l240
  6909  0007E6  0A01               	xorlw	1	; case 55
  6910  0007E8  B4D8               	btfsc	status,2,c
  6911  0007EA  D7E9               	goto	l240
  6912  0007EC  0A0F               	xorlw	15	; case 56
  6913  0007EE  B4D8               	btfsc	status,2,c
  6914  0007F0  D7E6               	goto	l240
  6915  0007F2  D7E7               	goto	l245
  6916  0007F4                     
  6917                           ;standbyInterface.c: 176: return false;
  6918                           
  6919                           ;standbyInterface.c: 175: default:
  6920  0007F4  0E00               	movlw	0
  6921                           
  6922                           ;standbyInterface.c: 177: }
  6923  0007F6  0012               	return	
  6924  0007F8                     l214:
  6925  0007F8  C021  F025         	movff	checkValid@inputScreenPos,??_checkValid
  6926  0007FC  C022  F026         	movff	checkValid@inputScreenPos+1,??_checkValid+1
  6927                           
  6928                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6929                           ; Switch size 1, requested type "space"
  6930                           ; Number of cases is 1, Range of values is 0 to 0
  6931                           ; switch strategies available:
  6932                           ; Name         Instructions Cycles
  6933                           ; simple_byte            4     3 (average)
  6934                           ;	Chosen strategy is simple_byte
  6935  000800  5026               	movf	??_checkValid+1,w,c
  6936  000802  0A00               	xorlw	0	; case 0
  6937  000804  A4D8               	btfss	status,2,c
  6938  000806  D7F6               	goto	l246
  6939                           
  6940                           ; Switch size 1, requested type "space"
  6941                           ; Number of cases is 3, Range of values is 1 to 3
  6942                           ; switch strategies available:
  6943                           ; Name         Instructions Cycles
  6944                           ; simple_byte           10     6 (average)
  6945                           ;	Chosen strategy is simple_byte
  6946  000808  5025               	movf	??_checkValid,w,c
  6947  00080A  0A01               	xorlw	1	; case 1
  6948  00080C  B4D8               	btfsc	status,2,c
  6949  00080E  D718               	goto	l215
  6950  000810  0A03               	xorlw	3	; case 2
  6951  000812  B4D8               	btfsc	status,2,c
  6952  000814  D75F               	goto	l222
  6953  000816  0A01               	xorlw	1	; case 3
  6954  000818  B4D8               	btfsc	status,2,c
  6955  00081A  D7D5               	goto	l239
  6956  00081C  D7EB               	goto	l246
  6957  00081E                     __end_of_checkValid:
  6958                           	opt stack 0
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           intcon	equ	0xFF2
  6966                           postinc0	equ	0xFEE
  6967                           wreg	equ	0xFE8
  6968                           indf1	equ	0xFE7
  6969                           postdec1	equ	0xFE5
  6970                           plusw1	equ	0xFE3
  6971                           fsr1h	equ	0xFE2
  6972                           fsr1l	equ	0xFE1
  6973                           indf2	equ	0xFDF
  6974                           postinc2	equ	0xFDE
  6975                           postdec2	equ	0xFDD
  6976                           plusw2	equ	0xFDB
  6977                           fsr2h	equ	0xFDA
  6978                           fsr2l	equ	0xFD9
  6979                           status	equ	0xFD8
  6980                           
  6981 ;; *************** function _strcmp *****************
  6982 ;; Defined at:
  6983 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  6984 ;; Parameters:    Size  Location     Type
  6985 ;;  s1              2   26[COMRAM] PTR const unsigned char 
  6986 ;;		 -> checkValid@fastenerSet(5), 
  6987 ;;  s2              2   28[COMRAM] PTR const unsigned char 
  6988 ;;		 -> checkValid@validFastenerSets(100), 
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;  r               1   31[COMRAM] char 
  6991 ;; Return value:  Size  Location     Type
  6992 ;;                  2   26[COMRAM] int 
  6993 ;; Registers used:
  6994 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7000 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;Total ram usage:        6 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    1
  7007 ;; This function calls:
  7008 ;;		Nothing
  7009 ;; This function is called by:
  7010 ;;		_checkValid
  7011 ;; This function uses a non-reentrant model
  7012 ;;
  7013                           
  7014                           	psect	text33
  7015  001554                     __ptext33:
  7016                           	opt stack 0
  7017  001554                     _strcmp:
  7018                           	opt stack 26
  7019                           
  7020                           ;incstack = 0
  7021  001554  D004               	goto	l1042
  7022  001556  4A1B               	infsnz	strcmp@s1,f,c
  7023  001558  2A1C               	incf	strcmp@s1+1,f,c
  7024  00155A  4A1D               	infsnz	strcmp@s2,f,c
  7025  00155C  2A1E               	incf	strcmp@s2+1,f,c
  7026  00155E                     l1042:
  7027  00155E  C01B  FFD9         	movff	strcmp@s1,fsr2l
  7028  001562  C01C  FFDA         	movff	strcmp@s1+1,fsr2h
  7029  001566  50DF               	movf	indf2,w,c
  7030  001568  6E1F               	movwf	??_strcmp& (0+255),c
  7031  00156A  C01D  FFD9         	movff	strcmp@s2,fsr2l
  7032  00156E  C01E  FFDA         	movff	strcmp@s2+1,fsr2h
  7033  001572  50DF               	movf	indf2,w,c
  7034  001574  0800               	sublw	0
  7035  001576  241F               	addwf	??_strcmp,w,c
  7036  001578  6E20               	movwf	strcmp@r,c
  7037  00157A  5020               	movf	strcmp@r,w,c
  7038  00157C  A4D8               	btfss	status,2,c
  7039  00157E  D007               	goto	u3130
  7040  001580  C01B  FFD9         	movff	strcmp@s1,fsr2l
  7041  001584  C01C  FFDA         	movff	strcmp@s1+1,fsr2h
  7042  001588  50DF               	movf	indf2,w,c
  7043  00158A  A4D8               	btfss	status,2,c
  7044  00158C  D7E4               	goto	l1043
  7045  00158E                     u3130:
  7046  00158E  5020               	movf	strcmp@r,w,c
  7047  001590  6E1B               	movwf	?_strcmp,c
  7048  001592  6A1C               	clrf	?_strcmp+1,c
  7049  001594  BE1B               	btfsc	?_strcmp,7,c
  7050  001596  061C               	decf	?_strcmp+1,f,c
  7051  001598  0012               	return	
  7052  00159A                     __end_of_strcmp:
  7053                           	opt stack 0
  7054                           tblptru	equ	0xFF8
  7055                           tblptrh	equ	0xFF7
  7056                           tblptrl	equ	0xFF6
  7057                           tablat	equ	0xFF5
  7058                           prodh	equ	0xFF4
  7059                           prodl	equ	0xFF3
  7060                           intcon	equ	0xFF2
  7061                           postinc0	equ	0xFEE
  7062                           wreg	equ	0xFE8
  7063                           indf1	equ	0xFE7
  7064                           postdec1	equ	0xFE5
  7065                           plusw1	equ	0xFE3
  7066                           fsr1h	equ	0xFE2
  7067                           fsr1l	equ	0xFE1
  7068                           indf2	equ	0xFDF
  7069                           postinc2	equ	0xFDE
  7070                           postdec2	equ	0xFDD
  7071                           plusw2	equ	0xFDB
  7072                           fsr2h	equ	0xFDA
  7073                           fsr2l	equ	0xFD9
  7074                           status	equ	0xFD8
  7075                           
  7076 ;; *************** function ___wmul *****************
  7077 ;; Defined at:
  7078 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7079 ;; Parameters:    Size  Location     Type
  7080 ;;  multiplier      2   20[COMRAM] unsigned int 
  7081 ;;  multiplicand    2   22[COMRAM] unsigned int 
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;  product         2   24[COMRAM] unsigned int 
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  2   20[COMRAM] unsigned int 
  7086 ;; Registers used:
  7087 ;;		wreg, status,2, status,0, prodl, prodh
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7093 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7096 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;Total ram usage:        6 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; Hardware stack levels required when called:    1
  7100 ;; This function calls:
  7101 ;;		Nothing
  7102 ;; This function is called by:
  7103 ;;		_calcOperationTime
  7104 ;;		_checkValid
  7105 ;;		_printf
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           	psect	text34
  7110  00165E                     __ptext34:
  7111                           	opt stack 0
  7112  00165E                     ___wmul:
  7113                           	opt stack 27
  7114                           
  7115                           ;incstack = 0
  7116  00165E  5015               	movf	___wmul@multiplier,w,c
  7117  001660  0217               	mulwf	___wmul@multiplicand,c
  7118  001662  CFF3 F019          	movff	prodl,___wmul@product
  7119  001666  CFF4 F01A          	movff	prodh,___wmul@product+1
  7120  00166A  5015               	movf	___wmul@multiplier,w,c
  7121  00166C  0218               	mulwf	___wmul@multiplicand+1,c
  7122  00166E  50F3               	movf	prodl,w,c
  7123  001670  261A               	addwf	___wmul@product+1,f,c
  7124  001672  5016               	movf	___wmul@multiplier+1,w,c
  7125  001674  0217               	mulwf	___wmul@multiplicand,c
  7126  001676  50F3               	movf	prodl,w,c
  7127  001678  261A               	addwf	___wmul@product+1,f,c
  7128  00167A  C019  F015         	movff	___wmul@product,?___wmul
  7129  00167E  C01A  F016         	movff	___wmul@product+1,?___wmul+1
  7130  001682  0012               	return	
  7131  001684                     __end_of___wmul:
  7132                           	opt stack 0
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           intcon	equ	0xFF2
  7140                           postinc0	equ	0xFEE
  7141                           wreg	equ	0xFE8
  7142                           indf1	equ	0xFE7
  7143                           postdec1	equ	0xFE5
  7144                           plusw1	equ	0xFE3
  7145                           fsr1h	equ	0xFE2
  7146                           fsr1l	equ	0xFE1
  7147                           indf2	equ	0xFDF
  7148                           postinc2	equ	0xFDE
  7149                           postdec2	equ	0xFDD
  7150                           plusw2	equ	0xFDB
  7151                           fsr2h	equ	0xFDA
  7152                           fsr2l	equ	0xFD9
  7153                           status	equ	0xFD8
  7154                           
  7155 ;; *************** function _initOperation *****************
  7156 ;; Defined at:
  7157 ;;		line 22 in file "main.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;  inputs          2   20[COMRAM] PTR unsigned char 
  7160 ;;		 -> main@inputs(6), 
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;		None
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      void 
  7165 ;; Registers used:
  7166 ;;		wreg
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7172 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;Total ram usage:        4 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    1
  7179 ;; This function calls:
  7180 ;;		Nothing
  7181 ;; This function is called by:
  7182 ;;		_main
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text35
  7187  001706                     __ptext35:
  7188                           	opt stack 0
  7189  001706                     _initOperation:
  7190                           	opt stack 29
  7191                           
  7192                           ;main.c: 24: _delay((unsigned long)((3000)*(40000000/4000.0)));
  7193                           
  7194                           ;incstack = 0
  7195  001706  0E99               	movlw	153
  7196  001708  6E18               	movwf	(??_initOperation+1)& (0+255),c
  7197  00170A  0E31               	movlw	49
  7198  00170C  6E17               	movwf	??_initOperation& (0+255),c
  7199  00170E  0EA2               	movlw	162
  7200  001710                     u3847:
  7201  001710  2EE8               	decfsz	wreg,f,c
  7202  001712  D7FE               	bra	u3847
  7203  001714  2E17               	decfsz	??_initOperation& (0+255),f,c
  7204  001716  D7FC               	bra	u3847
  7205  001718  2E18               	decfsz	(??_initOperation+1)& (0+255),f,c
  7206  00171A  D7FA               	bra	u3847
  7207  00171C  D000               	nop2	
  7208  00171E  0012               	return		;funcret
  7209  001720                     __end_of_initOperation:
  7210                           	opt stack 0
  7211                           tblptru	equ	0xFF8
  7212                           tblptrh	equ	0xFF7
  7213                           tblptrl	equ	0xFF6
  7214                           tablat	equ	0xFF5
  7215                           prodh	equ	0xFF4
  7216                           prodl	equ	0xFF3
  7217                           intcon	equ	0xFF2
  7218                           postinc0	equ	0xFEE
  7219                           wreg	equ	0xFE8
  7220                           indf1	equ	0xFE7
  7221                           postdec1	equ	0xFE5
  7222                           plusw1	equ	0xFE3
  7223                           fsr1h	equ	0xFE2
  7224                           fsr1l	equ	0xFE1
  7225                           indf2	equ	0xFDF
  7226                           postinc2	equ	0xFDE
  7227                           postdec2	equ	0xFDD
  7228                           plusw2	equ	0xFDB
  7229                           fsr2h	equ	0xFDA
  7230                           fsr2l	equ	0xFD9
  7231                           status	equ	0xFD8
  7232                           
  7233 ;; *************** function _interruptHandler *****************
  7234 ;; Defined at:
  7235 ;;		line 93 in file "main.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;		None
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      void 
  7242 ;; Registers used:
  7243 ;;		wreg, status,2, status,0
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;Total ram usage:       20 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; This function calls:
  7256 ;;		Nothing
  7257 ;; This function is called by:
  7258 ;;		Interrupt level 2
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           	psect	intcode
  7263  000008                     __pintcode:
  7264                           	opt stack 0
  7265  000008                     _interruptHandler:
  7266                           	opt stack 22
  7267                           
  7268                           ;incstack = 0
  7269  000008  826B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7270  00000A  ED69  F007         	call	int_func,f	;refresh shadow registers
  7271                           tblptru	equ	0xFF8
  7272                           tblptrh	equ	0xFF7
  7273                           tblptrl	equ	0xFF6
  7274                           tablat	equ	0xFF5
  7275                           prodh	equ	0xFF4
  7276                           prodl	equ	0xFF3
  7277                           intcon	equ	0xFF2
  7278                           postinc0	equ	0xFEE
  7279                           wreg	equ	0xFE8
  7280                           indf1	equ	0xFE7
  7281                           postdec1	equ	0xFE5
  7282                           plusw1	equ	0xFE3
  7283                           fsr1h	equ	0xFE2
  7284                           fsr1l	equ	0xFE1
  7285                           indf2	equ	0xFDF
  7286                           postinc2	equ	0xFDE
  7287                           postdec2	equ	0xFDD
  7288                           plusw2	equ	0xFDB
  7289                           fsr2h	equ	0xFDA
  7290                           fsr2l	equ	0xFD9
  7291                           status	equ	0xFD8
  7292                           
  7293                           	psect	intcode_body
  7294  000ED2                     __pintcode_body:
  7295                           	opt stack 22
  7296  000ED2                     int_func:
  7297                           	opt stack 22
  7298  000ED2  0006               	pop		; remove dummy address from shadow register refresh
  7299  000ED4  CFFA F003          	movff	pclath,??_interruptHandler+2
  7300  000ED8  CFFB F004          	movff	pclatu,??_interruptHandler+3
  7301  000EDC  CFE9 F005          	movff	fsr0l,??_interruptHandler+4
  7302  000EE0  CFEA F006          	movff	fsr0h,??_interruptHandler+5
  7303  000EE4  CFE1 F007          	movff	fsr1l,??_interruptHandler+6
  7304  000EE8  CFE2 F008          	movff	fsr1h,??_interruptHandler+7
  7305  000EEC  CFD9 F009          	movff	fsr2l,??_interruptHandler+8
  7306  000EF0  CFDA F00A          	movff	fsr2h,??_interruptHandler+9
  7307  000EF4  CFF3 F00B          	movff	prodl,??_interruptHandler+10
  7308  000EF8  CFF4 F00C          	movff	prodh,??_interruptHandler+11
  7309  000EFC  CFF6 F00D          	movff	tblptrl,??_interruptHandler+12
  7310  000F00  CFF7 F00E          	movff	tblptrh,??_interruptHandler+13
  7311  000F04  CFF8 F00F          	movff	tblptru,??_interruptHandler+14
  7312  000F08  CFF5 F010          	movff	tablat,??_interruptHandler+15
  7313  000F0C  C06B  F011         	movff	btemp,??_interruptHandler+16
  7314  000F10  C06C  F012         	movff	btemp+1,??_interruptHandler+17
  7315  000F14  C06D  F013         	movff	btemp+2,??_interruptHandler+18
  7316  000F18  C06E  F014         	movff	btemp+3,??_interruptHandler+19
  7317                           
  7318                           ;main.c: 95: if (INT1IE && INT1IF){
  7319  000F1C  B6F0               	btfsc	intcon3,3,c	;volatile
  7320  000F1E  A0F0               	btfss	intcon3,0,c	;volatile
  7321  000F20  D024               	goto	i2l72
  7322                           
  7323                           ;main.c: 96: LATAbits.LA0 = ~LATAbits.LA0;
  7324  000F22  A089               	btfss	3977,0,c	;volatile
  7325  000F24  D002               	goto	i2u119_40
  7326  000F26  0E01               	movlw	1
  7327  000F28  D001               	goto	i2u119_46
  7328  000F2A                     i2u119_40:
  7329  000F2A  0E00               	movlw	0
  7330  000F2C                     i2u119_46:
  7331  000F2C  0AFF               	xorlw	255
  7332  000F2E  6E01               	movwf	??_interruptHandler& (0+255),c
  7333  000F30  5089               	movf	3977,w,c	;volatile
  7334  000F32  1801               	xorwf	??_interruptHandler,w,c
  7335  000F34  0BFE               	andlw	-2
  7336  000F36  1801               	xorwf	??_interruptHandler,w,c
  7337  000F38  6E89               	movwf	3977,c	;volatile
  7338                           
  7339                           ;main.c: 97: _delay((unsigned long)((150)*(40000000/4000.0)));
  7340  000F3A  0E08               	movlw	8
  7341  000F3C  6E02               	movwf	(??_interruptHandler+1)& (0+255),c
  7342  000F3E  0E9D               	movlw	157
  7343  000F40  6E01               	movwf	??_interruptHandler& (0+255),c
  7344  000F42  0E06               	movlw	6
  7345  000F44                     i2u385_47:
  7346  000F44  2EE8               	decfsz	wreg,f,c
  7347  000F46  D7FE               	bra	i2u385_47
  7348  000F48  2E01               	decfsz	??_interruptHandler& (0+255),f,c
  7349  000F4A  D7FC               	bra	i2u385_47
  7350  000F4C  2E02               	decfsz	(??_interruptHandler+1)& (0+255),f,c
  7351  000F4E  D7FA               	bra	i2u385_47
  7352                           
  7353                           ;main.c: 98: LATAbits.LA0 = ~LATAbits.LA0;
  7354  000F50  A089               	btfss	3977,0,c	;volatile
  7355  000F52  D002               	goto	i2u120_40
  7356  000F54  0E01               	movlw	1
  7357  000F56  D001               	goto	i2u120_46
  7358  000F58                     i2u120_40:
  7359  000F58  0E00               	movlw	0
  7360  000F5A                     i2u120_46:
  7361  000F5A  0AFF               	xorlw	255
  7362  000F5C  6E01               	movwf	??_interruptHandler& (0+255),c
  7363  000F5E  5089               	movf	3977,w,c	;volatile
  7364  000F60  1801               	xorwf	??_interruptHandler,w,c
  7365  000F62  0BFE               	andlw	-2
  7366  000F64  1801               	xorwf	??_interruptHandler,w,c
  7367  000F66  6E89               	movwf	3977,c	;volatile
  7368                           
  7369                           ;main.c: 99: INT1IF = 0;
  7370  000F68  90F0               	bcf	intcon3,0,c	;volatile
  7371  000F6A                     i2l72:
  7372  000F6A  C014  F06E         	movff	??_interruptHandler+19,btemp+3
  7373  000F6E  C013  F06D         	movff	??_interruptHandler+18,btemp+2
  7374  000F72  C012  F06C         	movff	??_interruptHandler+17,btemp+1
  7375  000F76  C011  F06B         	movff	??_interruptHandler+16,btemp
  7376  000F7A  C010  FFF5         	movff	??_interruptHandler+15,tablat
  7377  000F7E  C00F  FFF8         	movff	??_interruptHandler+14,tblptru
  7378  000F82  C00E  FFF7         	movff	??_interruptHandler+13,tblptrh
  7379  000F86  C00D  FFF6         	movff	??_interruptHandler+12,tblptrl
  7380  000F8A  C00C  FFF4         	movff	??_interruptHandler+11,prodh
  7381  000F8E  C00B  FFF3         	movff	??_interruptHandler+10,prodl
  7382  000F92  C00A  FFDA         	movff	??_interruptHandler+9,fsr2h
  7383  000F96  C009  FFD9         	movff	??_interruptHandler+8,fsr2l
  7384  000F9A  C008  FFE2         	movff	??_interruptHandler+7,fsr1h
  7385  000F9E  C007  FFE1         	movff	??_interruptHandler+6,fsr1l
  7386  000FA2  C006  FFEA         	movff	??_interruptHandler+5,fsr0h
  7387  000FA6  C005  FFE9         	movff	??_interruptHandler+4,fsr0l
  7388  000FAA  C004  FFFB         	movff	??_interruptHandler+3,pclatu
  7389  000FAE  C003  FFFA         	movff	??_interruptHandler+2,pclath
  7390  000FB2  926B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7391  000FB4  0011               	retfie		f
  7392  000FB6                     __end_of_interruptHandler:
  7393                           	opt stack 0
  7394                           pclatu	equ	0xFFB
  7395                           pclath	equ	0xFFA
  7396                           tblptru	equ	0xFF8
  7397                           tblptrh	equ	0xFF7
  7398                           tblptrl	equ	0xFF6
  7399                           tablat	equ	0xFF5
  7400                           prodh	equ	0xFF4
  7401                           prodl	equ	0xFF3
  7402                           intcon	equ	0xFF2
  7403                           intcon3	equ	0xFF0
  7404                           postinc0	equ	0xFEE
  7405                           fsr0h	equ	0xFEA
  7406                           fsr0l	equ	0xFE9
  7407                           wreg	equ	0xFE8
  7408                           indf1	equ	0xFE7
  7409                           postdec1	equ	0xFE5
  7410                           plusw1	equ	0xFE3
  7411                           fsr1h	equ	0xFE2
  7412                           fsr1l	equ	0xFE1
  7413                           indf2	equ	0xFDF
  7414                           postinc2	equ	0xFDE
  7415                           postdec2	equ	0xFDD
  7416                           plusw2	equ	0xFDB
  7417                           fsr2h	equ	0xFDA
  7418                           fsr2l	equ	0xFD9
  7419                           status	equ	0xFD8
  7420                           pclatu	equ	0xFFB
  7421                           pclath	equ	0xFFA
  7422                           tblptru	equ	0xFF8
  7423                           tblptrh	equ	0xFF7
  7424                           tblptrl	equ	0xFF6
  7425                           tablat	equ	0xFF5
  7426                           prodh	equ	0xFF4
  7427                           prodl	equ	0xFF3
  7428                           intcon	equ	0xFF2
  7429                           intcon3	equ	0xFF0
  7430                           postinc0	equ	0xFEE
  7431                           fsr0h	equ	0xFEA
  7432                           fsr0l	equ	0xFE9
  7433                           wreg	equ	0xFE8
  7434                           indf1	equ	0xFE7
  7435                           postdec1	equ	0xFE5
  7436                           plusw1	equ	0xFE3
  7437                           fsr1h	equ	0xFE2
  7438                           fsr1l	equ	0xFE1
  7439                           indf2	equ	0xFDF
  7440                           postinc2	equ	0xFDE
  7441                           postdec2	equ	0xFDD
  7442                           plusw2	equ	0xFDB
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447                           	psect	rparam
  7448  0000                     pclatu	equ	0xFFB
  7449                           pclath	equ	0xFFA
  7450                           tblptru	equ	0xFF8
  7451                           tblptrh	equ	0xFF7
  7452                           tblptrl	equ	0xFF6
  7453                           tablat	equ	0xFF5
  7454                           prodh	equ	0xFF4
  7455                           prodl	equ	0xFF3
  7456                           intcon	equ	0xFF2
  7457                           intcon3	equ	0xFF0
  7458                           postinc0	equ	0xFEE
  7459                           fsr0h	equ	0xFEA
  7460                           fsr0l	equ	0xFE9
  7461                           wreg	equ	0xFE8
  7462                           indf1	equ	0xFE7
  7463                           postdec1	equ	0xFE5
  7464                           plusw1	equ	0xFE3
  7465                           fsr1h	equ	0xFE2
  7466                           fsr1l	equ	0xFE1
  7467                           indf2	equ	0xFDF
  7468                           postinc2	equ	0xFDE
  7469                           postdec2	equ	0xFDD
  7470                           plusw2	equ	0xFDB
  7471                           fsr2h	equ	0xFDA
  7472                           fsr2l	equ	0xFD9
  7473                           status	equ	0xFD8
  7474                           
  7475                           	psect	temp
  7476  00006B                     btemp:
  7477                           	opt stack 0
  7478  00006B                     	ds	1
  7479  0000                     int$flags	set	btemp
  7480  0000                     wtemp6	set	btemp+1
  7481                           pclatu	equ	0xFFB
  7482                           pclath	equ	0xFFA
  7483                           tblptru	equ	0xFF8
  7484                           tblptrh	equ	0xFF7
  7485                           tblptrl	equ	0xFF6
  7486                           tablat	equ	0xFF5
  7487                           prodh	equ	0xFF4
  7488                           prodl	equ	0xFF3
  7489                           intcon	equ	0xFF2
  7490                           intcon3	equ	0xFF0
  7491                           postinc0	equ	0xFEE
  7492                           fsr0h	equ	0xFEA
  7493                           fsr0l	equ	0xFE9
  7494                           wreg	equ	0xFE8
  7495                           indf1	equ	0xFE7
  7496                           postdec1	equ	0xFE5
  7497                           plusw1	equ	0xFE3
  7498                           fsr1h	equ	0xFE2
  7499                           fsr1l	equ	0xFE1
  7500                           indf2	equ	0xFDF
  7501                           postinc2	equ	0xFDE
  7502                           postdec2	equ	0xFDD
  7503                           plusw2	equ	0xFDB
  7504                           fsr2h	equ	0xFDA
  7505                           fsr2l	equ	0xFD9
  7506                           status	equ	0xFD8


Data Sizes:
    Strings     262
    Constant    61
    Data        112
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     91     106
    BANK0           128    128     128
    BANK1           256     45     167
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    retrieveResults@timeEnd	PTR unsigned char  size(2) Largest target is 7
		 -> showLogs@timeEnd(BANK0[7]), 

    retrieveResults@operationTime	PTR unsigned short  size(2) Largest target is 3967
		 -> RAM(DATA[3967]), 

    retrieveResults@numRemaining	PTR unsigned short  size(2) Largest target is 8
		 -> showLogs@numRemaining(BANK0[8]), 

    retrieveResults@inputs	PTR unsigned char  size(2) Largest target is 6
		 -> showLogs@inputs(BANK0[6]), 

    initOperation@inputs	PTR unsigned char  size(2) Largest target is 6
		 -> main@inputs(BANK1[6]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 100
		 -> checkValid@validFastenerSets(BANK0[100]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 5
		 -> checkValid@fastenerSet(BANK0[5]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(COMRAM[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_18(CODE[16]), STR_17(CODE[15]), STR_16(CODE[15]), STR_15(CODE[15]), 
		 -> STR_14(CODE[16]), STR_13(CODE[5]), STR_12(CODE[9]), STR_11(CODE[13]), 
		 -> STR_10(CODE[16]), STR_9(CODE[13]), STR_8(CODE[16]), STR_7(CODE[11]), 
		 -> STR_6(CODE[11]), STR_5(CODE[15]), STR_4(CODE[17]), STR_3(CODE[6]), 
		 -> STR_2(CODE[15]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    getDateTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> dispRealTime@time(COMRAM[7]), getKeyPressed@currTimeTemp(COMRAM[7]), getKeyPressed@lastTimeRefresh(COMRAM[7]), main@timeEnd(BANK1[7]), 
		 -> main@timeStart(BANK1[7]), 

    showResults@numRemaining	PTR unsigned short  size(2) Largest target is 8
		 -> showLogs@numRemaining(BANK0[8]), main@numRemaining(BANK1[8]), 

    showResults@inputs	PTR unsigned char  size(2) Largest target is 6
		 -> showLogs@inputs(BANK0[6]), main@inputs(BANK1[6]), 

    initStandby@inputs	PTR unsigned char  size(2) Largest target is 6
		 -> main@inputs(BANK1[6]), 

    getInputs@inputs	PTR unsigned char  size(2) Largest target is 6
		 -> main@inputs(BANK1[6]), 

    checkValid@inputs	PTR unsigned char  size(2) Largest target is 6
		 -> main@inputs(BANK1[6]), 

    calcOperationTime@timeEnd	PTR unsigned char  size(2) Largest target is 7
		 -> getKeyPressed@currTimeTemp(COMRAM[7]), main@timeEnd(BANK1[7]), 

    calcOperationTime@timeStart	PTR unsigned char  size(2) Largest target is 7
		 -> getKeyPressed@lastTimeRefresh(COMRAM[7]), main@timeStart(BANK1[7]), 


Critical Paths under _main in COMRAM

    _initStandby->_showLogs
    _showLogs->_showResults
    _showResults->_getKeyPressed
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _initLCD->_lcdInst
    _getInputs->_errScreen
    _errScreen->_getKeyPressed
    _getKeyPressed->_dispRealTime
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _dispRealTime->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _getDateTime->_I2C_Master_Read
    _getDateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _calcOperationTime->___wmul
    ___lwtoft->_calcOperationTime
    ___ftge->___lwtoft
    _checkValid->_strcmp
    _strcmp->___wmul

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_initStandby
    _initStandby->_getInputs
    _showLogs->_showResults
    _getInputs->_checkValid

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_initStandby
    _initStandby->_getInputs

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0  149641
                                             15 BANK1     30    30      0
                  _calcOperationTime
                        _getDateTime
                      _initOperation
                        _initStandby
                        _showResults
 ---------------------------------------------------------------------------------
 (1) _initStandby                                          6     4      2  121393
                                            127 BANK0      1     1      0
                                             10 BANK1      5     3      2
                          _getInputs
                      _getKeyPressed
                            _initLCD
                            _initRTC
                            _lcdInst
                             _printf
                           _showLogs
 ---------------------------------------------------------------------------------
 (2) _showLogs                                            26    26      0   47620
                                             90 COMRAM     1     1      0
                                              8 BANK0     25    25      0
                      _getKeyPressed
                            _lcdInst
                             _printf
                    _retrieveResults
                        _showResults
 ---------------------------------------------------------------------------------
 (1) _showResults                                          9     3      6   23981
                                             89 COMRAM     1     1      0
                                              0 BANK0      8     2      6
                      _getKeyPressed
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _retrieveResults                                      9     0      9     450
                                             20 COMRAM     9     0      9
 ---------------------------------------------------------------------------------
 (2) _initRTC                                              0     0      0     542
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     542
                                             33 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             23 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _getInputs                                           12    10      2   49933
                                            125 BANK0      2     0      2
                                              0 BANK1     10    10      0
                         _checkValid
                          _errScreen
                      _getKeyPressed
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _errScreen                                            1     1      0   22837
                                             89 COMRAM     1     1      0
                      _getKeyPressed
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getKeyPressed                                       18    18      0   16680
                                             71 COMRAM    18    18      0
                             ___ftge
                           ___lwtoft
                  _calcOperationTime
                       _dispRealTime
                        _getDateTime
                     _lcd_set_cursor
 ---------------------------------------------------------------------------------
 (3) _lcd_set_cursor                                       4     3      1     920
                                             26 COMRAM     4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_shift_cursor                                     3     2      1     415
                                             23 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _dispRealTime                                         9     9      0    7707
                                             62 COMRAM     9     9      0
                        _getDateTime
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              34    22     12    5962
                                             32 COMRAM    30    18     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                             22 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             27 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     601
                                             20 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             22 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             20 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getDateTime                                          3     1      2    1337
                                             23 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     571
                                             21 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             21 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _calcOperationTime                                   20    16      4    2428
                                             26 COMRAM    20    16      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2924
                                             46 COMRAM     3     0      3
                           ___ftpack
                  _calcOperationTime (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2713
                                             20 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     558
                                             49 COMRAM     9     3      6
                           ___lwtoft (ARG)
                  _calcOperationTime (ARG)
 ---------------------------------------------------------------------------------
 (3) _checkValid                                         131   127      4    3082
                                             32 COMRAM     6     2      4
                                              0 BANK0    125   125      0
                             ___wmul
                             _strcmp
 ---------------------------------------------------------------------------------
 (4) _strcmp                                               6     2      4     313
                                             26 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1312
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initOperation                                        4     2      2      76
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interruptHandler                                    20    20      0       0
                                              0 COMRAM    20    20      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calcOperationTime
     ___wmul
   _getDateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initOperation
   _initStandby
     _getInputs
       _checkValid
         ___wmul
         _strcmp
           ___wmul (ARG)
       _errScreen
         _getKeyPressed
           ___ftge
             ___lwtoft (ARG)
               ___ftpack
               _calcOperationTime (ARG)
                 ___wmul
             _calcOperationTime (ARG)
               ___wmul
           ___lwtoft
             ___ftpack
             _calcOperationTime (ARG)
               ___wmul
           _calcOperationTime
             ___wmul
           _dispRealTime
             _getDateTime
               _I2C_Master_Read
                 _I2C_Master_Wait
               _I2C_Master_Start
                 _I2C_Master_Wait
               _I2C_Master_Stop
                 _I2C_Master_Wait
               _I2C_Master_Write
                 _I2C_Master_Wait
             _lcdInst
               _lcdNibble
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               ___wmul
               _isdigit
               _putch
                 _lcdNibble
           _getDateTime
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
           _lcd_set_cursor
             _lcdInst
               _lcdNibble
             _lcd_shift_cursor
               _lcdInst
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
       _getKeyPressed
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
             _calcOperationTime (ARG)
               ___wmul
           _calcOperationTime (ARG)
             ___wmul
         ___lwtoft
           ___ftpack
           _calcOperationTime (ARG)
             ___wmul
         _calcOperationTime
           ___wmul
         _dispRealTime
           _getDateTime
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
           _lcdInst
             _lcdNibble
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
             _putch
               _lcdNibble
         _getDateTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcd_set_cursor
           _lcdInst
             _lcdNibble
           _lcd_shift_cursor
             _lcdInst
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _getKeyPressed
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
           _calcOperationTime (ARG)
             ___wmul
         _calcOperationTime (ARG)
           ___wmul
       ___lwtoft
         ___ftpack
         _calcOperationTime (ARG)
           ___wmul
       _calcOperationTime
         ___wmul
       _dispRealTime
         _getDateTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
       _getDateTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcd_set_cursor
         _lcdInst
           _lcdNibble
         _lcd_shift_cursor
           _lcdInst
             _lcdNibble
     _initLCD
       _lcdInst
         _lcdNibble
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _showLogs
       _getKeyPressed
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
             _calcOperationTime (ARG)
               ___wmul
           _calcOperationTime (ARG)
             ___wmul
         ___lwtoft
           ___ftpack
           _calcOperationTime (ARG)
             ___wmul
         _calcOperationTime
           ___wmul
         _dispRealTime
           _getDateTime
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
           _lcdInst
             _lcdNibble
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
             _putch
               _lcdNibble
         _getDateTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcd_set_cursor
           _lcdInst
             _lcdNibble
           _lcd_shift_cursor
             _lcdInst
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _retrieveResults
       _showResults
         _getKeyPressed
           ___ftge
             ___lwtoft (ARG)
               ___ftpack
               _calcOperationTime (ARG)
                 ___wmul
             _calcOperationTime (ARG)
               ___wmul
           ___lwtoft
             ___ftpack
             _calcOperationTime (ARG)
               ___wmul
           _calcOperationTime
             ___wmul
           _dispRealTime
             _getDateTime
               _I2C_Master_Read
                 _I2C_Master_Wait
               _I2C_Master_Start
                 _I2C_Master_Wait
               _I2C_Master_Stop
                 _I2C_Master_Wait
               _I2C_Master_Write
                 _I2C_Master_Wait
             _lcdInst
               _lcdNibble
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               ___wmul
               _isdigit
               _putch
                 _lcdNibble
           _getDateTime
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
           _lcd_set_cursor
             _lcdInst
               _lcdNibble
             _lcd_shift_cursor
               _lcdInst
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _putch
           _lcdNibble
   _showResults
     _getKeyPressed
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
           _calcOperationTime (ARG)
             ___wmul
         _calcOperationTime (ARG)
           ___wmul
       ___lwtoft
         ___ftpack
         _calcOperationTime (ARG)
           ___wmul
       _calcOperationTime
         ___wmul
       _dispRealTime
         _getDateTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
       _getDateTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcd_set_cursor
         _lcdInst
           _lcdNibble
         _lcd_shift_cursor
           _lcdInst
             _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _putch
       _lcdNibble

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2D      A7       7       65.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     80      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5B      6A       1       84.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     191      34        0.0%
DATA                 0      0     191       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 13 14:44:48 2018

                          l64 1008           ??_calcOperationTime 001F           ___wmul@multiplicand 0017  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l201 15CE  
                         l114 1644                           l115 163C                           l220 06C8  
                         l300 0DA2                           l301 0D7E                           l214 07F8  
                         l230 0720                           l222 06D4                           l302 0D88  
                         l215 0640                           l311 0BE4                           l240 07BE  
                         l232 0732                           l225 075A                           l234 0744  
                         l402 12F0                           l314 0C4E                           l330 0E56  
                         l227 0788                           l331 0E68                           l236 0756  
                         l228 0708                           l260 047A                           l252 03B2  
                         l332 0E62                           l245 07C2                           l237 07BA  
                         l181 0AD6                           l261 057E                           l253 0440  
                         l246 07F4                           l430 003A                           l182 0A3C  
                         l262 0486                           l254 03D8                           l318 0CDE  
                         l239 07C6                           l255 0466                           l192 0B52  
                         l264 0494                           l256 0424                           l185 0AB4  
                         l257 0432                           l337 0E82                           l450 011A  
                         l442 0186                           l426 001C                           l282 05C2  
                         l274 0530                           l451 0108                           l443 00CC  
                         l435 006E                           l427 002C                           l291 0CFC  
                         l444 00D0                           l188 0B74                           l284 05EC  
                         l292 0D24                           l437 0152                           l453 012C  
                         l445 00E6                           l429 0040                           l189 0AE4  
                         l285 05F0                           l710 10FA                           l470 0284  
                         l454 0140                           l711 10F0                           l471 02B0  
                         l463 023E                           l455 01B4                           l447 00F6  
                         l287 0600                           l704 109E                           l480 02DE  
                         l472 029A                           l464 01FE                           l448 00F0  
                         l705 1094                           l481 0384                           l297 0D6C  
                         l458 022E                           l298 0D8E                           l707 10D2  
                         l483 036E                           l459 01CE                           l299 0D78  
                         l708 10BC                           l484 02E4                           l468 0258  
                         l485 037E                           l469 027C                           l902 14F4  
                         l486 0328                           l903 14FE                           l912 160A  
                         l913 1614                           l850 1224                           l819 16E2  
                         l908 15F2                           l909 15EA                           l845 11E2  
                         l846 11D6                           l776 1154                           l777 1184  
                         l849 1216                ??_dispRealTime 003F                           l898 14D4  
                         l899 14CC                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
           ??_retrieveResults 001E                           wreg 000FE8               ?_lcd_set_cursor 001B  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                          l1042 155E  
                        l1043 1556                          l3140 11B0                          l3300 16F0  
     __end_ofcheckValid@F3160 FEE6                          l3344 00F0                          l3284 12E8  
                        l3348 0108                          l3382 01D2                          l3706 064A  
                        l3732 06D0                          l3716 0678                          l3396 0202  
                        l3572 0AA4                          l3718 0684                          l3662 0C12  
                        l3592 0B42                          l3904 0576                          l3648 0BD4  
                        l3738 06DE                          l3780 078E                          l3786 07BA  
                        l3894 0530                          STR_1 FEF8                          STR_2 FF75  
                        STR_3 FF3F                          STR_4 FF24                          STR_5 FF93  
                        STR_6 FFE5                          STR_7 FFDA                          STR_8 FF45  
                        STR_9 FFC0                          u3100 0B74                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u3130 158E                          u3050 0AD6  
                        u3300 06D0                          u3150 11E6                          u3231 060C  
                        u3241 061E                          u3250 0634                          u2530 14D8  
                        u3270 0678                          u3430 04B4                          u3190 0C12  
                        u2455 1270                          u3360 078E                          u2456 1272  
                        u2560 15F6                          u2465 12B0                          u3521 0DF8  
                        u3601 0FD2                          u2466 12B2                          u3531 0E0A  
                        u2590 130C                          u2830 02B8                          u3470 0544  
                        u2495 16A0                          u2496 16A2                          u2840 02CC  
                        u3385 148E                          u2930 1104                          u3570 0DB0  
                        u3707 0C66                          u2860 038C                          u3717 150E  
                        u3807 1258                          u3727 1542                          u3591 0FC0  
                        u3817 1262                          u3737 03C4                          u3657 0D0A  
                        u2890 1086                          u3827 1298                          u3747 15A6  
                        u3667 0D44                          u3837 12A2                          u3757 162C  
                        u3677 0DD2                          u3847 1710                          u3767 140E  
                        u3687 0E2C                          u3777 144C                          u3697 0B9C  
                        u3787 1742                          u3797 1756                          i2l72 0F6A  
   __end_of_calcOperationTime 0A18                          _main 0FB6      __end_of_interruptHandler 0FB6  
                ___ftpack@arg 0015       calcOperationTime@minEnd 002B                          _keys FEBB  
                 main@timeEnd 0188                  ___ftpack@exp 0018       calcOperationTime@secEnd 002D  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr2h 000FDA  
                        fsr0l 000FE9                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 006B  
       retrieveResults@inputs 0015                          prodh 000FF4                          prodl 000FF3  
                        start 000E                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000              __end_of_LCD_LEFT FEF3         I2C_Master_Read@ackBit 0016  
            ?_I2C_Master_Init 0022              ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001  
            ?_I2C_Master_Stop 0001                  ?_initStandby 0174                         ?_main 0001  
                       STR_10 FF65                         STR_11 FFCD                         STR_12 FFF0  
                       STR_13 FFF9                         STR_14 FF35                         STR_15 FF84  
                       STR_16 FFA2                         STR_17 FFB1                         STR_18 FF55  
                       STR_19 FF13               __end_of___lldiv 1236               __end_of___lwdiv 1508  
             __end_of___lwmod 161E                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
             __end_of_lcdInst 175E                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD 1554                __CFG_EBTRB$OFF 000000               __end_of_initRTC 1736  
             __end_of_dpowers FED6               __end_of_isdigit 16EA                 ___ftpack@sign 0019  
                       _putch 1736      calcOperationTime@hourEnd 0029               __end_of_setKeys FEF2  
                       pclath 000FFA                         tablat 000FF5             _LCDinterruptState 0064  
    calcOperationTime@timeEnd 001D                         plusw1 000FE3                         plusw2 000FDB  
                       status 000FD8   I2C_Master_Read@receivedByte 0017        retrieveResults@timeEnd 001B  
                       wtemp6 006C               __initialization 1390                  __end_of_main 1076  
                __end_of_keys FECC          __size_of_getDateTime 0072             ?_lcd_shift_cursor 0018  
              __CFG_OSC$HSPLL 000000             __end_of_LCD_RIGHT FEF4        __size_of_initOperation 001A  
                      ??_main 005C            ??_lcd_shift_cursor 0019                 __activetblptr 000002  
           ?_I2C_Master_Start 0001             ?_I2C_Master_Write 0016            ??_I2C_Master_Start 0016  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 0018  
                      ?_putch 0001              __end_of___ftpack 1124                        _INT1IE 007F83  
                      _INT1IF 007F80    __size_of_calcOperationTime 01FA              __end_of___lwtoft 16CC  
         getInputs@keyPressed 0173                        _SSPADD 000FC8                        _SSPBUF 000FC9  
     initStandby@opNotStarted 0178          __end_of_dispRealTime 145A                __CFG_XINST$OFF 000000  
                      ___ftge 1124                        ___wmul 165E                __CFG_STVREN$ON 000000  
                   ??___lldiv 001D                     ??___lwdiv 0019                     ??___lwmod 0020  
                      clear_0 13D6                        clear_1 13E2    calcOperationTime@hourStart 0023  
                   ??_lcdInst 0017                        _printf 0012                 main@timeStart 0181  
                      _strcmp 1554                     ??_initLCD 0018                     ??_initRTC 002A  
                __pdataCOMRAM 0065                     ??_isdigit 0015              __end_of_showLogs 0ED2  
                __mediumconst FEBA                  ?_showResults 0080                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8    calcOperationTime@timeStart 001B  
                  __accesstop 0080       __end_of__initialization 13E8                 _initOperation 1706  
             __CFG_PBADEN$OFF 000000                    ___ftge@ff1 0032                    ___ftge@ff2 0035  
               ___rparam_used 000001                __pcstackCOMRAM 0001         __end_of_getKeyPressed 0B90  
                __pidataBANK1 1326               _retrieveResults 1790                 __end_of_putch 174A  
        showLogs@numRemaining 0095                    ___lwtoft@c 002F              ??_lcd_set_cursor 001C  
          __size_of_lcdNibble 007E          __size_of_initStandby 0102            __size_of_getInputs 025C  
           getInputs@keyCount 016F                       ??_putch 0017           getInputs@userTyping 016E  
                  _checkValid 0602            __size_of_errScreen 0042                    __pbssBANK1 0197  
              ?_initOperation 0015   getKeyPressed@shouldDispTime 0057             ?_interruptHandler 0001  
        __end_of_firstTimeSet FEED               getInputs@inputs 00FD            ??_interruptHandler 0001  
                     ?___ftge 0032                       ?___wmul 0015  retrieveResults@operationTime 0019  
   initStandby@onOptionScreen 0177                     ?___ftpack 0015                       ?_printf 0021  
                     ?_strcmp 001B   retrieveResults@numRemaining 0017                     ?___lwtoft 002F  
             getDateTime@time 0018                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7         __size_of_dispRealTime 0064       showResults@numRemaining 0082  
     __end_of_retrieveResults 1792             __end_of_lcdNibble 12B4             __end_of_getInputs 0602  
                     __Hparam 0000                       __Lparam 0000                     ?_showLogs 0001  
             __size_of___ftge 0090                       ___lldiv 11B4               __size_of___wmul 0026  
                     ___lwdiv 14B6                       ___lwmod 15DC             __end_of_errScreen 15DC  
                     __pcinit 1390        showLogs@onOptionScreen 009D                    ??___ftpack 001A  
                     __ramtop 1000                       _lcdInst 174A                       __ptext0 0FB6  
                     __ptext1 0CEC                       __ptext2 0DEE                       __ptext3 0B90  
                     __ptext4 1790                       __ptext5 1720                       __ptext6 145A  
                     __ptext7 11B4                       __ptext8 1508                       __ptext9 03A6  
             __size_of_printf 0394                    ??___lwtoft 0032               __size_of_strcmp 0046  
                     _initLCD 1508             __end_of_hexpowers FEDE      checkValid@inputScreenPos 0021  
                     _initRTC 1720                       _dpowers FECC                       _isdigit 16CC  
                _dispRealTime 13F6           initOperation@inputs 0015                       _setKeys FEED  
                   _LCD_RIGHT FEF3      __size_of_I2C_Master_Init 005C      __size_of_I2C_Master_Read 0024  
    __size_of_I2C_Master_Wait 0012      __size_of_I2C_Master_Stop 0008               ??_initOperation 0017  
        __size_of_showResults 015C                __pintcode_body 0ED2     __size_of_lcd_shift_cursor 001C  
                 ?_checkValid 0021          end_of_initialization 13E8         __end_of_LCD_SIZE_HORZ FEF6  
       __end_of_LCD_SIZE_VERT FEF5      retrieveResults@logOption 001D                 __Lmediumconst FEBA  
                     int_func 0ED2             main@operationTime 018F     __size_of_I2C_Master_Start 0008  
   __size_of_I2C_Master_Write 000A               ___lldiv@divisor 0019                 ??_getDateTime 001A  
             ___lldiv@counter 0021                    ??_showLogs 005B                       printf@c 003E  
                     printf@f 0021                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                       strcmp@r 0020  
                   _PORTBbits 000F81                     _TRISCbits 000F94                getKeyPressed@i 0058  
                 printf@width 003C     lcd_shift_cursor@direction 0018              ?_retrieveResults 0015  
                  main@inputs 0191         initStandby@keyPressed 0176                __end_of___ftge 11B4  
              __end_of___wmul 1684           __end_of_getDateTime 1326           __size_of_checkValid 021C  
               __pidataCOMRAM 178A                __end_of_printf 03A6                  _firstTimeSet FEE6  
              __end_of_strcmp 159A           start_initialization 1390             ??_I2C_Master_Init 0026  
           ??_I2C_Master_Read 0016             ??_I2C_Master_Wait 0015             ??_I2C_Master_Stop 0016  
                    ??___ftge 0038                      ??___wmul 0019         showLogs@operationTime 009E  
    I2C_Master_Init@clockFreq 0022                   __pdataBANK1 0100              __CFG_LPT1OSC$OFF 000000  
               ??_initStandby 00FF                      ??_printf 002D     __size_of_interruptHandler 0FAE  
          getInputs@screenPos 0171                      ??_strcmp 001F             __size_of___ftpack 00AE  
                 __pbssCOMRAM 005C             __size_of___lwtoft 0024                 __pcstackBANK0 0080  
               __pcstackBANK1 016A         getKeyPressed@keypress 0056              _lcd_shift_cursor 16EA  
      __size_of_getKeyPressed 0178         checkValid@fastenerSet 00E4              _I2C_Master_Start 1782  
            _I2C_Master_Write 1770              ___lwdiv@dividend 0015                   _getDateTime 12B4  
           __CFG_CCP2MX$PORTC 000000                     __pintcode 0008        checkValid@numFasteners 00F1  
               __pmediumconst FEBA                     _lcdNibble 1236                     _getInputs 03A6  
                    ?___lldiv 0015                      ?___lwdiv 0015                      ?___lwmod 001C  
           __size_of_showLogs 00E4                      ?_lcdInst 0001                      ?_initLCD 0001  
                    ?_initRTC 0001                     _errScreen 159A                      ?_isdigit 0001  
   getKeyPressed@currTimeTemp 004F           __end_of_initStandby 0DEE                     _hexpowers FED6  
            ___lwdiv@quotient 001A              main@numRemaining 0179                  ??_checkValid 0025  
              __size_of_putch 0014                      _LCD_LEFT FEF2       __size_of_lcd_set_cursor 0040  
              ___wmul@product 0019                      _LATAbits 000F89                      _LATDbits 000F8C  
             showLogs@timeEnd 0088               lcd_set_cursor@i 001D               lcd_set_cursor@x 001E  
             lcd_set_cursor@y 001B                      i2u120_40 0F58                      i2u120_46 0F5A  
                    i2u119_40 0F2A                      i2u119_46 0F2C                      i2u385_47 0F44  
            __CFG_WDTPS$32768 000000                     main@F3120 0164                     main@F3122 019F  
                  ?_lcdNibble 0001                    ?_getInputs 00FD                 _getKeyPressed 0A18  
          __end_of_checkValid 081E             ___wmul@multiplier 0015                 lcdNibble@data 0016  
          showLogs@keyPressed 00A0                    ?_errScreen 0001                    printf@flag 003B  
               lcdNibble@temp 0015                    printf@prec 0036                 ??_showResults 005A  
              _LCD_HORZ_LIMIT FEF7                     copy_data0 13A4                     copy_data1 13C4  
       __end_of_initOperation 1720   checkValid@validFastenerSets 0080  getKeyPressed@lastTimeRefresh 0048  
                getDateTime@i 001A                      __Hrparam 0000                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000      showResults@operationTime 0084                ?_getKeyPressed 0001  
   calcOperationTime@minStart 0025                   checkValid@i 00FB     calcOperationTime@secStart 0027  
            __size_of___lldiv 0082              __size_of___lwdiv 0052              __size_of___lwmod 0042  
                    ___ftpack 1076                   _initStandby 0CEC              _interruptHandler 0008  
                 _isdigit$898 0016                      ___lwtoft 16A8              __size_of_lcdInst 0014  
             _I2C_Master_Init 145A               _I2C_Master_Read 1684              __size_of_initLCD 004C  
             _I2C_Master_Wait 175E              __size_of_initRTC 0016               _I2C_Master_Stop 177A  
      __end_of_LCD_HORZ_LIMIT FEF8              __size_of_isdigit 001E               ___lwdiv@divisor 0017  
             ___lwdiv@counter 0019                      __ptext10 159A                      __ptext11 0A18  
                    __ptext20 174A                      __ptext12 161E                      __ptext21 1236  
                    __ptext13 16EA                      __ptext30 1076                      __ptext22 12B4  
                    __ptext14 13F6                      __ptext31 1124                      __ptext23 1770  
                    __ptext15 0012                      __ptext32 0602                      __ptext24 177A  
                    __ptext16 1736                      __ptext33 1554                      __ptext25 1782  
                    __ptext17 16CC                      __ptext34 165E                      __ptext26 1684  
                    __ptext18 15DC                      __ptext35 1706                      __ptext27 175E  
                    __ptext19 14B6                      __ptext28 081E                      __ptext29 16A8  
              _LCD_VERT_LIMIT FEF6              dispRealTime@time 0041           __end_of_showResults 0CEC  
           showResults@inputs 0080                 __size_of_main 00C0                showLogs@inputs 008F  
                    _showLogs 0DEE                   ??_lcdNibble 0015                   ??_getInputs 016A  
                    int$flags 006B      __end_of_lcd_shift_cursor 1706      __size_of_retrieveResults 0002  
                   printf@idx 0031                     printf@len 0034                     printf@val 0039  
 I2C_Master_Write@byteToWrite 0016             lcd_shift_cursor@n 001A                   ??_errScreen 005A  
                   putch@data 0017      __end_of_I2C_Master_Start 178A      __end_of_I2C_Master_Write 177A  
                  _INTCONbits 000FF2        __end_of_LCD_VERT_LIMIT FEF7              checkValid@inputs 0023  
                    isdigit@c 0017                 showLogs@F3187 0065                 showLogs@F3189 0197  
    checkValid@numSetsPerStep 00F9             initStandby@inputs 0174                      intlevel2 0000  
              _lcd_set_cursor 161E                 _LCD_SIZE_HORZ FEF5              ___lwmod@dividend 001C  
               _LCD_SIZE_VERT FEF4              ___lldiv@dividend 0015       checkValid@MAX_FASTENERS 00E9  
             checkValid@F3160 FEDE               checkValid@F3153 0100               checkValid@F3158 005C  
             ??_getKeyPressed 0048                  ?_getDateTime 0018                      printf@ap 0037  
                    printf@cp 0032       __end_of_I2C_Master_Init 14B6       __end_of_I2C_Master_Read 16A8  
     __end_of_I2C_Master_Wait 1770       __end_of_I2C_Master_Stop 1782                   lcdInst@data 0017  
                    strcmp@s1 001B                      strcmp@s2 001D                 ?_dispRealTime 0001  
            ___lldiv@quotient 001D               ___lwmod@divisor 001E               ___lwmod@counter 0020  
                 _showResults 0B90                   _SSPCON1bits 000FC6                   _SSPCON2bits 000FC5  
      __end_of_lcd_set_cursor 165E      lcd_shift_cursor@numChars 0019             _calcOperationTime 081E  
                showResults@i 0086            ?_calcOperationTime 001B  
